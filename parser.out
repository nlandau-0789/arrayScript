Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    break
    continue

Grammar

Rule 0     S' -> stmts
Rule 1     stmts -> stmt
Rule 2     stmts -> stmt stmts
Rule 3     stmt -> block_stmt
Rule 4     stmt -> line_stmt
Rule 5     TYPE -> type_type
Rule 6     TYPE -> type_num
Rule 7     TYPE -> type_any
Rule 8     TYPE -> type_u64
Rule 9     TYPE -> type_u32
Rule 10    TYPE -> type_u16
Rule 11    TYPE -> type_u8
Rule 12    TYPE -> type_i64
Rule 13    TYPE -> type_i32
Rule 14    TYPE -> type_i16
Rule 15    TYPE -> type_i8
Rule 16    TYPE -> type_f32
Rule 17    TYPE -> type_f64
Rule 18    TYPE -> type_str
Rule 19    TYPE -> type_list
Rule 20    TYPE -> type_tuple
Rule 21    TYPE -> type_array
Rule 22    TYPE -> type_vector
Rule 23    TYPE -> type_dict
Rule 24    TYPE -> type_generator
Rule 25    TYPE -> type_linked_list
Rule 26    TYPE -> type_doubly_linked_list
Rule 27    TYPE -> type_deque
Rule 28    TYPE -> type_heap
Rule 29    TYPE -> type_fibonacci_heap
Rule 30    TYPE -> type_tree
Rule 31    TYPE -> type_trie
Rule 32    TYPE -> type_stack
Rule 33    TYPE -> type_queue
Rule 34    TYPE -> type_binary_search_tree
Rule 35    TYPE -> type_bitset
Rule 36    TYPE -> type_set
Rule 37    TYPE -> type_map
Rule 38    TYPE -> type_range
Rule 39    TYPE -> type_bad_struct
Rule 40    TYPE -> type_bad_struct2
Rule 41    line_stmt -> assign_stmt
Rule 42    line_stmt -> expr
Rule 43    line_stmt -> pass
Rule 44    line_stmt -> return_stmt
Rule 45    line_stmt -> del_stmt
Rule 46    line_stmt -> declaration_stmt
Rule 47    lambda_decl -> lambda comma_separated_names : expr
Rule 48    return_stmt -> return expr
Rule 49    del_stmt -> del expr
Rule 50    assign_stmt -> comma_separated_names = expr
Rule 51    declaration_stmt -> TYPE comma_separated_names
Rule 52    comma_separated_names -> VAR
Rule 53    comma_separated_names -> VAR , comma_separated_names
Rule 54    block_stmt -> block_decl { stmts }
Rule 55    block_decl -> for_decl
Rule 56    block_decl -> if_decl
Rule 57    block_decl -> else
Rule 58    block_decl -> elif_decl
Rule 59    block_decl -> operator_decl
Rule 60    block_decl -> struct_decl
Rule 61    block_decl -> while_decl
Rule 62    block_decl -> func_decl
Rule 63    for_decl -> for comma_separated_names operator_contains expr
Rule 64    if_decl -> if expr
Rule 65    elif_decl -> elif expr
Rule 66    operator_decl -> operator ( arguments )
Rule 67    struct_decl -> struct TYPE
Rule 68    while_decl -> while expr
Rule 69    func_decl -> func VAR ( def_arguments )
Rule 70    def_arguments -> declaration_stmt
Rule 71    def_arguments -> declaration_stmt ; def_arguments
Rule 72    const_val -> FLOAT
Rule 73    const_val -> NUM
Rule 74    const_val -> NULL
Rule 75    const_val -> STRING_3SQ
Rule 76    const_val -> STRING_3DQ
Rule 77    const_val -> STRING_SQ
Rule 78    const_val -> STRING_DQ
Rule 79    const_val -> true
Rule 80    const_val -> false
Rule 81    return_val -> type_type ( arguments )
Rule 82    return_val -> type_num ( arguments )
Rule 83    return_val -> type_any ( arguments )
Rule 84    return_val -> type_u64 ( arguments )
Rule 85    return_val -> type_u32 ( arguments )
Rule 86    return_val -> type_u16 ( arguments )
Rule 87    return_val -> type_u8 ( arguments )
Rule 88    return_val -> type_i64 ( arguments )
Rule 89    return_val -> type_i32 ( arguments )
Rule 90    return_val -> type_i16 ( arguments )
Rule 91    return_val -> type_i8 ( arguments )
Rule 92    return_val -> type_f32 ( arguments )
Rule 93    return_val -> type_f64 ( arguments )
Rule 94    return_val -> type_str ( arguments )
Rule 95    return_val -> type_list ( arguments )
Rule 96    return_val -> type_tuple ( arguments )
Rule 97    return_val -> type_array ( arguments )
Rule 98    return_val -> type_vector ( arguments )
Rule 99    return_val -> type_dict ( arguments )
Rule 100   return_val -> type_generator ( arguments )
Rule 101   return_val -> type_linked_list ( arguments )
Rule 102   return_val -> type_doubly_linked_list ( arguments )
Rule 103   return_val -> type_deque ( arguments )
Rule 104   return_val -> type_heap ( arguments )
Rule 105   return_val -> type_fibonacci_heap ( arguments )
Rule 106   return_val -> type_tree ( arguments )
Rule 107   return_val -> type_trie ( arguments )
Rule 108   return_val -> type_stack ( arguments )
Rule 109   return_val -> type_queue ( arguments )
Rule 110   return_val -> type_binary_search_tree ( arguments )
Rule 111   return_val -> type_bitset ( arguments )
Rule 112   return_val -> type_set ( arguments )
Rule 113   return_val -> type_map ( arguments )
Rule 114   return_val -> type_range ( arguments )
Rule 115   return_val -> type_bad_struct ( arguments )
Rule 116   return_val -> type_bad_struct2 ( arguments )
Rule 117   return_val -> VAR ( arguments )
Rule 118   expr -> expr operator_add expr
Rule 119   expr -> expr operator_sub expr
Rule 120   expr -> expr operator_mul expr
Rule 121   expr -> expr operator_div expr
Rule 122   expr -> expr operator_trudiv expr
Rule 123   expr -> expr operator_pow expr
Rule 124   expr -> expr operator_join expr
Rule 125   expr -> expr operator_split expr
Rule 126   expr -> expr operator_scan expr
Rule 127   expr -> expr operator_reduc expr
Rule 128   expr -> expr operator_bitand expr
Rule 129   expr -> expr operator_bitor expr
Rule 130   expr -> expr operator_bitxor expr
Rule 131   expr -> expr operator_bitshiftleft expr
Rule 132   expr -> expr operator_bitshiftright expr
Rule 133   expr -> expr operator_and expr
Rule 134   expr -> expr operator_or expr
Rule 135   expr -> expr operator_xor expr
Rule 136   expr -> expr operator_contains expr
Rule 137   expr -> operator_bitnot expr
Rule 138   expr -> operator_not expr
Rule 139   expr -> expr operator_incr
Rule 140   expr -> expr operator_decr
Rule 141   expr -> expr operator_outer expr expr
Rule 142   expr -> expr expr operator_inner expr expr
Rule 143   expr -> operator_reverse expr
Rule 144   expr -> expr operator_rotate expr
Rule 145   expr -> expr operator_apply expr
Rule 146   expr -> expr operator_compose expr
Rule 147   expr -> expr operator_over expr
Rule 148   expr -> expr operator_map
Rule 149   expr -> operator_sorted_incr expr
Rule 150   expr -> operator_sorted_decr expr
Rule 151   expr -> expr operator_less_than expr
Rule 152   expr -> expr operator_less_than_equals expr
Rule 153   expr -> expr operator_greater_than expr
Rule 154   expr -> expr operator_greater_than_equals expr
Rule 155   expr -> expr operator_equals expr
Rule 156   expr -> expr operator_not_equals expr
Rule 157   expr -> expr operator_smallest expr
Rule 158   expr -> expr operator_greatest expr
Rule 159   expr -> expr operator_goodname expr
Rule 160   expr -> operator_s_combinator expr expr expr
Rule 161   expr -> operator_s2_combinator expr expr expr
Rule 162   expr -> operator_goodname2 expr
Rule 163   expr -> const_val
Rule 164   expr -> VAR
Rule 165   expr -> return_val
Rule 166   expr -> lambda_decl
Rule 167   empty -> <empty>
Rule 168   arguments -> expr
Rule 169   arguments -> type_type
Rule 170   arguments -> type_num
Rule 171   arguments -> type_any
Rule 172   arguments -> type_u64
Rule 173   arguments -> type_u32
Rule 174   arguments -> type_u16
Rule 175   arguments -> type_u8
Rule 176   arguments -> type_i64
Rule 177   arguments -> type_i32
Rule 178   arguments -> type_i16
Rule 179   arguments -> type_i8
Rule 180   arguments -> type_f32
Rule 181   arguments -> type_f64
Rule 182   arguments -> type_str
Rule 183   arguments -> type_list
Rule 184   arguments -> type_tuple
Rule 185   arguments -> type_array
Rule 186   arguments -> type_vector
Rule 187   arguments -> type_dict
Rule 188   arguments -> type_generator
Rule 189   arguments -> type_linked_list
Rule 190   arguments -> type_doubly_linked_list
Rule 191   arguments -> type_deque
Rule 192   arguments -> type_heap
Rule 193   arguments -> type_fibonacci_heap
Rule 194   arguments -> type_tree
Rule 195   arguments -> type_trie
Rule 196   arguments -> type_stack
Rule 197   arguments -> type_queue
Rule 198   arguments -> type_binary_search_tree
Rule 199   arguments -> type_bitset
Rule 200   arguments -> type_set
Rule 201   arguments -> type_map
Rule 202   arguments -> type_range
Rule 203   arguments -> type_bad_struct
Rule 204   arguments -> type_bad_struct2
Rule 205   arguments -> arguments , arguments
Rule 206   arguments -> empty
Rule 207   STRING -> STRING_3SQ
Rule 208   STRING -> STRING_3DQ
Rule 209   STRING -> STRING_SQ
Rule 210   STRING -> STRING_DQ

Terminals, with rules where they appear

(                    : 66 69 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117
)                    : 66 69 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117
,                    : 53 205
:                    : 47
;                    : 71
=                    : 50
FLOAT                : 72
NULL                 : 74
NUM                  : 73
STRING_3DQ           : 76 208
STRING_3SQ           : 75 207
STRING_DQ            : 78 210
STRING_SQ            : 77 209
VAR                  : 52 53 69 117 164
break                : 
continue             : 
del                  : 49
elif                 : 65
else                 : 57
error                : 
false                : 80
for                  : 63
func                 : 69
if                   : 64
lambda               : 47
operator             : 66
operator_add         : 118
operator_and         : 133
operator_apply       : 145
operator_bitand      : 128
operator_bitnot      : 137
operator_bitor       : 129
operator_bitshiftleft : 131
operator_bitshiftright : 132
operator_bitxor      : 130
operator_compose     : 146
operator_contains    : 63 136
operator_decr        : 140
operator_div         : 121
operator_equals      : 155
operator_goodname    : 159
operator_goodname2   : 162
operator_greater_than : 153
operator_greater_than_equals : 154
operator_greatest    : 158
operator_incr        : 139
operator_inner       : 142
operator_join        : 124
operator_less_than   : 151
operator_less_than_equals : 152
operator_map         : 148
operator_mul         : 120
operator_not         : 138
operator_not_equals  : 156
operator_or          : 134
operator_outer       : 141
operator_over        : 147
operator_pow         : 123
operator_reduc       : 127
operator_reverse     : 143
operator_rotate      : 144
operator_s2_combinator : 161
operator_s_combinator : 160
operator_scan        : 126
operator_smallest    : 157
operator_sorted_decr : 150
operator_sorted_incr : 149
operator_split       : 125
operator_sub         : 119
operator_trudiv      : 122
operator_xor         : 135
pass                 : 43
return               : 48
struct               : 67
true                 : 79
type_any             : 7 83 171
type_array           : 21 97 185
type_bad_struct      : 39 115 203
type_bad_struct2     : 40 116 204
type_binary_search_tree : 34 110 198
type_bitset          : 35 111 199
type_deque           : 27 103 191
type_dict            : 23 99 187
type_doubly_linked_list : 26 102 190
type_f32             : 16 92 180
type_f64             : 17 93 181
type_fibonacci_heap  : 29 105 193
type_generator       : 24 100 188
type_heap            : 28 104 192
type_i16             : 14 90 178
type_i32             : 13 89 177
type_i64             : 12 88 176
type_i8              : 15 91 179
type_linked_list     : 25 101 189
type_list            : 19 95 183
type_map             : 37 113 201
type_num             : 6 82 170
type_queue           : 33 109 197
type_range           : 38 114 202
type_set             : 36 112 200
type_stack           : 32 108 196
type_str             : 18 94 182
type_tree            : 30 106 194
type_trie            : 31 107 195
type_tuple           : 20 96 184
type_type            : 5 81 169
type_u16             : 10 86 174
type_u32             : 9 85 173
type_u64             : 8 84 172
type_u8              : 11 87 175
type_vector          : 22 98 186
while                : 68
{                    : 54
}                    : 54

Nonterminals, with rules where they appear

STRING               : 
TYPE                 : 51 67
arguments            : 66 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 205 205
assign_stmt          : 41
block_decl           : 54
block_stmt           : 3
comma_separated_names : 47 50 51 53 63
const_val            : 163
declaration_stmt     : 46 70 71
def_arguments        : 69 71
del_stmt             : 45
elif_decl            : 58
empty                : 206
expr                 : 42 47 48 49 50 63 64 65 68 118 118 119 119 120 120 121 121 122 122 123 123 124 124 125 125 126 126 127 127 128 128 129 129 130 130 131 131 132 132 133 133 134 134 135 135 136 136 137 138 139 140 141 141 141 142 142 142 142 143 144 144 145 145 146 146 147 147 148 149 150 151 151 152 152 153 153 154 154 155 155 156 156 157 157 158 158 159 159 160 160 160 161 161 161 162 168
for_decl             : 55
func_decl            : 62
if_decl              : 56
lambda_decl          : 166
line_stmt            : 4
operator_decl        : 59
return_stmt          : 44
return_val           : 165
stmt                 : 1 2
stmts                : 2 54 0
struct_decl          : 60
while_decl           : 61

Parsing method: LALR

state 0

    (0) S' -> . stmts
    (1) stmts -> . stmt
    (2) stmts -> . stmt stmts
    (3) stmt -> . block_stmt
    (4) stmt -> . line_stmt
    (54) block_stmt -> . block_decl { stmts }
    (41) line_stmt -> . assign_stmt
    (42) line_stmt -> . expr
    (43) line_stmt -> . pass
    (44) line_stmt -> . return_stmt
    (45) line_stmt -> . del_stmt
    (46) line_stmt -> . declaration_stmt
    (55) block_decl -> . for_decl
    (56) block_decl -> . if_decl
    (57) block_decl -> . else
    (58) block_decl -> . elif_decl
    (59) block_decl -> . operator_decl
    (60) block_decl -> . struct_decl
    (61) block_decl -> . while_decl
    (62) block_decl -> . func_decl
    (50) assign_stmt -> . comma_separated_names = expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (48) return_stmt -> . return expr
    (49) del_stmt -> . del expr
    (51) declaration_stmt -> . TYPE comma_separated_names
    (63) for_decl -> . for comma_separated_names operator_contains expr
    (64) if_decl -> . if expr
    (65) elif_decl -> . elif expr
    (66) operator_decl -> . operator ( arguments )
    (67) struct_decl -> . struct TYPE
    (68) while_decl -> . while expr
    (69) func_decl -> . func VAR ( def_arguments )
    (52) comma_separated_names -> . VAR
    (53) comma_separated_names -> . VAR , comma_separated_names
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr
    (5) TYPE -> . type_type
    (6) TYPE -> . type_num
    (7) TYPE -> . type_any
    (8) TYPE -> . type_u64
    (9) TYPE -> . type_u32
    (10) TYPE -> . type_u16
    (11) TYPE -> . type_u8
    (12) TYPE -> . type_i64
    (13) TYPE -> . type_i32
    (14) TYPE -> . type_i16
    (15) TYPE -> . type_i8
    (16) TYPE -> . type_f32
    (17) TYPE -> . type_f64
    (18) TYPE -> . type_str
    (19) TYPE -> . type_list
    (20) TYPE -> . type_tuple
    (21) TYPE -> . type_array
    (22) TYPE -> . type_vector
    (23) TYPE -> . type_dict
    (24) TYPE -> . type_generator
    (25) TYPE -> . type_linked_list
    (26) TYPE -> . type_doubly_linked_list
    (27) TYPE -> . type_deque
    (28) TYPE -> . type_heap
    (29) TYPE -> . type_fibonacci_heap
    (30) TYPE -> . type_tree
    (31) TYPE -> . type_trie
    (32) TYPE -> . type_stack
    (33) TYPE -> . type_queue
    (34) TYPE -> . type_binary_search_tree
    (35) TYPE -> . type_bitset
    (36) TYPE -> . type_set
    (37) TYPE -> . type_map
    (38) TYPE -> . type_range
    (39) TYPE -> . type_bad_struct
    (40) TYPE -> . type_bad_struct2

    pass            shift and go to state 8
    else            shift and go to state 14
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 30
    return          shift and go to state 33
    del             shift and go to state 34
    for             shift and go to state 36
    if              shift and go to state 37
    elif            shift and go to state 38
    operator        shift and go to state 39
    struct          shift and go to state 40
    while           shift and go to state 41
    func            shift and go to state 42
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 52
    type_num        shift and go to state 53
    type_any        shift and go to state 54
    type_u64        shift and go to state 55
    type_u32        shift and go to state 56
    type_u16        shift and go to state 57
    type_u8         shift and go to state 58
    type_i64        shift and go to state 59
    type_i32        shift and go to state 60
    type_i16        shift and go to state 61
    type_i8         shift and go to state 62
    type_f32        shift and go to state 63
    type_f64        shift and go to state 64
    type_str        shift and go to state 65
    type_list       shift and go to state 66
    type_tuple      shift and go to state 67
    type_array      shift and go to state 68
    type_vector     shift and go to state 69
    type_dict       shift and go to state 70
    type_generator  shift and go to state 71
    type_linked_list shift and go to state 72
    type_doubly_linked_list shift and go to state 73
    type_deque      shift and go to state 74
    type_heap       shift and go to state 75
    type_fibonacci_heap shift and go to state 76
    type_tree       shift and go to state 77
    type_trie       shift and go to state 78
    type_stack      shift and go to state 79
    type_queue      shift and go to state 80
    type_binary_search_tree shift and go to state 81
    type_bitset     shift and go to state 82
    type_set        shift and go to state 83
    type_map        shift and go to state 84
    type_range      shift and go to state 85
    type_bad_struct shift and go to state 86
    type_bad_struct2 shift and go to state 87
    lambda          shift and go to state 88

    stmts                          shift and go to state 1
    stmt                           shift and go to state 2
    block_stmt                     shift and go to state 3
    line_stmt                      shift and go to state 4
    block_decl                     shift and go to state 5
    assign_stmt                    shift and go to state 6
    expr                           shift and go to state 7
    return_stmt                    shift and go to state 9
    del_stmt                       shift and go to state 10
    declaration_stmt               shift and go to state 11
    for_decl                       shift and go to state 12
    if_decl                        shift and go to state 13
    elif_decl                      shift and go to state 15
    operator_decl                  shift and go to state 16
    struct_decl                    shift and go to state 17
    while_decl                     shift and go to state 18
    func_decl                      shift and go to state 19
    comma_separated_names          shift and go to state 20
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32
    TYPE                           shift and go to state 35

state 1

    (0) S' -> stmts .



state 2

    (1) stmts -> stmt .
    (2) stmts -> stmt . stmts
    (1) stmts -> . stmt
    (2) stmts -> . stmt stmts
    (3) stmt -> . block_stmt
    (4) stmt -> . line_stmt
    (54) block_stmt -> . block_decl { stmts }
    (41) line_stmt -> . assign_stmt
    (42) line_stmt -> . expr
    (43) line_stmt -> . pass
    (44) line_stmt -> . return_stmt
    (45) line_stmt -> . del_stmt
    (46) line_stmt -> . declaration_stmt
    (55) block_decl -> . for_decl
    (56) block_decl -> . if_decl
    (57) block_decl -> . else
    (58) block_decl -> . elif_decl
    (59) block_decl -> . operator_decl
    (60) block_decl -> . struct_decl
    (61) block_decl -> . while_decl
    (62) block_decl -> . func_decl
    (50) assign_stmt -> . comma_separated_names = expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (48) return_stmt -> . return expr
    (49) del_stmt -> . del expr
    (51) declaration_stmt -> . TYPE comma_separated_names
    (63) for_decl -> . for comma_separated_names operator_contains expr
    (64) if_decl -> . if expr
    (65) elif_decl -> . elif expr
    (66) operator_decl -> . operator ( arguments )
    (67) struct_decl -> . struct TYPE
    (68) while_decl -> . while expr
    (69) func_decl -> . func VAR ( def_arguments )
    (52) comma_separated_names -> . VAR
    (53) comma_separated_names -> . VAR , comma_separated_names
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr
    (5) TYPE -> . type_type
    (6) TYPE -> . type_num
    (7) TYPE -> . type_any
    (8) TYPE -> . type_u64
    (9) TYPE -> . type_u32
    (10) TYPE -> . type_u16
    (11) TYPE -> . type_u8
    (12) TYPE -> . type_i64
    (13) TYPE -> . type_i32
    (14) TYPE -> . type_i16
    (15) TYPE -> . type_i8
    (16) TYPE -> . type_f32
    (17) TYPE -> . type_f64
    (18) TYPE -> . type_str
    (19) TYPE -> . type_list
    (20) TYPE -> . type_tuple
    (21) TYPE -> . type_array
    (22) TYPE -> . type_vector
    (23) TYPE -> . type_dict
    (24) TYPE -> . type_generator
    (25) TYPE -> . type_linked_list
    (26) TYPE -> . type_doubly_linked_list
    (27) TYPE -> . type_deque
    (28) TYPE -> . type_heap
    (29) TYPE -> . type_fibonacci_heap
    (30) TYPE -> . type_tree
    (31) TYPE -> . type_trie
    (32) TYPE -> . type_stack
    (33) TYPE -> . type_queue
    (34) TYPE -> . type_binary_search_tree
    (35) TYPE -> . type_bitset
    (36) TYPE -> . type_set
    (37) TYPE -> . type_map
    (38) TYPE -> . type_range
    (39) TYPE -> . type_bad_struct
    (40) TYPE -> . type_bad_struct2

    $end            reduce using rule 1 (stmts -> stmt .)
    }               reduce using rule 1 (stmts -> stmt .)
    pass            shift and go to state 8
    else            shift and go to state 14
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 30
    return          shift and go to state 33
    del             shift and go to state 34
    for             shift and go to state 36
    if              shift and go to state 37
    elif            shift and go to state 38
    operator        shift and go to state 39
    struct          shift and go to state 40
    while           shift and go to state 41
    func            shift and go to state 42
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 52
    type_num        shift and go to state 53
    type_any        shift and go to state 54
    type_u64        shift and go to state 55
    type_u32        shift and go to state 56
    type_u16        shift and go to state 57
    type_u8         shift and go to state 58
    type_i64        shift and go to state 59
    type_i32        shift and go to state 60
    type_i16        shift and go to state 61
    type_i8         shift and go to state 62
    type_f32        shift and go to state 63
    type_f64        shift and go to state 64
    type_str        shift and go to state 65
    type_list       shift and go to state 66
    type_tuple      shift and go to state 67
    type_array      shift and go to state 68
    type_vector     shift and go to state 69
    type_dict       shift and go to state 70
    type_generator  shift and go to state 71
    type_linked_list shift and go to state 72
    type_doubly_linked_list shift and go to state 73
    type_deque      shift and go to state 74
    type_heap       shift and go to state 75
    type_fibonacci_heap shift and go to state 76
    type_tree       shift and go to state 77
    type_trie       shift and go to state 78
    type_stack      shift and go to state 79
    type_queue      shift and go to state 80
    type_binary_search_tree shift and go to state 81
    type_bitset     shift and go to state 82
    type_set        shift and go to state 83
    type_map        shift and go to state 84
    type_range      shift and go to state 85
    type_bad_struct shift and go to state 86
    type_bad_struct2 shift and go to state 87
    lambda          shift and go to state 88

    stmt                           shift and go to state 2
    stmts                          shift and go to state 89
    block_stmt                     shift and go to state 3
    line_stmt                      shift and go to state 4
    block_decl                     shift and go to state 5
    assign_stmt                    shift and go to state 6
    expr                           shift and go to state 7
    return_stmt                    shift and go to state 9
    del_stmt                       shift and go to state 10
    declaration_stmt               shift and go to state 11
    for_decl                       shift and go to state 12
    if_decl                        shift and go to state 13
    elif_decl                      shift and go to state 15
    operator_decl                  shift and go to state 16
    struct_decl                    shift and go to state 17
    while_decl                     shift and go to state 18
    func_decl                      shift and go to state 19
    comma_separated_names          shift and go to state 20
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32
    TYPE                           shift and go to state 35

state 3

    (3) stmt -> block_stmt .

    pass            reduce using rule 3 (stmt -> block_stmt .)
    else            reduce using rule 3 (stmt -> block_stmt .)
    operator_bitnot reduce using rule 3 (stmt -> block_stmt .)
    operator_not    reduce using rule 3 (stmt -> block_stmt .)
    operator_reverse reduce using rule 3 (stmt -> block_stmt .)
    operator_sorted_incr reduce using rule 3 (stmt -> block_stmt .)
    operator_sorted_decr reduce using rule 3 (stmt -> block_stmt .)
    operator_s_combinator reduce using rule 3 (stmt -> block_stmt .)
    operator_s2_combinator reduce using rule 3 (stmt -> block_stmt .)
    operator_goodname2 reduce using rule 3 (stmt -> block_stmt .)
    VAR             reduce using rule 3 (stmt -> block_stmt .)
    return          reduce using rule 3 (stmt -> block_stmt .)
    del             reduce using rule 3 (stmt -> block_stmt .)
    for             reduce using rule 3 (stmt -> block_stmt .)
    if              reduce using rule 3 (stmt -> block_stmt .)
    elif            reduce using rule 3 (stmt -> block_stmt .)
    operator        reduce using rule 3 (stmt -> block_stmt .)
    struct          reduce using rule 3 (stmt -> block_stmt .)
    while           reduce using rule 3 (stmt -> block_stmt .)
    func            reduce using rule 3 (stmt -> block_stmt .)
    FLOAT           reduce using rule 3 (stmt -> block_stmt .)
    NUM             reduce using rule 3 (stmt -> block_stmt .)
    NULL            reduce using rule 3 (stmt -> block_stmt .)
    STRING_3SQ      reduce using rule 3 (stmt -> block_stmt .)
    STRING_3DQ      reduce using rule 3 (stmt -> block_stmt .)
    STRING_SQ       reduce using rule 3 (stmt -> block_stmt .)
    STRING_DQ       reduce using rule 3 (stmt -> block_stmt .)
    true            reduce using rule 3 (stmt -> block_stmt .)
    false           reduce using rule 3 (stmt -> block_stmt .)
    type_type       reduce using rule 3 (stmt -> block_stmt .)
    type_num        reduce using rule 3 (stmt -> block_stmt .)
    type_any        reduce using rule 3 (stmt -> block_stmt .)
    type_u64        reduce using rule 3 (stmt -> block_stmt .)
    type_u32        reduce using rule 3 (stmt -> block_stmt .)
    type_u16        reduce using rule 3 (stmt -> block_stmt .)
    type_u8         reduce using rule 3 (stmt -> block_stmt .)
    type_i64        reduce using rule 3 (stmt -> block_stmt .)
    type_i32        reduce using rule 3 (stmt -> block_stmt .)
    type_i16        reduce using rule 3 (stmt -> block_stmt .)
    type_i8         reduce using rule 3 (stmt -> block_stmt .)
    type_f32        reduce using rule 3 (stmt -> block_stmt .)
    type_f64        reduce using rule 3 (stmt -> block_stmt .)
    type_str        reduce using rule 3 (stmt -> block_stmt .)
    type_list       reduce using rule 3 (stmt -> block_stmt .)
    type_tuple      reduce using rule 3 (stmt -> block_stmt .)
    type_array      reduce using rule 3 (stmt -> block_stmt .)
    type_vector     reduce using rule 3 (stmt -> block_stmt .)
    type_dict       reduce using rule 3 (stmt -> block_stmt .)
    type_generator  reduce using rule 3 (stmt -> block_stmt .)
    type_linked_list reduce using rule 3 (stmt -> block_stmt .)
    type_doubly_linked_list reduce using rule 3 (stmt -> block_stmt .)
    type_deque      reduce using rule 3 (stmt -> block_stmt .)
    type_heap       reduce using rule 3 (stmt -> block_stmt .)
    type_fibonacci_heap reduce using rule 3 (stmt -> block_stmt .)
    type_tree       reduce using rule 3 (stmt -> block_stmt .)
    type_trie       reduce using rule 3 (stmt -> block_stmt .)
    type_stack      reduce using rule 3 (stmt -> block_stmt .)
    type_queue      reduce using rule 3 (stmt -> block_stmt .)
    type_binary_search_tree reduce using rule 3 (stmt -> block_stmt .)
    type_bitset     reduce using rule 3 (stmt -> block_stmt .)
    type_set        reduce using rule 3 (stmt -> block_stmt .)
    type_map        reduce using rule 3 (stmt -> block_stmt .)
    type_range      reduce using rule 3 (stmt -> block_stmt .)
    type_bad_struct reduce using rule 3 (stmt -> block_stmt .)
    type_bad_struct2 reduce using rule 3 (stmt -> block_stmt .)
    lambda          reduce using rule 3 (stmt -> block_stmt .)
    $end            reduce using rule 3 (stmt -> block_stmt .)
    }               reduce using rule 3 (stmt -> block_stmt .)


state 4

    (4) stmt -> line_stmt .

    pass            reduce using rule 4 (stmt -> line_stmt .)
    else            reduce using rule 4 (stmt -> line_stmt .)
    operator_bitnot reduce using rule 4 (stmt -> line_stmt .)
    operator_not    reduce using rule 4 (stmt -> line_stmt .)
    operator_reverse reduce using rule 4 (stmt -> line_stmt .)
    operator_sorted_incr reduce using rule 4 (stmt -> line_stmt .)
    operator_sorted_decr reduce using rule 4 (stmt -> line_stmt .)
    operator_s_combinator reduce using rule 4 (stmt -> line_stmt .)
    operator_s2_combinator reduce using rule 4 (stmt -> line_stmt .)
    operator_goodname2 reduce using rule 4 (stmt -> line_stmt .)
    VAR             reduce using rule 4 (stmt -> line_stmt .)
    return          reduce using rule 4 (stmt -> line_stmt .)
    del             reduce using rule 4 (stmt -> line_stmt .)
    for             reduce using rule 4 (stmt -> line_stmt .)
    if              reduce using rule 4 (stmt -> line_stmt .)
    elif            reduce using rule 4 (stmt -> line_stmt .)
    operator        reduce using rule 4 (stmt -> line_stmt .)
    struct          reduce using rule 4 (stmt -> line_stmt .)
    while           reduce using rule 4 (stmt -> line_stmt .)
    func            reduce using rule 4 (stmt -> line_stmt .)
    FLOAT           reduce using rule 4 (stmt -> line_stmt .)
    NUM             reduce using rule 4 (stmt -> line_stmt .)
    NULL            reduce using rule 4 (stmt -> line_stmt .)
    STRING_3SQ      reduce using rule 4 (stmt -> line_stmt .)
    STRING_3DQ      reduce using rule 4 (stmt -> line_stmt .)
    STRING_SQ       reduce using rule 4 (stmt -> line_stmt .)
    STRING_DQ       reduce using rule 4 (stmt -> line_stmt .)
    true            reduce using rule 4 (stmt -> line_stmt .)
    false           reduce using rule 4 (stmt -> line_stmt .)
    type_type       reduce using rule 4 (stmt -> line_stmt .)
    type_num        reduce using rule 4 (stmt -> line_stmt .)
    type_any        reduce using rule 4 (stmt -> line_stmt .)
    type_u64        reduce using rule 4 (stmt -> line_stmt .)
    type_u32        reduce using rule 4 (stmt -> line_stmt .)
    type_u16        reduce using rule 4 (stmt -> line_stmt .)
    type_u8         reduce using rule 4 (stmt -> line_stmt .)
    type_i64        reduce using rule 4 (stmt -> line_stmt .)
    type_i32        reduce using rule 4 (stmt -> line_stmt .)
    type_i16        reduce using rule 4 (stmt -> line_stmt .)
    type_i8         reduce using rule 4 (stmt -> line_stmt .)
    type_f32        reduce using rule 4 (stmt -> line_stmt .)
    type_f64        reduce using rule 4 (stmt -> line_stmt .)
    type_str        reduce using rule 4 (stmt -> line_stmt .)
    type_list       reduce using rule 4 (stmt -> line_stmt .)
    type_tuple      reduce using rule 4 (stmt -> line_stmt .)
    type_array      reduce using rule 4 (stmt -> line_stmt .)
    type_vector     reduce using rule 4 (stmt -> line_stmt .)
    type_dict       reduce using rule 4 (stmt -> line_stmt .)
    type_generator  reduce using rule 4 (stmt -> line_stmt .)
    type_linked_list reduce using rule 4 (stmt -> line_stmt .)
    type_doubly_linked_list reduce using rule 4 (stmt -> line_stmt .)
    type_deque      reduce using rule 4 (stmt -> line_stmt .)
    type_heap       reduce using rule 4 (stmt -> line_stmt .)
    type_fibonacci_heap reduce using rule 4 (stmt -> line_stmt .)
    type_tree       reduce using rule 4 (stmt -> line_stmt .)
    type_trie       reduce using rule 4 (stmt -> line_stmt .)
    type_stack      reduce using rule 4 (stmt -> line_stmt .)
    type_queue      reduce using rule 4 (stmt -> line_stmt .)
    type_binary_search_tree reduce using rule 4 (stmt -> line_stmt .)
    type_bitset     reduce using rule 4 (stmt -> line_stmt .)
    type_set        reduce using rule 4 (stmt -> line_stmt .)
    type_map        reduce using rule 4 (stmt -> line_stmt .)
    type_range      reduce using rule 4 (stmt -> line_stmt .)
    type_bad_struct reduce using rule 4 (stmt -> line_stmt .)
    type_bad_struct2 reduce using rule 4 (stmt -> line_stmt .)
    lambda          reduce using rule 4 (stmt -> line_stmt .)
    $end            reduce using rule 4 (stmt -> line_stmt .)
    }               reduce using rule 4 (stmt -> line_stmt .)


state 5

    (54) block_stmt -> block_decl . { stmts }

    {               shift and go to state 90


state 6

    (41) line_stmt -> assign_stmt .

    pass            reduce using rule 41 (line_stmt -> assign_stmt .)
    else            reduce using rule 41 (line_stmt -> assign_stmt .)
    operator_bitnot reduce using rule 41 (line_stmt -> assign_stmt .)
    operator_not    reduce using rule 41 (line_stmt -> assign_stmt .)
    operator_reverse reduce using rule 41 (line_stmt -> assign_stmt .)
    operator_sorted_incr reduce using rule 41 (line_stmt -> assign_stmt .)
    operator_sorted_decr reduce using rule 41 (line_stmt -> assign_stmt .)
    operator_s_combinator reduce using rule 41 (line_stmt -> assign_stmt .)
    operator_s2_combinator reduce using rule 41 (line_stmt -> assign_stmt .)
    operator_goodname2 reduce using rule 41 (line_stmt -> assign_stmt .)
    VAR             reduce using rule 41 (line_stmt -> assign_stmt .)
    return          reduce using rule 41 (line_stmt -> assign_stmt .)
    del             reduce using rule 41 (line_stmt -> assign_stmt .)
    for             reduce using rule 41 (line_stmt -> assign_stmt .)
    if              reduce using rule 41 (line_stmt -> assign_stmt .)
    elif            reduce using rule 41 (line_stmt -> assign_stmt .)
    operator        reduce using rule 41 (line_stmt -> assign_stmt .)
    struct          reduce using rule 41 (line_stmt -> assign_stmt .)
    while           reduce using rule 41 (line_stmt -> assign_stmt .)
    func            reduce using rule 41 (line_stmt -> assign_stmt .)
    FLOAT           reduce using rule 41 (line_stmt -> assign_stmt .)
    NUM             reduce using rule 41 (line_stmt -> assign_stmt .)
    NULL            reduce using rule 41 (line_stmt -> assign_stmt .)
    STRING_3SQ      reduce using rule 41 (line_stmt -> assign_stmt .)
    STRING_3DQ      reduce using rule 41 (line_stmt -> assign_stmt .)
    STRING_SQ       reduce using rule 41 (line_stmt -> assign_stmt .)
    STRING_DQ       reduce using rule 41 (line_stmt -> assign_stmt .)
    true            reduce using rule 41 (line_stmt -> assign_stmt .)
    false           reduce using rule 41 (line_stmt -> assign_stmt .)
    type_type       reduce using rule 41 (line_stmt -> assign_stmt .)
    type_num        reduce using rule 41 (line_stmt -> assign_stmt .)
    type_any        reduce using rule 41 (line_stmt -> assign_stmt .)
    type_u64        reduce using rule 41 (line_stmt -> assign_stmt .)
    type_u32        reduce using rule 41 (line_stmt -> assign_stmt .)
    type_u16        reduce using rule 41 (line_stmt -> assign_stmt .)
    type_u8         reduce using rule 41 (line_stmt -> assign_stmt .)
    type_i64        reduce using rule 41 (line_stmt -> assign_stmt .)
    type_i32        reduce using rule 41 (line_stmt -> assign_stmt .)
    type_i16        reduce using rule 41 (line_stmt -> assign_stmt .)
    type_i8         reduce using rule 41 (line_stmt -> assign_stmt .)
    type_f32        reduce using rule 41 (line_stmt -> assign_stmt .)
    type_f64        reduce using rule 41 (line_stmt -> assign_stmt .)
    type_str        reduce using rule 41 (line_stmt -> assign_stmt .)
    type_list       reduce using rule 41 (line_stmt -> assign_stmt .)
    type_tuple      reduce using rule 41 (line_stmt -> assign_stmt .)
    type_array      reduce using rule 41 (line_stmt -> assign_stmt .)
    type_vector     reduce using rule 41 (line_stmt -> assign_stmt .)
    type_dict       reduce using rule 41 (line_stmt -> assign_stmt .)
    type_generator  reduce using rule 41 (line_stmt -> assign_stmt .)
    type_linked_list reduce using rule 41 (line_stmt -> assign_stmt .)
    type_doubly_linked_list reduce using rule 41 (line_stmt -> assign_stmt .)
    type_deque      reduce using rule 41 (line_stmt -> assign_stmt .)
    type_heap       reduce using rule 41 (line_stmt -> assign_stmt .)
    type_fibonacci_heap reduce using rule 41 (line_stmt -> assign_stmt .)
    type_tree       reduce using rule 41 (line_stmt -> assign_stmt .)
    type_trie       reduce using rule 41 (line_stmt -> assign_stmt .)
    type_stack      reduce using rule 41 (line_stmt -> assign_stmt .)
    type_queue      reduce using rule 41 (line_stmt -> assign_stmt .)
    type_binary_search_tree reduce using rule 41 (line_stmt -> assign_stmt .)
    type_bitset     reduce using rule 41 (line_stmt -> assign_stmt .)
    type_set        reduce using rule 41 (line_stmt -> assign_stmt .)
    type_map        reduce using rule 41 (line_stmt -> assign_stmt .)
    type_range      reduce using rule 41 (line_stmt -> assign_stmt .)
    type_bad_struct reduce using rule 41 (line_stmt -> assign_stmt .)
    type_bad_struct2 reduce using rule 41 (line_stmt -> assign_stmt .)
    lambda          reduce using rule 41 (line_stmt -> assign_stmt .)
    $end            reduce using rule 41 (line_stmt -> assign_stmt .)
    }               reduce using rule 41 (line_stmt -> assign_stmt .)


state 7

    (42) line_stmt -> expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 42 (line_stmt -> expr .)
    else            reduce using rule 42 (line_stmt -> expr .)
    return          reduce using rule 42 (line_stmt -> expr .)
    del             reduce using rule 42 (line_stmt -> expr .)
    for             reduce using rule 42 (line_stmt -> expr .)
    if              reduce using rule 42 (line_stmt -> expr .)
    elif            reduce using rule 42 (line_stmt -> expr .)
    operator        reduce using rule 42 (line_stmt -> expr .)
    struct          reduce using rule 42 (line_stmt -> expr .)
    while           reduce using rule 42 (line_stmt -> expr .)
    func            reduce using rule 42 (line_stmt -> expr .)
    $end            reduce using rule 42 (line_stmt -> expr .)
    }               reduce using rule 42 (line_stmt -> expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_bitnot [ reduce using rule 42 (line_stmt -> expr .) ]
  ! operator_not    [ reduce using rule 42 (line_stmt -> expr .) ]
  ! operator_reverse [ reduce using rule 42 (line_stmt -> expr .) ]
  ! operator_sorted_incr [ reduce using rule 42 (line_stmt -> expr .) ]
  ! operator_sorted_decr [ reduce using rule 42 (line_stmt -> expr .) ]
  ! operator_s_combinator [ reduce using rule 42 (line_stmt -> expr .) ]
  ! operator_s2_combinator [ reduce using rule 42 (line_stmt -> expr .) ]
  ! operator_goodname2 [ reduce using rule 42 (line_stmt -> expr .) ]
  ! VAR             [ reduce using rule 42 (line_stmt -> expr .) ]
  ! FLOAT           [ reduce using rule 42 (line_stmt -> expr .) ]
  ! NUM             [ reduce using rule 42 (line_stmt -> expr .) ]
  ! NULL            [ reduce using rule 42 (line_stmt -> expr .) ]
  ! STRING_3SQ      [ reduce using rule 42 (line_stmt -> expr .) ]
  ! STRING_3DQ      [ reduce using rule 42 (line_stmt -> expr .) ]
  ! STRING_SQ       [ reduce using rule 42 (line_stmt -> expr .) ]
  ! STRING_DQ       [ reduce using rule 42 (line_stmt -> expr .) ]
  ! true            [ reduce using rule 42 (line_stmt -> expr .) ]
  ! false           [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_type       [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_num        [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_any        [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_u64        [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_u32        [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_u16        [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_u8         [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_i64        [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_i32        [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_i16        [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_i8         [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_f32        [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_f64        [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_str        [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_list       [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_tuple      [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_array      [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_vector     [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_dict       [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_generator  [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_linked_list [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_doubly_linked_list [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_deque      [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_heap       [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_fibonacci_heap [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_tree       [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_trie       [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_stack      [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_queue      [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_binary_search_tree [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_bitset     [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_set        [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_map        [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_range      [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_bad_struct [ reduce using rule 42 (line_stmt -> expr .) ]
  ! type_bad_struct2 [ reduce using rule 42 (line_stmt -> expr .) ]
  ! lambda          [ reduce using rule 42 (line_stmt -> expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 8

    (43) line_stmt -> pass .

    pass            reduce using rule 43 (line_stmt -> pass .)
    else            reduce using rule 43 (line_stmt -> pass .)
    operator_bitnot reduce using rule 43 (line_stmt -> pass .)
    operator_not    reduce using rule 43 (line_stmt -> pass .)
    operator_reverse reduce using rule 43 (line_stmt -> pass .)
    operator_sorted_incr reduce using rule 43 (line_stmt -> pass .)
    operator_sorted_decr reduce using rule 43 (line_stmt -> pass .)
    operator_s_combinator reduce using rule 43 (line_stmt -> pass .)
    operator_s2_combinator reduce using rule 43 (line_stmt -> pass .)
    operator_goodname2 reduce using rule 43 (line_stmt -> pass .)
    VAR             reduce using rule 43 (line_stmt -> pass .)
    return          reduce using rule 43 (line_stmt -> pass .)
    del             reduce using rule 43 (line_stmt -> pass .)
    for             reduce using rule 43 (line_stmt -> pass .)
    if              reduce using rule 43 (line_stmt -> pass .)
    elif            reduce using rule 43 (line_stmt -> pass .)
    operator        reduce using rule 43 (line_stmt -> pass .)
    struct          reduce using rule 43 (line_stmt -> pass .)
    while           reduce using rule 43 (line_stmt -> pass .)
    func            reduce using rule 43 (line_stmt -> pass .)
    FLOAT           reduce using rule 43 (line_stmt -> pass .)
    NUM             reduce using rule 43 (line_stmt -> pass .)
    NULL            reduce using rule 43 (line_stmt -> pass .)
    STRING_3SQ      reduce using rule 43 (line_stmt -> pass .)
    STRING_3DQ      reduce using rule 43 (line_stmt -> pass .)
    STRING_SQ       reduce using rule 43 (line_stmt -> pass .)
    STRING_DQ       reduce using rule 43 (line_stmt -> pass .)
    true            reduce using rule 43 (line_stmt -> pass .)
    false           reduce using rule 43 (line_stmt -> pass .)
    type_type       reduce using rule 43 (line_stmt -> pass .)
    type_num        reduce using rule 43 (line_stmt -> pass .)
    type_any        reduce using rule 43 (line_stmt -> pass .)
    type_u64        reduce using rule 43 (line_stmt -> pass .)
    type_u32        reduce using rule 43 (line_stmt -> pass .)
    type_u16        reduce using rule 43 (line_stmt -> pass .)
    type_u8         reduce using rule 43 (line_stmt -> pass .)
    type_i64        reduce using rule 43 (line_stmt -> pass .)
    type_i32        reduce using rule 43 (line_stmt -> pass .)
    type_i16        reduce using rule 43 (line_stmt -> pass .)
    type_i8         reduce using rule 43 (line_stmt -> pass .)
    type_f32        reduce using rule 43 (line_stmt -> pass .)
    type_f64        reduce using rule 43 (line_stmt -> pass .)
    type_str        reduce using rule 43 (line_stmt -> pass .)
    type_list       reduce using rule 43 (line_stmt -> pass .)
    type_tuple      reduce using rule 43 (line_stmt -> pass .)
    type_array      reduce using rule 43 (line_stmt -> pass .)
    type_vector     reduce using rule 43 (line_stmt -> pass .)
    type_dict       reduce using rule 43 (line_stmt -> pass .)
    type_generator  reduce using rule 43 (line_stmt -> pass .)
    type_linked_list reduce using rule 43 (line_stmt -> pass .)
    type_doubly_linked_list reduce using rule 43 (line_stmt -> pass .)
    type_deque      reduce using rule 43 (line_stmt -> pass .)
    type_heap       reduce using rule 43 (line_stmt -> pass .)
    type_fibonacci_heap reduce using rule 43 (line_stmt -> pass .)
    type_tree       reduce using rule 43 (line_stmt -> pass .)
    type_trie       reduce using rule 43 (line_stmt -> pass .)
    type_stack      reduce using rule 43 (line_stmt -> pass .)
    type_queue      reduce using rule 43 (line_stmt -> pass .)
    type_binary_search_tree reduce using rule 43 (line_stmt -> pass .)
    type_bitset     reduce using rule 43 (line_stmt -> pass .)
    type_set        reduce using rule 43 (line_stmt -> pass .)
    type_map        reduce using rule 43 (line_stmt -> pass .)
    type_range      reduce using rule 43 (line_stmt -> pass .)
    type_bad_struct reduce using rule 43 (line_stmt -> pass .)
    type_bad_struct2 reduce using rule 43 (line_stmt -> pass .)
    lambda          reduce using rule 43 (line_stmt -> pass .)
    $end            reduce using rule 43 (line_stmt -> pass .)
    }               reduce using rule 43 (line_stmt -> pass .)


state 9

    (44) line_stmt -> return_stmt .

    pass            reduce using rule 44 (line_stmt -> return_stmt .)
    else            reduce using rule 44 (line_stmt -> return_stmt .)
    operator_bitnot reduce using rule 44 (line_stmt -> return_stmt .)
    operator_not    reduce using rule 44 (line_stmt -> return_stmt .)
    operator_reverse reduce using rule 44 (line_stmt -> return_stmt .)
    operator_sorted_incr reduce using rule 44 (line_stmt -> return_stmt .)
    operator_sorted_decr reduce using rule 44 (line_stmt -> return_stmt .)
    operator_s_combinator reduce using rule 44 (line_stmt -> return_stmt .)
    operator_s2_combinator reduce using rule 44 (line_stmt -> return_stmt .)
    operator_goodname2 reduce using rule 44 (line_stmt -> return_stmt .)
    VAR             reduce using rule 44 (line_stmt -> return_stmt .)
    return          reduce using rule 44 (line_stmt -> return_stmt .)
    del             reduce using rule 44 (line_stmt -> return_stmt .)
    for             reduce using rule 44 (line_stmt -> return_stmt .)
    if              reduce using rule 44 (line_stmt -> return_stmt .)
    elif            reduce using rule 44 (line_stmt -> return_stmt .)
    operator        reduce using rule 44 (line_stmt -> return_stmt .)
    struct          reduce using rule 44 (line_stmt -> return_stmt .)
    while           reduce using rule 44 (line_stmt -> return_stmt .)
    func            reduce using rule 44 (line_stmt -> return_stmt .)
    FLOAT           reduce using rule 44 (line_stmt -> return_stmt .)
    NUM             reduce using rule 44 (line_stmt -> return_stmt .)
    NULL            reduce using rule 44 (line_stmt -> return_stmt .)
    STRING_3SQ      reduce using rule 44 (line_stmt -> return_stmt .)
    STRING_3DQ      reduce using rule 44 (line_stmt -> return_stmt .)
    STRING_SQ       reduce using rule 44 (line_stmt -> return_stmt .)
    STRING_DQ       reduce using rule 44 (line_stmt -> return_stmt .)
    true            reduce using rule 44 (line_stmt -> return_stmt .)
    false           reduce using rule 44 (line_stmt -> return_stmt .)
    type_type       reduce using rule 44 (line_stmt -> return_stmt .)
    type_num        reduce using rule 44 (line_stmt -> return_stmt .)
    type_any        reduce using rule 44 (line_stmt -> return_stmt .)
    type_u64        reduce using rule 44 (line_stmt -> return_stmt .)
    type_u32        reduce using rule 44 (line_stmt -> return_stmt .)
    type_u16        reduce using rule 44 (line_stmt -> return_stmt .)
    type_u8         reduce using rule 44 (line_stmt -> return_stmt .)
    type_i64        reduce using rule 44 (line_stmt -> return_stmt .)
    type_i32        reduce using rule 44 (line_stmt -> return_stmt .)
    type_i16        reduce using rule 44 (line_stmt -> return_stmt .)
    type_i8         reduce using rule 44 (line_stmt -> return_stmt .)
    type_f32        reduce using rule 44 (line_stmt -> return_stmt .)
    type_f64        reduce using rule 44 (line_stmt -> return_stmt .)
    type_str        reduce using rule 44 (line_stmt -> return_stmt .)
    type_list       reduce using rule 44 (line_stmt -> return_stmt .)
    type_tuple      reduce using rule 44 (line_stmt -> return_stmt .)
    type_array      reduce using rule 44 (line_stmt -> return_stmt .)
    type_vector     reduce using rule 44 (line_stmt -> return_stmt .)
    type_dict       reduce using rule 44 (line_stmt -> return_stmt .)
    type_generator  reduce using rule 44 (line_stmt -> return_stmt .)
    type_linked_list reduce using rule 44 (line_stmt -> return_stmt .)
    type_doubly_linked_list reduce using rule 44 (line_stmt -> return_stmt .)
    type_deque      reduce using rule 44 (line_stmt -> return_stmt .)
    type_heap       reduce using rule 44 (line_stmt -> return_stmt .)
    type_fibonacci_heap reduce using rule 44 (line_stmt -> return_stmt .)
    type_tree       reduce using rule 44 (line_stmt -> return_stmt .)
    type_trie       reduce using rule 44 (line_stmt -> return_stmt .)
    type_stack      reduce using rule 44 (line_stmt -> return_stmt .)
    type_queue      reduce using rule 44 (line_stmt -> return_stmt .)
    type_binary_search_tree reduce using rule 44 (line_stmt -> return_stmt .)
    type_bitset     reduce using rule 44 (line_stmt -> return_stmt .)
    type_set        reduce using rule 44 (line_stmt -> return_stmt .)
    type_map        reduce using rule 44 (line_stmt -> return_stmt .)
    type_range      reduce using rule 44 (line_stmt -> return_stmt .)
    type_bad_struct reduce using rule 44 (line_stmt -> return_stmt .)
    type_bad_struct2 reduce using rule 44 (line_stmt -> return_stmt .)
    lambda          reduce using rule 44 (line_stmt -> return_stmt .)
    $end            reduce using rule 44 (line_stmt -> return_stmt .)
    }               reduce using rule 44 (line_stmt -> return_stmt .)


state 10

    (45) line_stmt -> del_stmt .

    pass            reduce using rule 45 (line_stmt -> del_stmt .)
    else            reduce using rule 45 (line_stmt -> del_stmt .)
    operator_bitnot reduce using rule 45 (line_stmt -> del_stmt .)
    operator_not    reduce using rule 45 (line_stmt -> del_stmt .)
    operator_reverse reduce using rule 45 (line_stmt -> del_stmt .)
    operator_sorted_incr reduce using rule 45 (line_stmt -> del_stmt .)
    operator_sorted_decr reduce using rule 45 (line_stmt -> del_stmt .)
    operator_s_combinator reduce using rule 45 (line_stmt -> del_stmt .)
    operator_s2_combinator reduce using rule 45 (line_stmt -> del_stmt .)
    operator_goodname2 reduce using rule 45 (line_stmt -> del_stmt .)
    VAR             reduce using rule 45 (line_stmt -> del_stmt .)
    return          reduce using rule 45 (line_stmt -> del_stmt .)
    del             reduce using rule 45 (line_stmt -> del_stmt .)
    for             reduce using rule 45 (line_stmt -> del_stmt .)
    if              reduce using rule 45 (line_stmt -> del_stmt .)
    elif            reduce using rule 45 (line_stmt -> del_stmt .)
    operator        reduce using rule 45 (line_stmt -> del_stmt .)
    struct          reduce using rule 45 (line_stmt -> del_stmt .)
    while           reduce using rule 45 (line_stmt -> del_stmt .)
    func            reduce using rule 45 (line_stmt -> del_stmt .)
    FLOAT           reduce using rule 45 (line_stmt -> del_stmt .)
    NUM             reduce using rule 45 (line_stmt -> del_stmt .)
    NULL            reduce using rule 45 (line_stmt -> del_stmt .)
    STRING_3SQ      reduce using rule 45 (line_stmt -> del_stmt .)
    STRING_3DQ      reduce using rule 45 (line_stmt -> del_stmt .)
    STRING_SQ       reduce using rule 45 (line_stmt -> del_stmt .)
    STRING_DQ       reduce using rule 45 (line_stmt -> del_stmt .)
    true            reduce using rule 45 (line_stmt -> del_stmt .)
    false           reduce using rule 45 (line_stmt -> del_stmt .)
    type_type       reduce using rule 45 (line_stmt -> del_stmt .)
    type_num        reduce using rule 45 (line_stmt -> del_stmt .)
    type_any        reduce using rule 45 (line_stmt -> del_stmt .)
    type_u64        reduce using rule 45 (line_stmt -> del_stmt .)
    type_u32        reduce using rule 45 (line_stmt -> del_stmt .)
    type_u16        reduce using rule 45 (line_stmt -> del_stmt .)
    type_u8         reduce using rule 45 (line_stmt -> del_stmt .)
    type_i64        reduce using rule 45 (line_stmt -> del_stmt .)
    type_i32        reduce using rule 45 (line_stmt -> del_stmt .)
    type_i16        reduce using rule 45 (line_stmt -> del_stmt .)
    type_i8         reduce using rule 45 (line_stmt -> del_stmt .)
    type_f32        reduce using rule 45 (line_stmt -> del_stmt .)
    type_f64        reduce using rule 45 (line_stmt -> del_stmt .)
    type_str        reduce using rule 45 (line_stmt -> del_stmt .)
    type_list       reduce using rule 45 (line_stmt -> del_stmt .)
    type_tuple      reduce using rule 45 (line_stmt -> del_stmt .)
    type_array      reduce using rule 45 (line_stmt -> del_stmt .)
    type_vector     reduce using rule 45 (line_stmt -> del_stmt .)
    type_dict       reduce using rule 45 (line_stmt -> del_stmt .)
    type_generator  reduce using rule 45 (line_stmt -> del_stmt .)
    type_linked_list reduce using rule 45 (line_stmt -> del_stmt .)
    type_doubly_linked_list reduce using rule 45 (line_stmt -> del_stmt .)
    type_deque      reduce using rule 45 (line_stmt -> del_stmt .)
    type_heap       reduce using rule 45 (line_stmt -> del_stmt .)
    type_fibonacci_heap reduce using rule 45 (line_stmt -> del_stmt .)
    type_tree       reduce using rule 45 (line_stmt -> del_stmt .)
    type_trie       reduce using rule 45 (line_stmt -> del_stmt .)
    type_stack      reduce using rule 45 (line_stmt -> del_stmt .)
    type_queue      reduce using rule 45 (line_stmt -> del_stmt .)
    type_binary_search_tree reduce using rule 45 (line_stmt -> del_stmt .)
    type_bitset     reduce using rule 45 (line_stmt -> del_stmt .)
    type_set        reduce using rule 45 (line_stmt -> del_stmt .)
    type_map        reduce using rule 45 (line_stmt -> del_stmt .)
    type_range      reduce using rule 45 (line_stmt -> del_stmt .)
    type_bad_struct reduce using rule 45 (line_stmt -> del_stmt .)
    type_bad_struct2 reduce using rule 45 (line_stmt -> del_stmt .)
    lambda          reduce using rule 45 (line_stmt -> del_stmt .)
    $end            reduce using rule 45 (line_stmt -> del_stmt .)
    }               reduce using rule 45 (line_stmt -> del_stmt .)


state 11

    (46) line_stmt -> declaration_stmt .

    pass            reduce using rule 46 (line_stmt -> declaration_stmt .)
    else            reduce using rule 46 (line_stmt -> declaration_stmt .)
    operator_bitnot reduce using rule 46 (line_stmt -> declaration_stmt .)
    operator_not    reduce using rule 46 (line_stmt -> declaration_stmt .)
    operator_reverse reduce using rule 46 (line_stmt -> declaration_stmt .)
    operator_sorted_incr reduce using rule 46 (line_stmt -> declaration_stmt .)
    operator_sorted_decr reduce using rule 46 (line_stmt -> declaration_stmt .)
    operator_s_combinator reduce using rule 46 (line_stmt -> declaration_stmt .)
    operator_s2_combinator reduce using rule 46 (line_stmt -> declaration_stmt .)
    operator_goodname2 reduce using rule 46 (line_stmt -> declaration_stmt .)
    VAR             reduce using rule 46 (line_stmt -> declaration_stmt .)
    return          reduce using rule 46 (line_stmt -> declaration_stmt .)
    del             reduce using rule 46 (line_stmt -> declaration_stmt .)
    for             reduce using rule 46 (line_stmt -> declaration_stmt .)
    if              reduce using rule 46 (line_stmt -> declaration_stmt .)
    elif            reduce using rule 46 (line_stmt -> declaration_stmt .)
    operator        reduce using rule 46 (line_stmt -> declaration_stmt .)
    struct          reduce using rule 46 (line_stmt -> declaration_stmt .)
    while           reduce using rule 46 (line_stmt -> declaration_stmt .)
    func            reduce using rule 46 (line_stmt -> declaration_stmt .)
    FLOAT           reduce using rule 46 (line_stmt -> declaration_stmt .)
    NUM             reduce using rule 46 (line_stmt -> declaration_stmt .)
    NULL            reduce using rule 46 (line_stmt -> declaration_stmt .)
    STRING_3SQ      reduce using rule 46 (line_stmt -> declaration_stmt .)
    STRING_3DQ      reduce using rule 46 (line_stmt -> declaration_stmt .)
    STRING_SQ       reduce using rule 46 (line_stmt -> declaration_stmt .)
    STRING_DQ       reduce using rule 46 (line_stmt -> declaration_stmt .)
    true            reduce using rule 46 (line_stmt -> declaration_stmt .)
    false           reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_type       reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_num        reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_any        reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_u64        reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_u32        reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_u16        reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_u8         reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_i64        reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_i32        reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_i16        reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_i8         reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_f32        reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_f64        reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_str        reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_list       reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_tuple      reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_array      reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_vector     reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_dict       reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_generator  reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_linked_list reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_doubly_linked_list reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_deque      reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_heap       reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_fibonacci_heap reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_tree       reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_trie       reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_stack      reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_queue      reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_binary_search_tree reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_bitset     reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_set        reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_map        reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_range      reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_bad_struct reduce using rule 46 (line_stmt -> declaration_stmt .)
    type_bad_struct2 reduce using rule 46 (line_stmt -> declaration_stmt .)
    lambda          reduce using rule 46 (line_stmt -> declaration_stmt .)
    $end            reduce using rule 46 (line_stmt -> declaration_stmt .)
    }               reduce using rule 46 (line_stmt -> declaration_stmt .)


state 12

    (55) block_decl -> for_decl .

    {               reduce using rule 55 (block_decl -> for_decl .)


state 13

    (56) block_decl -> if_decl .

    {               reduce using rule 56 (block_decl -> if_decl .)


state 14

    (57) block_decl -> else .

    {               reduce using rule 57 (block_decl -> else .)


state 15

    (58) block_decl -> elif_decl .

    {               reduce using rule 58 (block_decl -> elif_decl .)


state 16

    (59) block_decl -> operator_decl .

    {               reduce using rule 59 (block_decl -> operator_decl .)


state 17

    (60) block_decl -> struct_decl .

    {               reduce using rule 60 (block_decl -> struct_decl .)


state 18

    (61) block_decl -> while_decl .

    {               reduce using rule 61 (block_decl -> while_decl .)


state 19

    (62) block_decl -> func_decl .

    {               reduce using rule 62 (block_decl -> func_decl .)


state 20

    (50) assign_stmt -> comma_separated_names . = expr

    =               shift and go to state 165


state 21

    (137) expr -> operator_bitnot . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 166
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 22

    (138) expr -> operator_not . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 167
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 23

    (143) expr -> operator_reverse . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 168
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 24

    (149) expr -> operator_sorted_incr . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 169
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 25

    (150) expr -> operator_sorted_decr . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 170
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 26

    (160) expr -> operator_s_combinator . expr expr expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 171
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 27

    (161) expr -> operator_s2_combinator . expr expr expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 172
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 28

    (162) expr -> operator_goodname2 . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 173
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 29

    (163) expr -> const_val .

    operator_add    reduce using rule 163 (expr -> const_val .)
    operator_sub    reduce using rule 163 (expr -> const_val .)
    operator_mul    reduce using rule 163 (expr -> const_val .)
    operator_div    reduce using rule 163 (expr -> const_val .)
    operator_trudiv reduce using rule 163 (expr -> const_val .)
    operator_pow    reduce using rule 163 (expr -> const_val .)
    operator_join   reduce using rule 163 (expr -> const_val .)
    operator_split  reduce using rule 163 (expr -> const_val .)
    operator_scan   reduce using rule 163 (expr -> const_val .)
    operator_reduc  reduce using rule 163 (expr -> const_val .)
    operator_bitand reduce using rule 163 (expr -> const_val .)
    operator_bitor  reduce using rule 163 (expr -> const_val .)
    operator_bitxor reduce using rule 163 (expr -> const_val .)
    operator_bitshiftleft reduce using rule 163 (expr -> const_val .)
    operator_bitshiftright reduce using rule 163 (expr -> const_val .)
    operator_and    reduce using rule 163 (expr -> const_val .)
    operator_or     reduce using rule 163 (expr -> const_val .)
    operator_xor    reduce using rule 163 (expr -> const_val .)
    operator_contains reduce using rule 163 (expr -> const_val .)
    operator_incr   reduce using rule 163 (expr -> const_val .)
    operator_decr   reduce using rule 163 (expr -> const_val .)
    operator_outer  reduce using rule 163 (expr -> const_val .)
    operator_rotate reduce using rule 163 (expr -> const_val .)
    operator_apply  reduce using rule 163 (expr -> const_val .)
    operator_compose reduce using rule 163 (expr -> const_val .)
    operator_over   reduce using rule 163 (expr -> const_val .)
    operator_map    reduce using rule 163 (expr -> const_val .)
    operator_less_than reduce using rule 163 (expr -> const_val .)
    operator_less_than_equals reduce using rule 163 (expr -> const_val .)
    operator_greater_than reduce using rule 163 (expr -> const_val .)
    operator_greater_than_equals reduce using rule 163 (expr -> const_val .)
    operator_equals reduce using rule 163 (expr -> const_val .)
    operator_not_equals reduce using rule 163 (expr -> const_val .)
    operator_smallest reduce using rule 163 (expr -> const_val .)
    operator_greatest reduce using rule 163 (expr -> const_val .)
    operator_goodname reduce using rule 163 (expr -> const_val .)
    operator_bitnot reduce using rule 163 (expr -> const_val .)
    operator_not    reduce using rule 163 (expr -> const_val .)
    operator_reverse reduce using rule 163 (expr -> const_val .)
    operator_sorted_incr reduce using rule 163 (expr -> const_val .)
    operator_sorted_decr reduce using rule 163 (expr -> const_val .)
    operator_s_combinator reduce using rule 163 (expr -> const_val .)
    operator_s2_combinator reduce using rule 163 (expr -> const_val .)
    operator_goodname2 reduce using rule 163 (expr -> const_val .)
    VAR             reduce using rule 163 (expr -> const_val .)
    FLOAT           reduce using rule 163 (expr -> const_val .)
    NUM             reduce using rule 163 (expr -> const_val .)
    NULL            reduce using rule 163 (expr -> const_val .)
    STRING_3SQ      reduce using rule 163 (expr -> const_val .)
    STRING_3DQ      reduce using rule 163 (expr -> const_val .)
    STRING_SQ       reduce using rule 163 (expr -> const_val .)
    STRING_DQ       reduce using rule 163 (expr -> const_val .)
    true            reduce using rule 163 (expr -> const_val .)
    false           reduce using rule 163 (expr -> const_val .)
    type_type       reduce using rule 163 (expr -> const_val .)
    type_num        reduce using rule 163 (expr -> const_val .)
    type_any        reduce using rule 163 (expr -> const_val .)
    type_u64        reduce using rule 163 (expr -> const_val .)
    type_u32        reduce using rule 163 (expr -> const_val .)
    type_u16        reduce using rule 163 (expr -> const_val .)
    type_u8         reduce using rule 163 (expr -> const_val .)
    type_i64        reduce using rule 163 (expr -> const_val .)
    type_i32        reduce using rule 163 (expr -> const_val .)
    type_i16        reduce using rule 163 (expr -> const_val .)
    type_i8         reduce using rule 163 (expr -> const_val .)
    type_f32        reduce using rule 163 (expr -> const_val .)
    type_f64        reduce using rule 163 (expr -> const_val .)
    type_str        reduce using rule 163 (expr -> const_val .)
    type_list       reduce using rule 163 (expr -> const_val .)
    type_tuple      reduce using rule 163 (expr -> const_val .)
    type_array      reduce using rule 163 (expr -> const_val .)
    type_vector     reduce using rule 163 (expr -> const_val .)
    type_dict       reduce using rule 163 (expr -> const_val .)
    type_generator  reduce using rule 163 (expr -> const_val .)
    type_linked_list reduce using rule 163 (expr -> const_val .)
    type_doubly_linked_list reduce using rule 163 (expr -> const_val .)
    type_deque      reduce using rule 163 (expr -> const_val .)
    type_heap       reduce using rule 163 (expr -> const_val .)
    type_fibonacci_heap reduce using rule 163 (expr -> const_val .)
    type_tree       reduce using rule 163 (expr -> const_val .)
    type_trie       reduce using rule 163 (expr -> const_val .)
    type_stack      reduce using rule 163 (expr -> const_val .)
    type_queue      reduce using rule 163 (expr -> const_val .)
    type_binary_search_tree reduce using rule 163 (expr -> const_val .)
    type_bitset     reduce using rule 163 (expr -> const_val .)
    type_set        reduce using rule 163 (expr -> const_val .)
    type_map        reduce using rule 163 (expr -> const_val .)
    type_range      reduce using rule 163 (expr -> const_val .)
    type_bad_struct reduce using rule 163 (expr -> const_val .)
    type_bad_struct2 reduce using rule 163 (expr -> const_val .)
    lambda          reduce using rule 163 (expr -> const_val .)
    pass            reduce using rule 163 (expr -> const_val .)
    else            reduce using rule 163 (expr -> const_val .)
    return          reduce using rule 163 (expr -> const_val .)
    del             reduce using rule 163 (expr -> const_val .)
    for             reduce using rule 163 (expr -> const_val .)
    if              reduce using rule 163 (expr -> const_val .)
    elif            reduce using rule 163 (expr -> const_val .)
    operator        reduce using rule 163 (expr -> const_val .)
    struct          reduce using rule 163 (expr -> const_val .)
    while           reduce using rule 163 (expr -> const_val .)
    func            reduce using rule 163 (expr -> const_val .)
    $end            reduce using rule 163 (expr -> const_val .)
    }               reduce using rule 163 (expr -> const_val .)
    operator_inner  reduce using rule 163 (expr -> const_val .)
    {               reduce using rule 163 (expr -> const_val .)
    )               reduce using rule 163 (expr -> const_val .)
    ,               reduce using rule 163 (expr -> const_val .)


state 30

    (164) expr -> VAR .
    (52) comma_separated_names -> VAR .
    (53) comma_separated_names -> VAR . , comma_separated_names
    (117) return_val -> VAR . ( arguments )

    operator_add    reduce using rule 164 (expr -> VAR .)
    operator_sub    reduce using rule 164 (expr -> VAR .)
    operator_mul    reduce using rule 164 (expr -> VAR .)
    operator_div    reduce using rule 164 (expr -> VAR .)
    operator_trudiv reduce using rule 164 (expr -> VAR .)
    operator_pow    reduce using rule 164 (expr -> VAR .)
    operator_join   reduce using rule 164 (expr -> VAR .)
    operator_split  reduce using rule 164 (expr -> VAR .)
    operator_scan   reduce using rule 164 (expr -> VAR .)
    operator_reduc  reduce using rule 164 (expr -> VAR .)
    operator_bitand reduce using rule 164 (expr -> VAR .)
    operator_bitor  reduce using rule 164 (expr -> VAR .)
    operator_bitxor reduce using rule 164 (expr -> VAR .)
    operator_bitshiftleft reduce using rule 164 (expr -> VAR .)
    operator_bitshiftright reduce using rule 164 (expr -> VAR .)
    operator_and    reduce using rule 164 (expr -> VAR .)
    operator_or     reduce using rule 164 (expr -> VAR .)
    operator_xor    reduce using rule 164 (expr -> VAR .)
    operator_contains reduce using rule 164 (expr -> VAR .)
    operator_incr   reduce using rule 164 (expr -> VAR .)
    operator_decr   reduce using rule 164 (expr -> VAR .)
    operator_outer  reduce using rule 164 (expr -> VAR .)
    operator_rotate reduce using rule 164 (expr -> VAR .)
    operator_apply  reduce using rule 164 (expr -> VAR .)
    operator_compose reduce using rule 164 (expr -> VAR .)
    operator_over   reduce using rule 164 (expr -> VAR .)
    operator_map    reduce using rule 164 (expr -> VAR .)
    operator_less_than reduce using rule 164 (expr -> VAR .)
    operator_less_than_equals reduce using rule 164 (expr -> VAR .)
    operator_greater_than reduce using rule 164 (expr -> VAR .)
    operator_greater_than_equals reduce using rule 164 (expr -> VAR .)
    operator_equals reduce using rule 164 (expr -> VAR .)
    operator_not_equals reduce using rule 164 (expr -> VAR .)
    operator_smallest reduce using rule 164 (expr -> VAR .)
    operator_greatest reduce using rule 164 (expr -> VAR .)
    operator_goodname reduce using rule 164 (expr -> VAR .)
    operator_bitnot reduce using rule 164 (expr -> VAR .)
    operator_not    reduce using rule 164 (expr -> VAR .)
    operator_reverse reduce using rule 164 (expr -> VAR .)
    operator_sorted_incr reduce using rule 164 (expr -> VAR .)
    operator_sorted_decr reduce using rule 164 (expr -> VAR .)
    operator_s_combinator reduce using rule 164 (expr -> VAR .)
    operator_s2_combinator reduce using rule 164 (expr -> VAR .)
    operator_goodname2 reduce using rule 164 (expr -> VAR .)
    VAR             reduce using rule 164 (expr -> VAR .)
    FLOAT           reduce using rule 164 (expr -> VAR .)
    NUM             reduce using rule 164 (expr -> VAR .)
    NULL            reduce using rule 164 (expr -> VAR .)
    STRING_3SQ      reduce using rule 164 (expr -> VAR .)
    STRING_3DQ      reduce using rule 164 (expr -> VAR .)
    STRING_SQ       reduce using rule 164 (expr -> VAR .)
    STRING_DQ       reduce using rule 164 (expr -> VAR .)
    true            reduce using rule 164 (expr -> VAR .)
    false           reduce using rule 164 (expr -> VAR .)
    type_type       reduce using rule 164 (expr -> VAR .)
    type_num        reduce using rule 164 (expr -> VAR .)
    type_any        reduce using rule 164 (expr -> VAR .)
    type_u64        reduce using rule 164 (expr -> VAR .)
    type_u32        reduce using rule 164 (expr -> VAR .)
    type_u16        reduce using rule 164 (expr -> VAR .)
    type_u8         reduce using rule 164 (expr -> VAR .)
    type_i64        reduce using rule 164 (expr -> VAR .)
    type_i32        reduce using rule 164 (expr -> VAR .)
    type_i16        reduce using rule 164 (expr -> VAR .)
    type_i8         reduce using rule 164 (expr -> VAR .)
    type_f32        reduce using rule 164 (expr -> VAR .)
    type_f64        reduce using rule 164 (expr -> VAR .)
    type_str        reduce using rule 164 (expr -> VAR .)
    type_list       reduce using rule 164 (expr -> VAR .)
    type_tuple      reduce using rule 164 (expr -> VAR .)
    type_array      reduce using rule 164 (expr -> VAR .)
    type_vector     reduce using rule 164 (expr -> VAR .)
    type_dict       reduce using rule 164 (expr -> VAR .)
    type_generator  reduce using rule 164 (expr -> VAR .)
    type_linked_list reduce using rule 164 (expr -> VAR .)
    type_doubly_linked_list reduce using rule 164 (expr -> VAR .)
    type_deque      reduce using rule 164 (expr -> VAR .)
    type_heap       reduce using rule 164 (expr -> VAR .)
    type_fibonacci_heap reduce using rule 164 (expr -> VAR .)
    type_tree       reduce using rule 164 (expr -> VAR .)
    type_trie       reduce using rule 164 (expr -> VAR .)
    type_stack      reduce using rule 164 (expr -> VAR .)
    type_queue      reduce using rule 164 (expr -> VAR .)
    type_binary_search_tree reduce using rule 164 (expr -> VAR .)
    type_bitset     reduce using rule 164 (expr -> VAR .)
    type_set        reduce using rule 164 (expr -> VAR .)
    type_map        reduce using rule 164 (expr -> VAR .)
    type_range      reduce using rule 164 (expr -> VAR .)
    type_bad_struct reduce using rule 164 (expr -> VAR .)
    type_bad_struct2 reduce using rule 164 (expr -> VAR .)
    lambda          reduce using rule 164 (expr -> VAR .)
    pass            reduce using rule 164 (expr -> VAR .)
    else            reduce using rule 164 (expr -> VAR .)
    return          reduce using rule 164 (expr -> VAR .)
    del             reduce using rule 164 (expr -> VAR .)
    for             reduce using rule 164 (expr -> VAR .)
    if              reduce using rule 164 (expr -> VAR .)
    elif            reduce using rule 164 (expr -> VAR .)
    operator        reduce using rule 164 (expr -> VAR .)
    struct          reduce using rule 164 (expr -> VAR .)
    while           reduce using rule 164 (expr -> VAR .)
    func            reduce using rule 164 (expr -> VAR .)
    $end            reduce using rule 164 (expr -> VAR .)
    }               reduce using rule 164 (expr -> VAR .)
    =               reduce using rule 52 (comma_separated_names -> VAR .)
    ,               shift and go to state 174
    (               shift and go to state 175


state 31

    (165) expr -> return_val .

    operator_add    reduce using rule 165 (expr -> return_val .)
    operator_sub    reduce using rule 165 (expr -> return_val .)
    operator_mul    reduce using rule 165 (expr -> return_val .)
    operator_div    reduce using rule 165 (expr -> return_val .)
    operator_trudiv reduce using rule 165 (expr -> return_val .)
    operator_pow    reduce using rule 165 (expr -> return_val .)
    operator_join   reduce using rule 165 (expr -> return_val .)
    operator_split  reduce using rule 165 (expr -> return_val .)
    operator_scan   reduce using rule 165 (expr -> return_val .)
    operator_reduc  reduce using rule 165 (expr -> return_val .)
    operator_bitand reduce using rule 165 (expr -> return_val .)
    operator_bitor  reduce using rule 165 (expr -> return_val .)
    operator_bitxor reduce using rule 165 (expr -> return_val .)
    operator_bitshiftleft reduce using rule 165 (expr -> return_val .)
    operator_bitshiftright reduce using rule 165 (expr -> return_val .)
    operator_and    reduce using rule 165 (expr -> return_val .)
    operator_or     reduce using rule 165 (expr -> return_val .)
    operator_xor    reduce using rule 165 (expr -> return_val .)
    operator_contains reduce using rule 165 (expr -> return_val .)
    operator_incr   reduce using rule 165 (expr -> return_val .)
    operator_decr   reduce using rule 165 (expr -> return_val .)
    operator_outer  reduce using rule 165 (expr -> return_val .)
    operator_rotate reduce using rule 165 (expr -> return_val .)
    operator_apply  reduce using rule 165 (expr -> return_val .)
    operator_compose reduce using rule 165 (expr -> return_val .)
    operator_over   reduce using rule 165 (expr -> return_val .)
    operator_map    reduce using rule 165 (expr -> return_val .)
    operator_less_than reduce using rule 165 (expr -> return_val .)
    operator_less_than_equals reduce using rule 165 (expr -> return_val .)
    operator_greater_than reduce using rule 165 (expr -> return_val .)
    operator_greater_than_equals reduce using rule 165 (expr -> return_val .)
    operator_equals reduce using rule 165 (expr -> return_val .)
    operator_not_equals reduce using rule 165 (expr -> return_val .)
    operator_smallest reduce using rule 165 (expr -> return_val .)
    operator_greatest reduce using rule 165 (expr -> return_val .)
    operator_goodname reduce using rule 165 (expr -> return_val .)
    operator_bitnot reduce using rule 165 (expr -> return_val .)
    operator_not    reduce using rule 165 (expr -> return_val .)
    operator_reverse reduce using rule 165 (expr -> return_val .)
    operator_sorted_incr reduce using rule 165 (expr -> return_val .)
    operator_sorted_decr reduce using rule 165 (expr -> return_val .)
    operator_s_combinator reduce using rule 165 (expr -> return_val .)
    operator_s2_combinator reduce using rule 165 (expr -> return_val .)
    operator_goodname2 reduce using rule 165 (expr -> return_val .)
    VAR             reduce using rule 165 (expr -> return_val .)
    FLOAT           reduce using rule 165 (expr -> return_val .)
    NUM             reduce using rule 165 (expr -> return_val .)
    NULL            reduce using rule 165 (expr -> return_val .)
    STRING_3SQ      reduce using rule 165 (expr -> return_val .)
    STRING_3DQ      reduce using rule 165 (expr -> return_val .)
    STRING_SQ       reduce using rule 165 (expr -> return_val .)
    STRING_DQ       reduce using rule 165 (expr -> return_val .)
    true            reduce using rule 165 (expr -> return_val .)
    false           reduce using rule 165 (expr -> return_val .)
    type_type       reduce using rule 165 (expr -> return_val .)
    type_num        reduce using rule 165 (expr -> return_val .)
    type_any        reduce using rule 165 (expr -> return_val .)
    type_u64        reduce using rule 165 (expr -> return_val .)
    type_u32        reduce using rule 165 (expr -> return_val .)
    type_u16        reduce using rule 165 (expr -> return_val .)
    type_u8         reduce using rule 165 (expr -> return_val .)
    type_i64        reduce using rule 165 (expr -> return_val .)
    type_i32        reduce using rule 165 (expr -> return_val .)
    type_i16        reduce using rule 165 (expr -> return_val .)
    type_i8         reduce using rule 165 (expr -> return_val .)
    type_f32        reduce using rule 165 (expr -> return_val .)
    type_f64        reduce using rule 165 (expr -> return_val .)
    type_str        reduce using rule 165 (expr -> return_val .)
    type_list       reduce using rule 165 (expr -> return_val .)
    type_tuple      reduce using rule 165 (expr -> return_val .)
    type_array      reduce using rule 165 (expr -> return_val .)
    type_vector     reduce using rule 165 (expr -> return_val .)
    type_dict       reduce using rule 165 (expr -> return_val .)
    type_generator  reduce using rule 165 (expr -> return_val .)
    type_linked_list reduce using rule 165 (expr -> return_val .)
    type_doubly_linked_list reduce using rule 165 (expr -> return_val .)
    type_deque      reduce using rule 165 (expr -> return_val .)
    type_heap       reduce using rule 165 (expr -> return_val .)
    type_fibonacci_heap reduce using rule 165 (expr -> return_val .)
    type_tree       reduce using rule 165 (expr -> return_val .)
    type_trie       reduce using rule 165 (expr -> return_val .)
    type_stack      reduce using rule 165 (expr -> return_val .)
    type_queue      reduce using rule 165 (expr -> return_val .)
    type_binary_search_tree reduce using rule 165 (expr -> return_val .)
    type_bitset     reduce using rule 165 (expr -> return_val .)
    type_set        reduce using rule 165 (expr -> return_val .)
    type_map        reduce using rule 165 (expr -> return_val .)
    type_range      reduce using rule 165 (expr -> return_val .)
    type_bad_struct reduce using rule 165 (expr -> return_val .)
    type_bad_struct2 reduce using rule 165 (expr -> return_val .)
    lambda          reduce using rule 165 (expr -> return_val .)
    pass            reduce using rule 165 (expr -> return_val .)
    else            reduce using rule 165 (expr -> return_val .)
    return          reduce using rule 165 (expr -> return_val .)
    del             reduce using rule 165 (expr -> return_val .)
    for             reduce using rule 165 (expr -> return_val .)
    if              reduce using rule 165 (expr -> return_val .)
    elif            reduce using rule 165 (expr -> return_val .)
    operator        reduce using rule 165 (expr -> return_val .)
    struct          reduce using rule 165 (expr -> return_val .)
    while           reduce using rule 165 (expr -> return_val .)
    func            reduce using rule 165 (expr -> return_val .)
    $end            reduce using rule 165 (expr -> return_val .)
    }               reduce using rule 165 (expr -> return_val .)
    operator_inner  reduce using rule 165 (expr -> return_val .)
    {               reduce using rule 165 (expr -> return_val .)
    )               reduce using rule 165 (expr -> return_val .)
    ,               reduce using rule 165 (expr -> return_val .)


state 32

    (166) expr -> lambda_decl .

    operator_add    reduce using rule 166 (expr -> lambda_decl .)
    operator_sub    reduce using rule 166 (expr -> lambda_decl .)
    operator_mul    reduce using rule 166 (expr -> lambda_decl .)
    operator_div    reduce using rule 166 (expr -> lambda_decl .)
    operator_trudiv reduce using rule 166 (expr -> lambda_decl .)
    operator_pow    reduce using rule 166 (expr -> lambda_decl .)
    operator_join   reduce using rule 166 (expr -> lambda_decl .)
    operator_split  reduce using rule 166 (expr -> lambda_decl .)
    operator_scan   reduce using rule 166 (expr -> lambda_decl .)
    operator_reduc  reduce using rule 166 (expr -> lambda_decl .)
    operator_bitand reduce using rule 166 (expr -> lambda_decl .)
    operator_bitor  reduce using rule 166 (expr -> lambda_decl .)
    operator_bitxor reduce using rule 166 (expr -> lambda_decl .)
    operator_bitshiftleft reduce using rule 166 (expr -> lambda_decl .)
    operator_bitshiftright reduce using rule 166 (expr -> lambda_decl .)
    operator_and    reduce using rule 166 (expr -> lambda_decl .)
    operator_or     reduce using rule 166 (expr -> lambda_decl .)
    operator_xor    reduce using rule 166 (expr -> lambda_decl .)
    operator_contains reduce using rule 166 (expr -> lambda_decl .)
    operator_incr   reduce using rule 166 (expr -> lambda_decl .)
    operator_decr   reduce using rule 166 (expr -> lambda_decl .)
    operator_outer  reduce using rule 166 (expr -> lambda_decl .)
    operator_rotate reduce using rule 166 (expr -> lambda_decl .)
    operator_apply  reduce using rule 166 (expr -> lambda_decl .)
    operator_compose reduce using rule 166 (expr -> lambda_decl .)
    operator_over   reduce using rule 166 (expr -> lambda_decl .)
    operator_map    reduce using rule 166 (expr -> lambda_decl .)
    operator_less_than reduce using rule 166 (expr -> lambda_decl .)
    operator_less_than_equals reduce using rule 166 (expr -> lambda_decl .)
    operator_greater_than reduce using rule 166 (expr -> lambda_decl .)
    operator_greater_than_equals reduce using rule 166 (expr -> lambda_decl .)
    operator_equals reduce using rule 166 (expr -> lambda_decl .)
    operator_not_equals reduce using rule 166 (expr -> lambda_decl .)
    operator_smallest reduce using rule 166 (expr -> lambda_decl .)
    operator_greatest reduce using rule 166 (expr -> lambda_decl .)
    operator_goodname reduce using rule 166 (expr -> lambda_decl .)
    operator_bitnot reduce using rule 166 (expr -> lambda_decl .)
    operator_not    reduce using rule 166 (expr -> lambda_decl .)
    operator_reverse reduce using rule 166 (expr -> lambda_decl .)
    operator_sorted_incr reduce using rule 166 (expr -> lambda_decl .)
    operator_sorted_decr reduce using rule 166 (expr -> lambda_decl .)
    operator_s_combinator reduce using rule 166 (expr -> lambda_decl .)
    operator_s2_combinator reduce using rule 166 (expr -> lambda_decl .)
    operator_goodname2 reduce using rule 166 (expr -> lambda_decl .)
    VAR             reduce using rule 166 (expr -> lambda_decl .)
    FLOAT           reduce using rule 166 (expr -> lambda_decl .)
    NUM             reduce using rule 166 (expr -> lambda_decl .)
    NULL            reduce using rule 166 (expr -> lambda_decl .)
    STRING_3SQ      reduce using rule 166 (expr -> lambda_decl .)
    STRING_3DQ      reduce using rule 166 (expr -> lambda_decl .)
    STRING_SQ       reduce using rule 166 (expr -> lambda_decl .)
    STRING_DQ       reduce using rule 166 (expr -> lambda_decl .)
    true            reduce using rule 166 (expr -> lambda_decl .)
    false           reduce using rule 166 (expr -> lambda_decl .)
    type_type       reduce using rule 166 (expr -> lambda_decl .)
    type_num        reduce using rule 166 (expr -> lambda_decl .)
    type_any        reduce using rule 166 (expr -> lambda_decl .)
    type_u64        reduce using rule 166 (expr -> lambda_decl .)
    type_u32        reduce using rule 166 (expr -> lambda_decl .)
    type_u16        reduce using rule 166 (expr -> lambda_decl .)
    type_u8         reduce using rule 166 (expr -> lambda_decl .)
    type_i64        reduce using rule 166 (expr -> lambda_decl .)
    type_i32        reduce using rule 166 (expr -> lambda_decl .)
    type_i16        reduce using rule 166 (expr -> lambda_decl .)
    type_i8         reduce using rule 166 (expr -> lambda_decl .)
    type_f32        reduce using rule 166 (expr -> lambda_decl .)
    type_f64        reduce using rule 166 (expr -> lambda_decl .)
    type_str        reduce using rule 166 (expr -> lambda_decl .)
    type_list       reduce using rule 166 (expr -> lambda_decl .)
    type_tuple      reduce using rule 166 (expr -> lambda_decl .)
    type_array      reduce using rule 166 (expr -> lambda_decl .)
    type_vector     reduce using rule 166 (expr -> lambda_decl .)
    type_dict       reduce using rule 166 (expr -> lambda_decl .)
    type_generator  reduce using rule 166 (expr -> lambda_decl .)
    type_linked_list reduce using rule 166 (expr -> lambda_decl .)
    type_doubly_linked_list reduce using rule 166 (expr -> lambda_decl .)
    type_deque      reduce using rule 166 (expr -> lambda_decl .)
    type_heap       reduce using rule 166 (expr -> lambda_decl .)
    type_fibonacci_heap reduce using rule 166 (expr -> lambda_decl .)
    type_tree       reduce using rule 166 (expr -> lambda_decl .)
    type_trie       reduce using rule 166 (expr -> lambda_decl .)
    type_stack      reduce using rule 166 (expr -> lambda_decl .)
    type_queue      reduce using rule 166 (expr -> lambda_decl .)
    type_binary_search_tree reduce using rule 166 (expr -> lambda_decl .)
    type_bitset     reduce using rule 166 (expr -> lambda_decl .)
    type_set        reduce using rule 166 (expr -> lambda_decl .)
    type_map        reduce using rule 166 (expr -> lambda_decl .)
    type_range      reduce using rule 166 (expr -> lambda_decl .)
    type_bad_struct reduce using rule 166 (expr -> lambda_decl .)
    type_bad_struct2 reduce using rule 166 (expr -> lambda_decl .)
    lambda          reduce using rule 166 (expr -> lambda_decl .)
    pass            reduce using rule 166 (expr -> lambda_decl .)
    else            reduce using rule 166 (expr -> lambda_decl .)
    return          reduce using rule 166 (expr -> lambda_decl .)
    del             reduce using rule 166 (expr -> lambda_decl .)
    for             reduce using rule 166 (expr -> lambda_decl .)
    if              reduce using rule 166 (expr -> lambda_decl .)
    elif            reduce using rule 166 (expr -> lambda_decl .)
    operator        reduce using rule 166 (expr -> lambda_decl .)
    struct          reduce using rule 166 (expr -> lambda_decl .)
    while           reduce using rule 166 (expr -> lambda_decl .)
    func            reduce using rule 166 (expr -> lambda_decl .)
    $end            reduce using rule 166 (expr -> lambda_decl .)
    }               reduce using rule 166 (expr -> lambda_decl .)
    operator_inner  reduce using rule 166 (expr -> lambda_decl .)
    {               reduce using rule 166 (expr -> lambda_decl .)
    )               reduce using rule 166 (expr -> lambda_decl .)
    ,               reduce using rule 166 (expr -> lambda_decl .)


state 33

    (48) return_stmt -> return . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 176
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 34

    (49) del_stmt -> del . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 177
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 35

    (51) declaration_stmt -> TYPE . comma_separated_names
    (52) comma_separated_names -> . VAR
    (53) comma_separated_names -> . VAR , comma_separated_names

    VAR             shift and go to state 179

    comma_separated_names          shift and go to state 178

state 36

    (63) for_decl -> for . comma_separated_names operator_contains expr
    (52) comma_separated_names -> . VAR
    (53) comma_separated_names -> . VAR , comma_separated_names

    VAR             shift and go to state 179

    comma_separated_names          shift and go to state 180

state 37

    (64) if_decl -> if . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 181
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 38

    (65) elif_decl -> elif . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 182
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 39

    (66) operator_decl -> operator . ( arguments )

    (               shift and go to state 183


state 40

    (67) struct_decl -> struct . TYPE
    (5) TYPE -> . type_type
    (6) TYPE -> . type_num
    (7) TYPE -> . type_any
    (8) TYPE -> . type_u64
    (9) TYPE -> . type_u32
    (10) TYPE -> . type_u16
    (11) TYPE -> . type_u8
    (12) TYPE -> . type_i64
    (13) TYPE -> . type_i32
    (14) TYPE -> . type_i16
    (15) TYPE -> . type_i8
    (16) TYPE -> . type_f32
    (17) TYPE -> . type_f64
    (18) TYPE -> . type_str
    (19) TYPE -> . type_list
    (20) TYPE -> . type_tuple
    (21) TYPE -> . type_array
    (22) TYPE -> . type_vector
    (23) TYPE -> . type_dict
    (24) TYPE -> . type_generator
    (25) TYPE -> . type_linked_list
    (26) TYPE -> . type_doubly_linked_list
    (27) TYPE -> . type_deque
    (28) TYPE -> . type_heap
    (29) TYPE -> . type_fibonacci_heap
    (30) TYPE -> . type_tree
    (31) TYPE -> . type_trie
    (32) TYPE -> . type_stack
    (33) TYPE -> . type_queue
    (34) TYPE -> . type_binary_search_tree
    (35) TYPE -> . type_bitset
    (36) TYPE -> . type_set
    (37) TYPE -> . type_map
    (38) TYPE -> . type_range
    (39) TYPE -> . type_bad_struct
    (40) TYPE -> . type_bad_struct2

    type_type       shift and go to state 185
    type_num        shift and go to state 186
    type_any        shift and go to state 187
    type_u64        shift and go to state 188
    type_u32        shift and go to state 189
    type_u16        shift and go to state 190
    type_u8         shift and go to state 191
    type_i64        shift and go to state 192
    type_i32        shift and go to state 193
    type_i16        shift and go to state 194
    type_i8         shift and go to state 195
    type_f32        shift and go to state 196
    type_f64        shift and go to state 197
    type_str        shift and go to state 198
    type_list       shift and go to state 199
    type_tuple      shift and go to state 200
    type_array      shift and go to state 201
    type_vector     shift and go to state 202
    type_dict       shift and go to state 203
    type_generator  shift and go to state 204
    type_linked_list shift and go to state 205
    type_doubly_linked_list shift and go to state 206
    type_deque      shift and go to state 207
    type_heap       shift and go to state 208
    type_fibonacci_heap shift and go to state 209
    type_tree       shift and go to state 210
    type_trie       shift and go to state 211
    type_stack      shift and go to state 212
    type_queue      shift and go to state 213
    type_binary_search_tree shift and go to state 214
    type_bitset     shift and go to state 215
    type_set        shift and go to state 216
    type_map        shift and go to state 217
    type_range      shift and go to state 218
    type_bad_struct shift and go to state 219
    type_bad_struct2 shift and go to state 220

    TYPE                           shift and go to state 184

state 41

    (68) while_decl -> while . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 221
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 42

    (69) func_decl -> func . VAR ( def_arguments )

    VAR             shift and go to state 222


state 43

    (72) const_val -> FLOAT .

    operator_add    reduce using rule 72 (const_val -> FLOAT .)
    operator_sub    reduce using rule 72 (const_val -> FLOAT .)
    operator_mul    reduce using rule 72 (const_val -> FLOAT .)
    operator_div    reduce using rule 72 (const_val -> FLOAT .)
    operator_trudiv reduce using rule 72 (const_val -> FLOAT .)
    operator_pow    reduce using rule 72 (const_val -> FLOAT .)
    operator_join   reduce using rule 72 (const_val -> FLOAT .)
    operator_split  reduce using rule 72 (const_val -> FLOAT .)
    operator_scan   reduce using rule 72 (const_val -> FLOAT .)
    operator_reduc  reduce using rule 72 (const_val -> FLOAT .)
    operator_bitand reduce using rule 72 (const_val -> FLOAT .)
    operator_bitor  reduce using rule 72 (const_val -> FLOAT .)
    operator_bitxor reduce using rule 72 (const_val -> FLOAT .)
    operator_bitshiftleft reduce using rule 72 (const_val -> FLOAT .)
    operator_bitshiftright reduce using rule 72 (const_val -> FLOAT .)
    operator_and    reduce using rule 72 (const_val -> FLOAT .)
    operator_or     reduce using rule 72 (const_val -> FLOAT .)
    operator_xor    reduce using rule 72 (const_val -> FLOAT .)
    operator_contains reduce using rule 72 (const_val -> FLOAT .)
    operator_incr   reduce using rule 72 (const_val -> FLOAT .)
    operator_decr   reduce using rule 72 (const_val -> FLOAT .)
    operator_outer  reduce using rule 72 (const_val -> FLOAT .)
    operator_rotate reduce using rule 72 (const_val -> FLOAT .)
    operator_apply  reduce using rule 72 (const_val -> FLOAT .)
    operator_compose reduce using rule 72 (const_val -> FLOAT .)
    operator_over   reduce using rule 72 (const_val -> FLOAT .)
    operator_map    reduce using rule 72 (const_val -> FLOAT .)
    operator_less_than reduce using rule 72 (const_val -> FLOAT .)
    operator_less_than_equals reduce using rule 72 (const_val -> FLOAT .)
    operator_greater_than reduce using rule 72 (const_val -> FLOAT .)
    operator_greater_than_equals reduce using rule 72 (const_val -> FLOAT .)
    operator_equals reduce using rule 72 (const_val -> FLOAT .)
    operator_not_equals reduce using rule 72 (const_val -> FLOAT .)
    operator_smallest reduce using rule 72 (const_val -> FLOAT .)
    operator_greatest reduce using rule 72 (const_val -> FLOAT .)
    operator_goodname reduce using rule 72 (const_val -> FLOAT .)
    operator_bitnot reduce using rule 72 (const_val -> FLOAT .)
    operator_not    reduce using rule 72 (const_val -> FLOAT .)
    operator_reverse reduce using rule 72 (const_val -> FLOAT .)
    operator_sorted_incr reduce using rule 72 (const_val -> FLOAT .)
    operator_sorted_decr reduce using rule 72 (const_val -> FLOAT .)
    operator_s_combinator reduce using rule 72 (const_val -> FLOAT .)
    operator_s2_combinator reduce using rule 72 (const_val -> FLOAT .)
    operator_goodname2 reduce using rule 72 (const_val -> FLOAT .)
    VAR             reduce using rule 72 (const_val -> FLOAT .)
    FLOAT           reduce using rule 72 (const_val -> FLOAT .)
    NUM             reduce using rule 72 (const_val -> FLOAT .)
    NULL            reduce using rule 72 (const_val -> FLOAT .)
    STRING_3SQ      reduce using rule 72 (const_val -> FLOAT .)
    STRING_3DQ      reduce using rule 72 (const_val -> FLOAT .)
    STRING_SQ       reduce using rule 72 (const_val -> FLOAT .)
    STRING_DQ       reduce using rule 72 (const_val -> FLOAT .)
    true            reduce using rule 72 (const_val -> FLOAT .)
    false           reduce using rule 72 (const_val -> FLOAT .)
    type_type       reduce using rule 72 (const_val -> FLOAT .)
    type_num        reduce using rule 72 (const_val -> FLOAT .)
    type_any        reduce using rule 72 (const_val -> FLOAT .)
    type_u64        reduce using rule 72 (const_val -> FLOAT .)
    type_u32        reduce using rule 72 (const_val -> FLOAT .)
    type_u16        reduce using rule 72 (const_val -> FLOAT .)
    type_u8         reduce using rule 72 (const_val -> FLOAT .)
    type_i64        reduce using rule 72 (const_val -> FLOAT .)
    type_i32        reduce using rule 72 (const_val -> FLOAT .)
    type_i16        reduce using rule 72 (const_val -> FLOAT .)
    type_i8         reduce using rule 72 (const_val -> FLOAT .)
    type_f32        reduce using rule 72 (const_val -> FLOAT .)
    type_f64        reduce using rule 72 (const_val -> FLOAT .)
    type_str        reduce using rule 72 (const_val -> FLOAT .)
    type_list       reduce using rule 72 (const_val -> FLOAT .)
    type_tuple      reduce using rule 72 (const_val -> FLOAT .)
    type_array      reduce using rule 72 (const_val -> FLOAT .)
    type_vector     reduce using rule 72 (const_val -> FLOAT .)
    type_dict       reduce using rule 72 (const_val -> FLOAT .)
    type_generator  reduce using rule 72 (const_val -> FLOAT .)
    type_linked_list reduce using rule 72 (const_val -> FLOAT .)
    type_doubly_linked_list reduce using rule 72 (const_val -> FLOAT .)
    type_deque      reduce using rule 72 (const_val -> FLOAT .)
    type_heap       reduce using rule 72 (const_val -> FLOAT .)
    type_fibonacci_heap reduce using rule 72 (const_val -> FLOAT .)
    type_tree       reduce using rule 72 (const_val -> FLOAT .)
    type_trie       reduce using rule 72 (const_val -> FLOAT .)
    type_stack      reduce using rule 72 (const_val -> FLOAT .)
    type_queue      reduce using rule 72 (const_val -> FLOAT .)
    type_binary_search_tree reduce using rule 72 (const_val -> FLOAT .)
    type_bitset     reduce using rule 72 (const_val -> FLOAT .)
    type_set        reduce using rule 72 (const_val -> FLOAT .)
    type_map        reduce using rule 72 (const_val -> FLOAT .)
    type_range      reduce using rule 72 (const_val -> FLOAT .)
    type_bad_struct reduce using rule 72 (const_val -> FLOAT .)
    type_bad_struct2 reduce using rule 72 (const_val -> FLOAT .)
    lambda          reduce using rule 72 (const_val -> FLOAT .)
    pass            reduce using rule 72 (const_val -> FLOAT .)
    else            reduce using rule 72 (const_val -> FLOAT .)
    return          reduce using rule 72 (const_val -> FLOAT .)
    del             reduce using rule 72 (const_val -> FLOAT .)
    for             reduce using rule 72 (const_val -> FLOAT .)
    if              reduce using rule 72 (const_val -> FLOAT .)
    elif            reduce using rule 72 (const_val -> FLOAT .)
    operator        reduce using rule 72 (const_val -> FLOAT .)
    struct          reduce using rule 72 (const_val -> FLOAT .)
    while           reduce using rule 72 (const_val -> FLOAT .)
    func            reduce using rule 72 (const_val -> FLOAT .)
    $end            reduce using rule 72 (const_val -> FLOAT .)
    }               reduce using rule 72 (const_val -> FLOAT .)
    operator_inner  reduce using rule 72 (const_val -> FLOAT .)
    {               reduce using rule 72 (const_val -> FLOAT .)
    )               reduce using rule 72 (const_val -> FLOAT .)
    ,               reduce using rule 72 (const_val -> FLOAT .)


state 44

    (73) const_val -> NUM .

    operator_add    reduce using rule 73 (const_val -> NUM .)
    operator_sub    reduce using rule 73 (const_val -> NUM .)
    operator_mul    reduce using rule 73 (const_val -> NUM .)
    operator_div    reduce using rule 73 (const_val -> NUM .)
    operator_trudiv reduce using rule 73 (const_val -> NUM .)
    operator_pow    reduce using rule 73 (const_val -> NUM .)
    operator_join   reduce using rule 73 (const_val -> NUM .)
    operator_split  reduce using rule 73 (const_val -> NUM .)
    operator_scan   reduce using rule 73 (const_val -> NUM .)
    operator_reduc  reduce using rule 73 (const_val -> NUM .)
    operator_bitand reduce using rule 73 (const_val -> NUM .)
    operator_bitor  reduce using rule 73 (const_val -> NUM .)
    operator_bitxor reduce using rule 73 (const_val -> NUM .)
    operator_bitshiftleft reduce using rule 73 (const_val -> NUM .)
    operator_bitshiftright reduce using rule 73 (const_val -> NUM .)
    operator_and    reduce using rule 73 (const_val -> NUM .)
    operator_or     reduce using rule 73 (const_val -> NUM .)
    operator_xor    reduce using rule 73 (const_val -> NUM .)
    operator_contains reduce using rule 73 (const_val -> NUM .)
    operator_incr   reduce using rule 73 (const_val -> NUM .)
    operator_decr   reduce using rule 73 (const_val -> NUM .)
    operator_outer  reduce using rule 73 (const_val -> NUM .)
    operator_rotate reduce using rule 73 (const_val -> NUM .)
    operator_apply  reduce using rule 73 (const_val -> NUM .)
    operator_compose reduce using rule 73 (const_val -> NUM .)
    operator_over   reduce using rule 73 (const_val -> NUM .)
    operator_map    reduce using rule 73 (const_val -> NUM .)
    operator_less_than reduce using rule 73 (const_val -> NUM .)
    operator_less_than_equals reduce using rule 73 (const_val -> NUM .)
    operator_greater_than reduce using rule 73 (const_val -> NUM .)
    operator_greater_than_equals reduce using rule 73 (const_val -> NUM .)
    operator_equals reduce using rule 73 (const_val -> NUM .)
    operator_not_equals reduce using rule 73 (const_val -> NUM .)
    operator_smallest reduce using rule 73 (const_val -> NUM .)
    operator_greatest reduce using rule 73 (const_val -> NUM .)
    operator_goodname reduce using rule 73 (const_val -> NUM .)
    operator_bitnot reduce using rule 73 (const_val -> NUM .)
    operator_not    reduce using rule 73 (const_val -> NUM .)
    operator_reverse reduce using rule 73 (const_val -> NUM .)
    operator_sorted_incr reduce using rule 73 (const_val -> NUM .)
    operator_sorted_decr reduce using rule 73 (const_val -> NUM .)
    operator_s_combinator reduce using rule 73 (const_val -> NUM .)
    operator_s2_combinator reduce using rule 73 (const_val -> NUM .)
    operator_goodname2 reduce using rule 73 (const_val -> NUM .)
    VAR             reduce using rule 73 (const_val -> NUM .)
    FLOAT           reduce using rule 73 (const_val -> NUM .)
    NUM             reduce using rule 73 (const_val -> NUM .)
    NULL            reduce using rule 73 (const_val -> NUM .)
    STRING_3SQ      reduce using rule 73 (const_val -> NUM .)
    STRING_3DQ      reduce using rule 73 (const_val -> NUM .)
    STRING_SQ       reduce using rule 73 (const_val -> NUM .)
    STRING_DQ       reduce using rule 73 (const_val -> NUM .)
    true            reduce using rule 73 (const_val -> NUM .)
    false           reduce using rule 73 (const_val -> NUM .)
    type_type       reduce using rule 73 (const_val -> NUM .)
    type_num        reduce using rule 73 (const_val -> NUM .)
    type_any        reduce using rule 73 (const_val -> NUM .)
    type_u64        reduce using rule 73 (const_val -> NUM .)
    type_u32        reduce using rule 73 (const_val -> NUM .)
    type_u16        reduce using rule 73 (const_val -> NUM .)
    type_u8         reduce using rule 73 (const_val -> NUM .)
    type_i64        reduce using rule 73 (const_val -> NUM .)
    type_i32        reduce using rule 73 (const_val -> NUM .)
    type_i16        reduce using rule 73 (const_val -> NUM .)
    type_i8         reduce using rule 73 (const_val -> NUM .)
    type_f32        reduce using rule 73 (const_val -> NUM .)
    type_f64        reduce using rule 73 (const_val -> NUM .)
    type_str        reduce using rule 73 (const_val -> NUM .)
    type_list       reduce using rule 73 (const_val -> NUM .)
    type_tuple      reduce using rule 73 (const_val -> NUM .)
    type_array      reduce using rule 73 (const_val -> NUM .)
    type_vector     reduce using rule 73 (const_val -> NUM .)
    type_dict       reduce using rule 73 (const_val -> NUM .)
    type_generator  reduce using rule 73 (const_val -> NUM .)
    type_linked_list reduce using rule 73 (const_val -> NUM .)
    type_doubly_linked_list reduce using rule 73 (const_val -> NUM .)
    type_deque      reduce using rule 73 (const_val -> NUM .)
    type_heap       reduce using rule 73 (const_val -> NUM .)
    type_fibonacci_heap reduce using rule 73 (const_val -> NUM .)
    type_tree       reduce using rule 73 (const_val -> NUM .)
    type_trie       reduce using rule 73 (const_val -> NUM .)
    type_stack      reduce using rule 73 (const_val -> NUM .)
    type_queue      reduce using rule 73 (const_val -> NUM .)
    type_binary_search_tree reduce using rule 73 (const_val -> NUM .)
    type_bitset     reduce using rule 73 (const_val -> NUM .)
    type_set        reduce using rule 73 (const_val -> NUM .)
    type_map        reduce using rule 73 (const_val -> NUM .)
    type_range      reduce using rule 73 (const_val -> NUM .)
    type_bad_struct reduce using rule 73 (const_val -> NUM .)
    type_bad_struct2 reduce using rule 73 (const_val -> NUM .)
    lambda          reduce using rule 73 (const_val -> NUM .)
    pass            reduce using rule 73 (const_val -> NUM .)
    else            reduce using rule 73 (const_val -> NUM .)
    return          reduce using rule 73 (const_val -> NUM .)
    del             reduce using rule 73 (const_val -> NUM .)
    for             reduce using rule 73 (const_val -> NUM .)
    if              reduce using rule 73 (const_val -> NUM .)
    elif            reduce using rule 73 (const_val -> NUM .)
    operator        reduce using rule 73 (const_val -> NUM .)
    struct          reduce using rule 73 (const_val -> NUM .)
    while           reduce using rule 73 (const_val -> NUM .)
    func            reduce using rule 73 (const_val -> NUM .)
    $end            reduce using rule 73 (const_val -> NUM .)
    }               reduce using rule 73 (const_val -> NUM .)
    operator_inner  reduce using rule 73 (const_val -> NUM .)
    {               reduce using rule 73 (const_val -> NUM .)
    )               reduce using rule 73 (const_val -> NUM .)
    ,               reduce using rule 73 (const_val -> NUM .)


state 45

    (74) const_val -> NULL .

    operator_add    reduce using rule 74 (const_val -> NULL .)
    operator_sub    reduce using rule 74 (const_val -> NULL .)
    operator_mul    reduce using rule 74 (const_val -> NULL .)
    operator_div    reduce using rule 74 (const_val -> NULL .)
    operator_trudiv reduce using rule 74 (const_val -> NULL .)
    operator_pow    reduce using rule 74 (const_val -> NULL .)
    operator_join   reduce using rule 74 (const_val -> NULL .)
    operator_split  reduce using rule 74 (const_val -> NULL .)
    operator_scan   reduce using rule 74 (const_val -> NULL .)
    operator_reduc  reduce using rule 74 (const_val -> NULL .)
    operator_bitand reduce using rule 74 (const_val -> NULL .)
    operator_bitor  reduce using rule 74 (const_val -> NULL .)
    operator_bitxor reduce using rule 74 (const_val -> NULL .)
    operator_bitshiftleft reduce using rule 74 (const_val -> NULL .)
    operator_bitshiftright reduce using rule 74 (const_val -> NULL .)
    operator_and    reduce using rule 74 (const_val -> NULL .)
    operator_or     reduce using rule 74 (const_val -> NULL .)
    operator_xor    reduce using rule 74 (const_val -> NULL .)
    operator_contains reduce using rule 74 (const_val -> NULL .)
    operator_incr   reduce using rule 74 (const_val -> NULL .)
    operator_decr   reduce using rule 74 (const_val -> NULL .)
    operator_outer  reduce using rule 74 (const_val -> NULL .)
    operator_rotate reduce using rule 74 (const_val -> NULL .)
    operator_apply  reduce using rule 74 (const_val -> NULL .)
    operator_compose reduce using rule 74 (const_val -> NULL .)
    operator_over   reduce using rule 74 (const_val -> NULL .)
    operator_map    reduce using rule 74 (const_val -> NULL .)
    operator_less_than reduce using rule 74 (const_val -> NULL .)
    operator_less_than_equals reduce using rule 74 (const_val -> NULL .)
    operator_greater_than reduce using rule 74 (const_val -> NULL .)
    operator_greater_than_equals reduce using rule 74 (const_val -> NULL .)
    operator_equals reduce using rule 74 (const_val -> NULL .)
    operator_not_equals reduce using rule 74 (const_val -> NULL .)
    operator_smallest reduce using rule 74 (const_val -> NULL .)
    operator_greatest reduce using rule 74 (const_val -> NULL .)
    operator_goodname reduce using rule 74 (const_val -> NULL .)
    operator_bitnot reduce using rule 74 (const_val -> NULL .)
    operator_not    reduce using rule 74 (const_val -> NULL .)
    operator_reverse reduce using rule 74 (const_val -> NULL .)
    operator_sorted_incr reduce using rule 74 (const_val -> NULL .)
    operator_sorted_decr reduce using rule 74 (const_val -> NULL .)
    operator_s_combinator reduce using rule 74 (const_val -> NULL .)
    operator_s2_combinator reduce using rule 74 (const_val -> NULL .)
    operator_goodname2 reduce using rule 74 (const_val -> NULL .)
    VAR             reduce using rule 74 (const_val -> NULL .)
    FLOAT           reduce using rule 74 (const_val -> NULL .)
    NUM             reduce using rule 74 (const_val -> NULL .)
    NULL            reduce using rule 74 (const_val -> NULL .)
    STRING_3SQ      reduce using rule 74 (const_val -> NULL .)
    STRING_3DQ      reduce using rule 74 (const_val -> NULL .)
    STRING_SQ       reduce using rule 74 (const_val -> NULL .)
    STRING_DQ       reduce using rule 74 (const_val -> NULL .)
    true            reduce using rule 74 (const_val -> NULL .)
    false           reduce using rule 74 (const_val -> NULL .)
    type_type       reduce using rule 74 (const_val -> NULL .)
    type_num        reduce using rule 74 (const_val -> NULL .)
    type_any        reduce using rule 74 (const_val -> NULL .)
    type_u64        reduce using rule 74 (const_val -> NULL .)
    type_u32        reduce using rule 74 (const_val -> NULL .)
    type_u16        reduce using rule 74 (const_val -> NULL .)
    type_u8         reduce using rule 74 (const_val -> NULL .)
    type_i64        reduce using rule 74 (const_val -> NULL .)
    type_i32        reduce using rule 74 (const_val -> NULL .)
    type_i16        reduce using rule 74 (const_val -> NULL .)
    type_i8         reduce using rule 74 (const_val -> NULL .)
    type_f32        reduce using rule 74 (const_val -> NULL .)
    type_f64        reduce using rule 74 (const_val -> NULL .)
    type_str        reduce using rule 74 (const_val -> NULL .)
    type_list       reduce using rule 74 (const_val -> NULL .)
    type_tuple      reduce using rule 74 (const_val -> NULL .)
    type_array      reduce using rule 74 (const_val -> NULL .)
    type_vector     reduce using rule 74 (const_val -> NULL .)
    type_dict       reduce using rule 74 (const_val -> NULL .)
    type_generator  reduce using rule 74 (const_val -> NULL .)
    type_linked_list reduce using rule 74 (const_val -> NULL .)
    type_doubly_linked_list reduce using rule 74 (const_val -> NULL .)
    type_deque      reduce using rule 74 (const_val -> NULL .)
    type_heap       reduce using rule 74 (const_val -> NULL .)
    type_fibonacci_heap reduce using rule 74 (const_val -> NULL .)
    type_tree       reduce using rule 74 (const_val -> NULL .)
    type_trie       reduce using rule 74 (const_val -> NULL .)
    type_stack      reduce using rule 74 (const_val -> NULL .)
    type_queue      reduce using rule 74 (const_val -> NULL .)
    type_binary_search_tree reduce using rule 74 (const_val -> NULL .)
    type_bitset     reduce using rule 74 (const_val -> NULL .)
    type_set        reduce using rule 74 (const_val -> NULL .)
    type_map        reduce using rule 74 (const_val -> NULL .)
    type_range      reduce using rule 74 (const_val -> NULL .)
    type_bad_struct reduce using rule 74 (const_val -> NULL .)
    type_bad_struct2 reduce using rule 74 (const_val -> NULL .)
    lambda          reduce using rule 74 (const_val -> NULL .)
    pass            reduce using rule 74 (const_val -> NULL .)
    else            reduce using rule 74 (const_val -> NULL .)
    return          reduce using rule 74 (const_val -> NULL .)
    del             reduce using rule 74 (const_val -> NULL .)
    for             reduce using rule 74 (const_val -> NULL .)
    if              reduce using rule 74 (const_val -> NULL .)
    elif            reduce using rule 74 (const_val -> NULL .)
    operator        reduce using rule 74 (const_val -> NULL .)
    struct          reduce using rule 74 (const_val -> NULL .)
    while           reduce using rule 74 (const_val -> NULL .)
    func            reduce using rule 74 (const_val -> NULL .)
    $end            reduce using rule 74 (const_val -> NULL .)
    }               reduce using rule 74 (const_val -> NULL .)
    operator_inner  reduce using rule 74 (const_val -> NULL .)
    {               reduce using rule 74 (const_val -> NULL .)
    )               reduce using rule 74 (const_val -> NULL .)
    ,               reduce using rule 74 (const_val -> NULL .)


state 46

    (75) const_val -> STRING_3SQ .

    operator_add    reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_sub    reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_mul    reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_div    reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_trudiv reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_pow    reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_join   reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_split  reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_scan   reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_reduc  reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_bitand reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_bitor  reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_bitxor reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_bitshiftleft reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_bitshiftright reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_and    reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_or     reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_xor    reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_contains reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_incr   reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_decr   reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_outer  reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_rotate reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_apply  reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_compose reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_over   reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_map    reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_less_than reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_less_than_equals reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_greater_than reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_greater_than_equals reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_equals reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_not_equals reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_smallest reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_greatest reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_goodname reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_bitnot reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_not    reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_reverse reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_sorted_incr reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_sorted_decr reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_s_combinator reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_s2_combinator reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_goodname2 reduce using rule 75 (const_val -> STRING_3SQ .)
    VAR             reduce using rule 75 (const_val -> STRING_3SQ .)
    FLOAT           reduce using rule 75 (const_val -> STRING_3SQ .)
    NUM             reduce using rule 75 (const_val -> STRING_3SQ .)
    NULL            reduce using rule 75 (const_val -> STRING_3SQ .)
    STRING_3SQ      reduce using rule 75 (const_val -> STRING_3SQ .)
    STRING_3DQ      reduce using rule 75 (const_val -> STRING_3SQ .)
    STRING_SQ       reduce using rule 75 (const_val -> STRING_3SQ .)
    STRING_DQ       reduce using rule 75 (const_val -> STRING_3SQ .)
    true            reduce using rule 75 (const_val -> STRING_3SQ .)
    false           reduce using rule 75 (const_val -> STRING_3SQ .)
    type_type       reduce using rule 75 (const_val -> STRING_3SQ .)
    type_num        reduce using rule 75 (const_val -> STRING_3SQ .)
    type_any        reduce using rule 75 (const_val -> STRING_3SQ .)
    type_u64        reduce using rule 75 (const_val -> STRING_3SQ .)
    type_u32        reduce using rule 75 (const_val -> STRING_3SQ .)
    type_u16        reduce using rule 75 (const_val -> STRING_3SQ .)
    type_u8         reduce using rule 75 (const_val -> STRING_3SQ .)
    type_i64        reduce using rule 75 (const_val -> STRING_3SQ .)
    type_i32        reduce using rule 75 (const_val -> STRING_3SQ .)
    type_i16        reduce using rule 75 (const_val -> STRING_3SQ .)
    type_i8         reduce using rule 75 (const_val -> STRING_3SQ .)
    type_f32        reduce using rule 75 (const_val -> STRING_3SQ .)
    type_f64        reduce using rule 75 (const_val -> STRING_3SQ .)
    type_str        reduce using rule 75 (const_val -> STRING_3SQ .)
    type_list       reduce using rule 75 (const_val -> STRING_3SQ .)
    type_tuple      reduce using rule 75 (const_val -> STRING_3SQ .)
    type_array      reduce using rule 75 (const_val -> STRING_3SQ .)
    type_vector     reduce using rule 75 (const_val -> STRING_3SQ .)
    type_dict       reduce using rule 75 (const_val -> STRING_3SQ .)
    type_generator  reduce using rule 75 (const_val -> STRING_3SQ .)
    type_linked_list reduce using rule 75 (const_val -> STRING_3SQ .)
    type_doubly_linked_list reduce using rule 75 (const_val -> STRING_3SQ .)
    type_deque      reduce using rule 75 (const_val -> STRING_3SQ .)
    type_heap       reduce using rule 75 (const_val -> STRING_3SQ .)
    type_fibonacci_heap reduce using rule 75 (const_val -> STRING_3SQ .)
    type_tree       reduce using rule 75 (const_val -> STRING_3SQ .)
    type_trie       reduce using rule 75 (const_val -> STRING_3SQ .)
    type_stack      reduce using rule 75 (const_val -> STRING_3SQ .)
    type_queue      reduce using rule 75 (const_val -> STRING_3SQ .)
    type_binary_search_tree reduce using rule 75 (const_val -> STRING_3SQ .)
    type_bitset     reduce using rule 75 (const_val -> STRING_3SQ .)
    type_set        reduce using rule 75 (const_val -> STRING_3SQ .)
    type_map        reduce using rule 75 (const_val -> STRING_3SQ .)
    type_range      reduce using rule 75 (const_val -> STRING_3SQ .)
    type_bad_struct reduce using rule 75 (const_val -> STRING_3SQ .)
    type_bad_struct2 reduce using rule 75 (const_val -> STRING_3SQ .)
    lambda          reduce using rule 75 (const_val -> STRING_3SQ .)
    pass            reduce using rule 75 (const_val -> STRING_3SQ .)
    else            reduce using rule 75 (const_val -> STRING_3SQ .)
    return          reduce using rule 75 (const_val -> STRING_3SQ .)
    del             reduce using rule 75 (const_val -> STRING_3SQ .)
    for             reduce using rule 75 (const_val -> STRING_3SQ .)
    if              reduce using rule 75 (const_val -> STRING_3SQ .)
    elif            reduce using rule 75 (const_val -> STRING_3SQ .)
    operator        reduce using rule 75 (const_val -> STRING_3SQ .)
    struct          reduce using rule 75 (const_val -> STRING_3SQ .)
    while           reduce using rule 75 (const_val -> STRING_3SQ .)
    func            reduce using rule 75 (const_val -> STRING_3SQ .)
    $end            reduce using rule 75 (const_val -> STRING_3SQ .)
    }               reduce using rule 75 (const_val -> STRING_3SQ .)
    operator_inner  reduce using rule 75 (const_val -> STRING_3SQ .)
    {               reduce using rule 75 (const_val -> STRING_3SQ .)
    )               reduce using rule 75 (const_val -> STRING_3SQ .)
    ,               reduce using rule 75 (const_val -> STRING_3SQ .)


state 47

    (76) const_val -> STRING_3DQ .

    operator_add    reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_sub    reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_mul    reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_div    reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_trudiv reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_pow    reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_join   reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_split  reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_scan   reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_reduc  reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_bitand reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_bitor  reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_bitxor reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_bitshiftleft reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_bitshiftright reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_and    reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_or     reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_xor    reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_contains reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_incr   reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_decr   reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_outer  reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_rotate reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_apply  reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_compose reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_over   reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_map    reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_less_than reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_less_than_equals reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_greater_than reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_greater_than_equals reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_equals reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_not_equals reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_smallest reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_greatest reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_goodname reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_bitnot reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_not    reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_reverse reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_sorted_incr reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_sorted_decr reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_s_combinator reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_s2_combinator reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_goodname2 reduce using rule 76 (const_val -> STRING_3DQ .)
    VAR             reduce using rule 76 (const_val -> STRING_3DQ .)
    FLOAT           reduce using rule 76 (const_val -> STRING_3DQ .)
    NUM             reduce using rule 76 (const_val -> STRING_3DQ .)
    NULL            reduce using rule 76 (const_val -> STRING_3DQ .)
    STRING_3SQ      reduce using rule 76 (const_val -> STRING_3DQ .)
    STRING_3DQ      reduce using rule 76 (const_val -> STRING_3DQ .)
    STRING_SQ       reduce using rule 76 (const_val -> STRING_3DQ .)
    STRING_DQ       reduce using rule 76 (const_val -> STRING_3DQ .)
    true            reduce using rule 76 (const_val -> STRING_3DQ .)
    false           reduce using rule 76 (const_val -> STRING_3DQ .)
    type_type       reduce using rule 76 (const_val -> STRING_3DQ .)
    type_num        reduce using rule 76 (const_val -> STRING_3DQ .)
    type_any        reduce using rule 76 (const_val -> STRING_3DQ .)
    type_u64        reduce using rule 76 (const_val -> STRING_3DQ .)
    type_u32        reduce using rule 76 (const_val -> STRING_3DQ .)
    type_u16        reduce using rule 76 (const_val -> STRING_3DQ .)
    type_u8         reduce using rule 76 (const_val -> STRING_3DQ .)
    type_i64        reduce using rule 76 (const_val -> STRING_3DQ .)
    type_i32        reduce using rule 76 (const_val -> STRING_3DQ .)
    type_i16        reduce using rule 76 (const_val -> STRING_3DQ .)
    type_i8         reduce using rule 76 (const_val -> STRING_3DQ .)
    type_f32        reduce using rule 76 (const_val -> STRING_3DQ .)
    type_f64        reduce using rule 76 (const_val -> STRING_3DQ .)
    type_str        reduce using rule 76 (const_val -> STRING_3DQ .)
    type_list       reduce using rule 76 (const_val -> STRING_3DQ .)
    type_tuple      reduce using rule 76 (const_val -> STRING_3DQ .)
    type_array      reduce using rule 76 (const_val -> STRING_3DQ .)
    type_vector     reduce using rule 76 (const_val -> STRING_3DQ .)
    type_dict       reduce using rule 76 (const_val -> STRING_3DQ .)
    type_generator  reduce using rule 76 (const_val -> STRING_3DQ .)
    type_linked_list reduce using rule 76 (const_val -> STRING_3DQ .)
    type_doubly_linked_list reduce using rule 76 (const_val -> STRING_3DQ .)
    type_deque      reduce using rule 76 (const_val -> STRING_3DQ .)
    type_heap       reduce using rule 76 (const_val -> STRING_3DQ .)
    type_fibonacci_heap reduce using rule 76 (const_val -> STRING_3DQ .)
    type_tree       reduce using rule 76 (const_val -> STRING_3DQ .)
    type_trie       reduce using rule 76 (const_val -> STRING_3DQ .)
    type_stack      reduce using rule 76 (const_val -> STRING_3DQ .)
    type_queue      reduce using rule 76 (const_val -> STRING_3DQ .)
    type_binary_search_tree reduce using rule 76 (const_val -> STRING_3DQ .)
    type_bitset     reduce using rule 76 (const_val -> STRING_3DQ .)
    type_set        reduce using rule 76 (const_val -> STRING_3DQ .)
    type_map        reduce using rule 76 (const_val -> STRING_3DQ .)
    type_range      reduce using rule 76 (const_val -> STRING_3DQ .)
    type_bad_struct reduce using rule 76 (const_val -> STRING_3DQ .)
    type_bad_struct2 reduce using rule 76 (const_val -> STRING_3DQ .)
    lambda          reduce using rule 76 (const_val -> STRING_3DQ .)
    pass            reduce using rule 76 (const_val -> STRING_3DQ .)
    else            reduce using rule 76 (const_val -> STRING_3DQ .)
    return          reduce using rule 76 (const_val -> STRING_3DQ .)
    del             reduce using rule 76 (const_val -> STRING_3DQ .)
    for             reduce using rule 76 (const_val -> STRING_3DQ .)
    if              reduce using rule 76 (const_val -> STRING_3DQ .)
    elif            reduce using rule 76 (const_val -> STRING_3DQ .)
    operator        reduce using rule 76 (const_val -> STRING_3DQ .)
    struct          reduce using rule 76 (const_val -> STRING_3DQ .)
    while           reduce using rule 76 (const_val -> STRING_3DQ .)
    func            reduce using rule 76 (const_val -> STRING_3DQ .)
    $end            reduce using rule 76 (const_val -> STRING_3DQ .)
    }               reduce using rule 76 (const_val -> STRING_3DQ .)
    operator_inner  reduce using rule 76 (const_val -> STRING_3DQ .)
    {               reduce using rule 76 (const_val -> STRING_3DQ .)
    )               reduce using rule 76 (const_val -> STRING_3DQ .)
    ,               reduce using rule 76 (const_val -> STRING_3DQ .)


state 48

    (77) const_val -> STRING_SQ .

    operator_add    reduce using rule 77 (const_val -> STRING_SQ .)
    operator_sub    reduce using rule 77 (const_val -> STRING_SQ .)
    operator_mul    reduce using rule 77 (const_val -> STRING_SQ .)
    operator_div    reduce using rule 77 (const_val -> STRING_SQ .)
    operator_trudiv reduce using rule 77 (const_val -> STRING_SQ .)
    operator_pow    reduce using rule 77 (const_val -> STRING_SQ .)
    operator_join   reduce using rule 77 (const_val -> STRING_SQ .)
    operator_split  reduce using rule 77 (const_val -> STRING_SQ .)
    operator_scan   reduce using rule 77 (const_val -> STRING_SQ .)
    operator_reduc  reduce using rule 77 (const_val -> STRING_SQ .)
    operator_bitand reduce using rule 77 (const_val -> STRING_SQ .)
    operator_bitor  reduce using rule 77 (const_val -> STRING_SQ .)
    operator_bitxor reduce using rule 77 (const_val -> STRING_SQ .)
    operator_bitshiftleft reduce using rule 77 (const_val -> STRING_SQ .)
    operator_bitshiftright reduce using rule 77 (const_val -> STRING_SQ .)
    operator_and    reduce using rule 77 (const_val -> STRING_SQ .)
    operator_or     reduce using rule 77 (const_val -> STRING_SQ .)
    operator_xor    reduce using rule 77 (const_val -> STRING_SQ .)
    operator_contains reduce using rule 77 (const_val -> STRING_SQ .)
    operator_incr   reduce using rule 77 (const_val -> STRING_SQ .)
    operator_decr   reduce using rule 77 (const_val -> STRING_SQ .)
    operator_outer  reduce using rule 77 (const_val -> STRING_SQ .)
    operator_rotate reduce using rule 77 (const_val -> STRING_SQ .)
    operator_apply  reduce using rule 77 (const_val -> STRING_SQ .)
    operator_compose reduce using rule 77 (const_val -> STRING_SQ .)
    operator_over   reduce using rule 77 (const_val -> STRING_SQ .)
    operator_map    reduce using rule 77 (const_val -> STRING_SQ .)
    operator_less_than reduce using rule 77 (const_val -> STRING_SQ .)
    operator_less_than_equals reduce using rule 77 (const_val -> STRING_SQ .)
    operator_greater_than reduce using rule 77 (const_val -> STRING_SQ .)
    operator_greater_than_equals reduce using rule 77 (const_val -> STRING_SQ .)
    operator_equals reduce using rule 77 (const_val -> STRING_SQ .)
    operator_not_equals reduce using rule 77 (const_val -> STRING_SQ .)
    operator_smallest reduce using rule 77 (const_val -> STRING_SQ .)
    operator_greatest reduce using rule 77 (const_val -> STRING_SQ .)
    operator_goodname reduce using rule 77 (const_val -> STRING_SQ .)
    operator_bitnot reduce using rule 77 (const_val -> STRING_SQ .)
    operator_not    reduce using rule 77 (const_val -> STRING_SQ .)
    operator_reverse reduce using rule 77 (const_val -> STRING_SQ .)
    operator_sorted_incr reduce using rule 77 (const_val -> STRING_SQ .)
    operator_sorted_decr reduce using rule 77 (const_val -> STRING_SQ .)
    operator_s_combinator reduce using rule 77 (const_val -> STRING_SQ .)
    operator_s2_combinator reduce using rule 77 (const_val -> STRING_SQ .)
    operator_goodname2 reduce using rule 77 (const_val -> STRING_SQ .)
    VAR             reduce using rule 77 (const_val -> STRING_SQ .)
    FLOAT           reduce using rule 77 (const_val -> STRING_SQ .)
    NUM             reduce using rule 77 (const_val -> STRING_SQ .)
    NULL            reduce using rule 77 (const_val -> STRING_SQ .)
    STRING_3SQ      reduce using rule 77 (const_val -> STRING_SQ .)
    STRING_3DQ      reduce using rule 77 (const_val -> STRING_SQ .)
    STRING_SQ       reduce using rule 77 (const_val -> STRING_SQ .)
    STRING_DQ       reduce using rule 77 (const_val -> STRING_SQ .)
    true            reduce using rule 77 (const_val -> STRING_SQ .)
    false           reduce using rule 77 (const_val -> STRING_SQ .)
    type_type       reduce using rule 77 (const_val -> STRING_SQ .)
    type_num        reduce using rule 77 (const_val -> STRING_SQ .)
    type_any        reduce using rule 77 (const_val -> STRING_SQ .)
    type_u64        reduce using rule 77 (const_val -> STRING_SQ .)
    type_u32        reduce using rule 77 (const_val -> STRING_SQ .)
    type_u16        reduce using rule 77 (const_val -> STRING_SQ .)
    type_u8         reduce using rule 77 (const_val -> STRING_SQ .)
    type_i64        reduce using rule 77 (const_val -> STRING_SQ .)
    type_i32        reduce using rule 77 (const_val -> STRING_SQ .)
    type_i16        reduce using rule 77 (const_val -> STRING_SQ .)
    type_i8         reduce using rule 77 (const_val -> STRING_SQ .)
    type_f32        reduce using rule 77 (const_val -> STRING_SQ .)
    type_f64        reduce using rule 77 (const_val -> STRING_SQ .)
    type_str        reduce using rule 77 (const_val -> STRING_SQ .)
    type_list       reduce using rule 77 (const_val -> STRING_SQ .)
    type_tuple      reduce using rule 77 (const_val -> STRING_SQ .)
    type_array      reduce using rule 77 (const_val -> STRING_SQ .)
    type_vector     reduce using rule 77 (const_val -> STRING_SQ .)
    type_dict       reduce using rule 77 (const_val -> STRING_SQ .)
    type_generator  reduce using rule 77 (const_val -> STRING_SQ .)
    type_linked_list reduce using rule 77 (const_val -> STRING_SQ .)
    type_doubly_linked_list reduce using rule 77 (const_val -> STRING_SQ .)
    type_deque      reduce using rule 77 (const_val -> STRING_SQ .)
    type_heap       reduce using rule 77 (const_val -> STRING_SQ .)
    type_fibonacci_heap reduce using rule 77 (const_val -> STRING_SQ .)
    type_tree       reduce using rule 77 (const_val -> STRING_SQ .)
    type_trie       reduce using rule 77 (const_val -> STRING_SQ .)
    type_stack      reduce using rule 77 (const_val -> STRING_SQ .)
    type_queue      reduce using rule 77 (const_val -> STRING_SQ .)
    type_binary_search_tree reduce using rule 77 (const_val -> STRING_SQ .)
    type_bitset     reduce using rule 77 (const_val -> STRING_SQ .)
    type_set        reduce using rule 77 (const_val -> STRING_SQ .)
    type_map        reduce using rule 77 (const_val -> STRING_SQ .)
    type_range      reduce using rule 77 (const_val -> STRING_SQ .)
    type_bad_struct reduce using rule 77 (const_val -> STRING_SQ .)
    type_bad_struct2 reduce using rule 77 (const_val -> STRING_SQ .)
    lambda          reduce using rule 77 (const_val -> STRING_SQ .)
    pass            reduce using rule 77 (const_val -> STRING_SQ .)
    else            reduce using rule 77 (const_val -> STRING_SQ .)
    return          reduce using rule 77 (const_val -> STRING_SQ .)
    del             reduce using rule 77 (const_val -> STRING_SQ .)
    for             reduce using rule 77 (const_val -> STRING_SQ .)
    if              reduce using rule 77 (const_val -> STRING_SQ .)
    elif            reduce using rule 77 (const_val -> STRING_SQ .)
    operator        reduce using rule 77 (const_val -> STRING_SQ .)
    struct          reduce using rule 77 (const_val -> STRING_SQ .)
    while           reduce using rule 77 (const_val -> STRING_SQ .)
    func            reduce using rule 77 (const_val -> STRING_SQ .)
    $end            reduce using rule 77 (const_val -> STRING_SQ .)
    }               reduce using rule 77 (const_val -> STRING_SQ .)
    operator_inner  reduce using rule 77 (const_val -> STRING_SQ .)
    {               reduce using rule 77 (const_val -> STRING_SQ .)
    )               reduce using rule 77 (const_val -> STRING_SQ .)
    ,               reduce using rule 77 (const_val -> STRING_SQ .)


state 49

    (78) const_val -> STRING_DQ .

    operator_add    reduce using rule 78 (const_val -> STRING_DQ .)
    operator_sub    reduce using rule 78 (const_val -> STRING_DQ .)
    operator_mul    reduce using rule 78 (const_val -> STRING_DQ .)
    operator_div    reduce using rule 78 (const_val -> STRING_DQ .)
    operator_trudiv reduce using rule 78 (const_val -> STRING_DQ .)
    operator_pow    reduce using rule 78 (const_val -> STRING_DQ .)
    operator_join   reduce using rule 78 (const_val -> STRING_DQ .)
    operator_split  reduce using rule 78 (const_val -> STRING_DQ .)
    operator_scan   reduce using rule 78 (const_val -> STRING_DQ .)
    operator_reduc  reduce using rule 78 (const_val -> STRING_DQ .)
    operator_bitand reduce using rule 78 (const_val -> STRING_DQ .)
    operator_bitor  reduce using rule 78 (const_val -> STRING_DQ .)
    operator_bitxor reduce using rule 78 (const_val -> STRING_DQ .)
    operator_bitshiftleft reduce using rule 78 (const_val -> STRING_DQ .)
    operator_bitshiftright reduce using rule 78 (const_val -> STRING_DQ .)
    operator_and    reduce using rule 78 (const_val -> STRING_DQ .)
    operator_or     reduce using rule 78 (const_val -> STRING_DQ .)
    operator_xor    reduce using rule 78 (const_val -> STRING_DQ .)
    operator_contains reduce using rule 78 (const_val -> STRING_DQ .)
    operator_incr   reduce using rule 78 (const_val -> STRING_DQ .)
    operator_decr   reduce using rule 78 (const_val -> STRING_DQ .)
    operator_outer  reduce using rule 78 (const_val -> STRING_DQ .)
    operator_rotate reduce using rule 78 (const_val -> STRING_DQ .)
    operator_apply  reduce using rule 78 (const_val -> STRING_DQ .)
    operator_compose reduce using rule 78 (const_val -> STRING_DQ .)
    operator_over   reduce using rule 78 (const_val -> STRING_DQ .)
    operator_map    reduce using rule 78 (const_val -> STRING_DQ .)
    operator_less_than reduce using rule 78 (const_val -> STRING_DQ .)
    operator_less_than_equals reduce using rule 78 (const_val -> STRING_DQ .)
    operator_greater_than reduce using rule 78 (const_val -> STRING_DQ .)
    operator_greater_than_equals reduce using rule 78 (const_val -> STRING_DQ .)
    operator_equals reduce using rule 78 (const_val -> STRING_DQ .)
    operator_not_equals reduce using rule 78 (const_val -> STRING_DQ .)
    operator_smallest reduce using rule 78 (const_val -> STRING_DQ .)
    operator_greatest reduce using rule 78 (const_val -> STRING_DQ .)
    operator_goodname reduce using rule 78 (const_val -> STRING_DQ .)
    operator_bitnot reduce using rule 78 (const_val -> STRING_DQ .)
    operator_not    reduce using rule 78 (const_val -> STRING_DQ .)
    operator_reverse reduce using rule 78 (const_val -> STRING_DQ .)
    operator_sorted_incr reduce using rule 78 (const_val -> STRING_DQ .)
    operator_sorted_decr reduce using rule 78 (const_val -> STRING_DQ .)
    operator_s_combinator reduce using rule 78 (const_val -> STRING_DQ .)
    operator_s2_combinator reduce using rule 78 (const_val -> STRING_DQ .)
    operator_goodname2 reduce using rule 78 (const_val -> STRING_DQ .)
    VAR             reduce using rule 78 (const_val -> STRING_DQ .)
    FLOAT           reduce using rule 78 (const_val -> STRING_DQ .)
    NUM             reduce using rule 78 (const_val -> STRING_DQ .)
    NULL            reduce using rule 78 (const_val -> STRING_DQ .)
    STRING_3SQ      reduce using rule 78 (const_val -> STRING_DQ .)
    STRING_3DQ      reduce using rule 78 (const_val -> STRING_DQ .)
    STRING_SQ       reduce using rule 78 (const_val -> STRING_DQ .)
    STRING_DQ       reduce using rule 78 (const_val -> STRING_DQ .)
    true            reduce using rule 78 (const_val -> STRING_DQ .)
    false           reduce using rule 78 (const_val -> STRING_DQ .)
    type_type       reduce using rule 78 (const_val -> STRING_DQ .)
    type_num        reduce using rule 78 (const_val -> STRING_DQ .)
    type_any        reduce using rule 78 (const_val -> STRING_DQ .)
    type_u64        reduce using rule 78 (const_val -> STRING_DQ .)
    type_u32        reduce using rule 78 (const_val -> STRING_DQ .)
    type_u16        reduce using rule 78 (const_val -> STRING_DQ .)
    type_u8         reduce using rule 78 (const_val -> STRING_DQ .)
    type_i64        reduce using rule 78 (const_val -> STRING_DQ .)
    type_i32        reduce using rule 78 (const_val -> STRING_DQ .)
    type_i16        reduce using rule 78 (const_val -> STRING_DQ .)
    type_i8         reduce using rule 78 (const_val -> STRING_DQ .)
    type_f32        reduce using rule 78 (const_val -> STRING_DQ .)
    type_f64        reduce using rule 78 (const_val -> STRING_DQ .)
    type_str        reduce using rule 78 (const_val -> STRING_DQ .)
    type_list       reduce using rule 78 (const_val -> STRING_DQ .)
    type_tuple      reduce using rule 78 (const_val -> STRING_DQ .)
    type_array      reduce using rule 78 (const_val -> STRING_DQ .)
    type_vector     reduce using rule 78 (const_val -> STRING_DQ .)
    type_dict       reduce using rule 78 (const_val -> STRING_DQ .)
    type_generator  reduce using rule 78 (const_val -> STRING_DQ .)
    type_linked_list reduce using rule 78 (const_val -> STRING_DQ .)
    type_doubly_linked_list reduce using rule 78 (const_val -> STRING_DQ .)
    type_deque      reduce using rule 78 (const_val -> STRING_DQ .)
    type_heap       reduce using rule 78 (const_val -> STRING_DQ .)
    type_fibonacci_heap reduce using rule 78 (const_val -> STRING_DQ .)
    type_tree       reduce using rule 78 (const_val -> STRING_DQ .)
    type_trie       reduce using rule 78 (const_val -> STRING_DQ .)
    type_stack      reduce using rule 78 (const_val -> STRING_DQ .)
    type_queue      reduce using rule 78 (const_val -> STRING_DQ .)
    type_binary_search_tree reduce using rule 78 (const_val -> STRING_DQ .)
    type_bitset     reduce using rule 78 (const_val -> STRING_DQ .)
    type_set        reduce using rule 78 (const_val -> STRING_DQ .)
    type_map        reduce using rule 78 (const_val -> STRING_DQ .)
    type_range      reduce using rule 78 (const_val -> STRING_DQ .)
    type_bad_struct reduce using rule 78 (const_val -> STRING_DQ .)
    type_bad_struct2 reduce using rule 78 (const_val -> STRING_DQ .)
    lambda          reduce using rule 78 (const_val -> STRING_DQ .)
    pass            reduce using rule 78 (const_val -> STRING_DQ .)
    else            reduce using rule 78 (const_val -> STRING_DQ .)
    return          reduce using rule 78 (const_val -> STRING_DQ .)
    del             reduce using rule 78 (const_val -> STRING_DQ .)
    for             reduce using rule 78 (const_val -> STRING_DQ .)
    if              reduce using rule 78 (const_val -> STRING_DQ .)
    elif            reduce using rule 78 (const_val -> STRING_DQ .)
    operator        reduce using rule 78 (const_val -> STRING_DQ .)
    struct          reduce using rule 78 (const_val -> STRING_DQ .)
    while           reduce using rule 78 (const_val -> STRING_DQ .)
    func            reduce using rule 78 (const_val -> STRING_DQ .)
    $end            reduce using rule 78 (const_val -> STRING_DQ .)
    }               reduce using rule 78 (const_val -> STRING_DQ .)
    operator_inner  reduce using rule 78 (const_val -> STRING_DQ .)
    {               reduce using rule 78 (const_val -> STRING_DQ .)
    )               reduce using rule 78 (const_val -> STRING_DQ .)
    ,               reduce using rule 78 (const_val -> STRING_DQ .)


state 50

    (79) const_val -> true .

    operator_add    reduce using rule 79 (const_val -> true .)
    operator_sub    reduce using rule 79 (const_val -> true .)
    operator_mul    reduce using rule 79 (const_val -> true .)
    operator_div    reduce using rule 79 (const_val -> true .)
    operator_trudiv reduce using rule 79 (const_val -> true .)
    operator_pow    reduce using rule 79 (const_val -> true .)
    operator_join   reduce using rule 79 (const_val -> true .)
    operator_split  reduce using rule 79 (const_val -> true .)
    operator_scan   reduce using rule 79 (const_val -> true .)
    operator_reduc  reduce using rule 79 (const_val -> true .)
    operator_bitand reduce using rule 79 (const_val -> true .)
    operator_bitor  reduce using rule 79 (const_val -> true .)
    operator_bitxor reduce using rule 79 (const_val -> true .)
    operator_bitshiftleft reduce using rule 79 (const_val -> true .)
    operator_bitshiftright reduce using rule 79 (const_val -> true .)
    operator_and    reduce using rule 79 (const_val -> true .)
    operator_or     reduce using rule 79 (const_val -> true .)
    operator_xor    reduce using rule 79 (const_val -> true .)
    operator_contains reduce using rule 79 (const_val -> true .)
    operator_incr   reduce using rule 79 (const_val -> true .)
    operator_decr   reduce using rule 79 (const_val -> true .)
    operator_outer  reduce using rule 79 (const_val -> true .)
    operator_rotate reduce using rule 79 (const_val -> true .)
    operator_apply  reduce using rule 79 (const_val -> true .)
    operator_compose reduce using rule 79 (const_val -> true .)
    operator_over   reduce using rule 79 (const_val -> true .)
    operator_map    reduce using rule 79 (const_val -> true .)
    operator_less_than reduce using rule 79 (const_val -> true .)
    operator_less_than_equals reduce using rule 79 (const_val -> true .)
    operator_greater_than reduce using rule 79 (const_val -> true .)
    operator_greater_than_equals reduce using rule 79 (const_val -> true .)
    operator_equals reduce using rule 79 (const_val -> true .)
    operator_not_equals reduce using rule 79 (const_val -> true .)
    operator_smallest reduce using rule 79 (const_val -> true .)
    operator_greatest reduce using rule 79 (const_val -> true .)
    operator_goodname reduce using rule 79 (const_val -> true .)
    operator_bitnot reduce using rule 79 (const_val -> true .)
    operator_not    reduce using rule 79 (const_val -> true .)
    operator_reverse reduce using rule 79 (const_val -> true .)
    operator_sorted_incr reduce using rule 79 (const_val -> true .)
    operator_sorted_decr reduce using rule 79 (const_val -> true .)
    operator_s_combinator reduce using rule 79 (const_val -> true .)
    operator_s2_combinator reduce using rule 79 (const_val -> true .)
    operator_goodname2 reduce using rule 79 (const_val -> true .)
    VAR             reduce using rule 79 (const_val -> true .)
    FLOAT           reduce using rule 79 (const_val -> true .)
    NUM             reduce using rule 79 (const_val -> true .)
    NULL            reduce using rule 79 (const_val -> true .)
    STRING_3SQ      reduce using rule 79 (const_val -> true .)
    STRING_3DQ      reduce using rule 79 (const_val -> true .)
    STRING_SQ       reduce using rule 79 (const_val -> true .)
    STRING_DQ       reduce using rule 79 (const_val -> true .)
    true            reduce using rule 79 (const_val -> true .)
    false           reduce using rule 79 (const_val -> true .)
    type_type       reduce using rule 79 (const_val -> true .)
    type_num        reduce using rule 79 (const_val -> true .)
    type_any        reduce using rule 79 (const_val -> true .)
    type_u64        reduce using rule 79 (const_val -> true .)
    type_u32        reduce using rule 79 (const_val -> true .)
    type_u16        reduce using rule 79 (const_val -> true .)
    type_u8         reduce using rule 79 (const_val -> true .)
    type_i64        reduce using rule 79 (const_val -> true .)
    type_i32        reduce using rule 79 (const_val -> true .)
    type_i16        reduce using rule 79 (const_val -> true .)
    type_i8         reduce using rule 79 (const_val -> true .)
    type_f32        reduce using rule 79 (const_val -> true .)
    type_f64        reduce using rule 79 (const_val -> true .)
    type_str        reduce using rule 79 (const_val -> true .)
    type_list       reduce using rule 79 (const_val -> true .)
    type_tuple      reduce using rule 79 (const_val -> true .)
    type_array      reduce using rule 79 (const_val -> true .)
    type_vector     reduce using rule 79 (const_val -> true .)
    type_dict       reduce using rule 79 (const_val -> true .)
    type_generator  reduce using rule 79 (const_val -> true .)
    type_linked_list reduce using rule 79 (const_val -> true .)
    type_doubly_linked_list reduce using rule 79 (const_val -> true .)
    type_deque      reduce using rule 79 (const_val -> true .)
    type_heap       reduce using rule 79 (const_val -> true .)
    type_fibonacci_heap reduce using rule 79 (const_val -> true .)
    type_tree       reduce using rule 79 (const_val -> true .)
    type_trie       reduce using rule 79 (const_val -> true .)
    type_stack      reduce using rule 79 (const_val -> true .)
    type_queue      reduce using rule 79 (const_val -> true .)
    type_binary_search_tree reduce using rule 79 (const_val -> true .)
    type_bitset     reduce using rule 79 (const_val -> true .)
    type_set        reduce using rule 79 (const_val -> true .)
    type_map        reduce using rule 79 (const_val -> true .)
    type_range      reduce using rule 79 (const_val -> true .)
    type_bad_struct reduce using rule 79 (const_val -> true .)
    type_bad_struct2 reduce using rule 79 (const_val -> true .)
    lambda          reduce using rule 79 (const_val -> true .)
    pass            reduce using rule 79 (const_val -> true .)
    else            reduce using rule 79 (const_val -> true .)
    return          reduce using rule 79 (const_val -> true .)
    del             reduce using rule 79 (const_val -> true .)
    for             reduce using rule 79 (const_val -> true .)
    if              reduce using rule 79 (const_val -> true .)
    elif            reduce using rule 79 (const_val -> true .)
    operator        reduce using rule 79 (const_val -> true .)
    struct          reduce using rule 79 (const_val -> true .)
    while           reduce using rule 79 (const_val -> true .)
    func            reduce using rule 79 (const_val -> true .)
    $end            reduce using rule 79 (const_val -> true .)
    }               reduce using rule 79 (const_val -> true .)
    operator_inner  reduce using rule 79 (const_val -> true .)
    {               reduce using rule 79 (const_val -> true .)
    )               reduce using rule 79 (const_val -> true .)
    ,               reduce using rule 79 (const_val -> true .)


state 51

    (80) const_val -> false .

    operator_add    reduce using rule 80 (const_val -> false .)
    operator_sub    reduce using rule 80 (const_val -> false .)
    operator_mul    reduce using rule 80 (const_val -> false .)
    operator_div    reduce using rule 80 (const_val -> false .)
    operator_trudiv reduce using rule 80 (const_val -> false .)
    operator_pow    reduce using rule 80 (const_val -> false .)
    operator_join   reduce using rule 80 (const_val -> false .)
    operator_split  reduce using rule 80 (const_val -> false .)
    operator_scan   reduce using rule 80 (const_val -> false .)
    operator_reduc  reduce using rule 80 (const_val -> false .)
    operator_bitand reduce using rule 80 (const_val -> false .)
    operator_bitor  reduce using rule 80 (const_val -> false .)
    operator_bitxor reduce using rule 80 (const_val -> false .)
    operator_bitshiftleft reduce using rule 80 (const_val -> false .)
    operator_bitshiftright reduce using rule 80 (const_val -> false .)
    operator_and    reduce using rule 80 (const_val -> false .)
    operator_or     reduce using rule 80 (const_val -> false .)
    operator_xor    reduce using rule 80 (const_val -> false .)
    operator_contains reduce using rule 80 (const_val -> false .)
    operator_incr   reduce using rule 80 (const_val -> false .)
    operator_decr   reduce using rule 80 (const_val -> false .)
    operator_outer  reduce using rule 80 (const_val -> false .)
    operator_rotate reduce using rule 80 (const_val -> false .)
    operator_apply  reduce using rule 80 (const_val -> false .)
    operator_compose reduce using rule 80 (const_val -> false .)
    operator_over   reduce using rule 80 (const_val -> false .)
    operator_map    reduce using rule 80 (const_val -> false .)
    operator_less_than reduce using rule 80 (const_val -> false .)
    operator_less_than_equals reduce using rule 80 (const_val -> false .)
    operator_greater_than reduce using rule 80 (const_val -> false .)
    operator_greater_than_equals reduce using rule 80 (const_val -> false .)
    operator_equals reduce using rule 80 (const_val -> false .)
    operator_not_equals reduce using rule 80 (const_val -> false .)
    operator_smallest reduce using rule 80 (const_val -> false .)
    operator_greatest reduce using rule 80 (const_val -> false .)
    operator_goodname reduce using rule 80 (const_val -> false .)
    operator_bitnot reduce using rule 80 (const_val -> false .)
    operator_not    reduce using rule 80 (const_val -> false .)
    operator_reverse reduce using rule 80 (const_val -> false .)
    operator_sorted_incr reduce using rule 80 (const_val -> false .)
    operator_sorted_decr reduce using rule 80 (const_val -> false .)
    operator_s_combinator reduce using rule 80 (const_val -> false .)
    operator_s2_combinator reduce using rule 80 (const_val -> false .)
    operator_goodname2 reduce using rule 80 (const_val -> false .)
    VAR             reduce using rule 80 (const_val -> false .)
    FLOAT           reduce using rule 80 (const_val -> false .)
    NUM             reduce using rule 80 (const_val -> false .)
    NULL            reduce using rule 80 (const_val -> false .)
    STRING_3SQ      reduce using rule 80 (const_val -> false .)
    STRING_3DQ      reduce using rule 80 (const_val -> false .)
    STRING_SQ       reduce using rule 80 (const_val -> false .)
    STRING_DQ       reduce using rule 80 (const_val -> false .)
    true            reduce using rule 80 (const_val -> false .)
    false           reduce using rule 80 (const_val -> false .)
    type_type       reduce using rule 80 (const_val -> false .)
    type_num        reduce using rule 80 (const_val -> false .)
    type_any        reduce using rule 80 (const_val -> false .)
    type_u64        reduce using rule 80 (const_val -> false .)
    type_u32        reduce using rule 80 (const_val -> false .)
    type_u16        reduce using rule 80 (const_val -> false .)
    type_u8         reduce using rule 80 (const_val -> false .)
    type_i64        reduce using rule 80 (const_val -> false .)
    type_i32        reduce using rule 80 (const_val -> false .)
    type_i16        reduce using rule 80 (const_val -> false .)
    type_i8         reduce using rule 80 (const_val -> false .)
    type_f32        reduce using rule 80 (const_val -> false .)
    type_f64        reduce using rule 80 (const_val -> false .)
    type_str        reduce using rule 80 (const_val -> false .)
    type_list       reduce using rule 80 (const_val -> false .)
    type_tuple      reduce using rule 80 (const_val -> false .)
    type_array      reduce using rule 80 (const_val -> false .)
    type_vector     reduce using rule 80 (const_val -> false .)
    type_dict       reduce using rule 80 (const_val -> false .)
    type_generator  reduce using rule 80 (const_val -> false .)
    type_linked_list reduce using rule 80 (const_val -> false .)
    type_doubly_linked_list reduce using rule 80 (const_val -> false .)
    type_deque      reduce using rule 80 (const_val -> false .)
    type_heap       reduce using rule 80 (const_val -> false .)
    type_fibonacci_heap reduce using rule 80 (const_val -> false .)
    type_tree       reduce using rule 80 (const_val -> false .)
    type_trie       reduce using rule 80 (const_val -> false .)
    type_stack      reduce using rule 80 (const_val -> false .)
    type_queue      reduce using rule 80 (const_val -> false .)
    type_binary_search_tree reduce using rule 80 (const_val -> false .)
    type_bitset     reduce using rule 80 (const_val -> false .)
    type_set        reduce using rule 80 (const_val -> false .)
    type_map        reduce using rule 80 (const_val -> false .)
    type_range      reduce using rule 80 (const_val -> false .)
    type_bad_struct reduce using rule 80 (const_val -> false .)
    type_bad_struct2 reduce using rule 80 (const_val -> false .)
    lambda          reduce using rule 80 (const_val -> false .)
    pass            reduce using rule 80 (const_val -> false .)
    else            reduce using rule 80 (const_val -> false .)
    return          reduce using rule 80 (const_val -> false .)
    del             reduce using rule 80 (const_val -> false .)
    for             reduce using rule 80 (const_val -> false .)
    if              reduce using rule 80 (const_val -> false .)
    elif            reduce using rule 80 (const_val -> false .)
    operator        reduce using rule 80 (const_val -> false .)
    struct          reduce using rule 80 (const_val -> false .)
    while           reduce using rule 80 (const_val -> false .)
    func            reduce using rule 80 (const_val -> false .)
    $end            reduce using rule 80 (const_val -> false .)
    }               reduce using rule 80 (const_val -> false .)
    operator_inner  reduce using rule 80 (const_val -> false .)
    {               reduce using rule 80 (const_val -> false .)
    )               reduce using rule 80 (const_val -> false .)
    ,               reduce using rule 80 (const_val -> false .)


state 52

    (81) return_val -> type_type . ( arguments )
    (5) TYPE -> type_type .

    (               shift and go to state 223
    VAR             reduce using rule 5 (TYPE -> type_type .)


state 53

    (82) return_val -> type_num . ( arguments )
    (6) TYPE -> type_num .

    (               shift and go to state 224
    VAR             reduce using rule 6 (TYPE -> type_num .)


state 54

    (83) return_val -> type_any . ( arguments )
    (7) TYPE -> type_any .

    (               shift and go to state 225
    VAR             reduce using rule 7 (TYPE -> type_any .)


state 55

    (84) return_val -> type_u64 . ( arguments )
    (8) TYPE -> type_u64 .

    (               shift and go to state 226
    VAR             reduce using rule 8 (TYPE -> type_u64 .)


state 56

    (85) return_val -> type_u32 . ( arguments )
    (9) TYPE -> type_u32 .

    (               shift and go to state 227
    VAR             reduce using rule 9 (TYPE -> type_u32 .)


state 57

    (86) return_val -> type_u16 . ( arguments )
    (10) TYPE -> type_u16 .

    (               shift and go to state 228
    VAR             reduce using rule 10 (TYPE -> type_u16 .)


state 58

    (87) return_val -> type_u8 . ( arguments )
    (11) TYPE -> type_u8 .

    (               shift and go to state 229
    VAR             reduce using rule 11 (TYPE -> type_u8 .)


state 59

    (88) return_val -> type_i64 . ( arguments )
    (12) TYPE -> type_i64 .

    (               shift and go to state 230
    VAR             reduce using rule 12 (TYPE -> type_i64 .)


state 60

    (89) return_val -> type_i32 . ( arguments )
    (13) TYPE -> type_i32 .

    (               shift and go to state 231
    VAR             reduce using rule 13 (TYPE -> type_i32 .)


state 61

    (90) return_val -> type_i16 . ( arguments )
    (14) TYPE -> type_i16 .

    (               shift and go to state 232
    VAR             reduce using rule 14 (TYPE -> type_i16 .)


state 62

    (91) return_val -> type_i8 . ( arguments )
    (15) TYPE -> type_i8 .

    (               shift and go to state 233
    VAR             reduce using rule 15 (TYPE -> type_i8 .)


state 63

    (92) return_val -> type_f32 . ( arguments )
    (16) TYPE -> type_f32 .

    (               shift and go to state 234
    VAR             reduce using rule 16 (TYPE -> type_f32 .)


state 64

    (93) return_val -> type_f64 . ( arguments )
    (17) TYPE -> type_f64 .

    (               shift and go to state 235
    VAR             reduce using rule 17 (TYPE -> type_f64 .)


state 65

    (94) return_val -> type_str . ( arguments )
    (18) TYPE -> type_str .

    (               shift and go to state 236
    VAR             reduce using rule 18 (TYPE -> type_str .)


state 66

    (95) return_val -> type_list . ( arguments )
    (19) TYPE -> type_list .

    (               shift and go to state 237
    VAR             reduce using rule 19 (TYPE -> type_list .)


state 67

    (96) return_val -> type_tuple . ( arguments )
    (20) TYPE -> type_tuple .

    (               shift and go to state 238
    VAR             reduce using rule 20 (TYPE -> type_tuple .)


state 68

    (97) return_val -> type_array . ( arguments )
    (21) TYPE -> type_array .

    (               shift and go to state 239
    VAR             reduce using rule 21 (TYPE -> type_array .)


state 69

    (98) return_val -> type_vector . ( arguments )
    (22) TYPE -> type_vector .

    (               shift and go to state 240
    VAR             reduce using rule 22 (TYPE -> type_vector .)


state 70

    (99) return_val -> type_dict . ( arguments )
    (23) TYPE -> type_dict .

    (               shift and go to state 241
    VAR             reduce using rule 23 (TYPE -> type_dict .)


state 71

    (100) return_val -> type_generator . ( arguments )
    (24) TYPE -> type_generator .

    (               shift and go to state 242
    VAR             reduce using rule 24 (TYPE -> type_generator .)


state 72

    (101) return_val -> type_linked_list . ( arguments )
    (25) TYPE -> type_linked_list .

    (               shift and go to state 243
    VAR             reduce using rule 25 (TYPE -> type_linked_list .)


state 73

    (102) return_val -> type_doubly_linked_list . ( arguments )
    (26) TYPE -> type_doubly_linked_list .

    (               shift and go to state 244
    VAR             reduce using rule 26 (TYPE -> type_doubly_linked_list .)


state 74

    (103) return_val -> type_deque . ( arguments )
    (27) TYPE -> type_deque .

    (               shift and go to state 245
    VAR             reduce using rule 27 (TYPE -> type_deque .)


state 75

    (104) return_val -> type_heap . ( arguments )
    (28) TYPE -> type_heap .

    (               shift and go to state 246
    VAR             reduce using rule 28 (TYPE -> type_heap .)


state 76

    (105) return_val -> type_fibonacci_heap . ( arguments )
    (29) TYPE -> type_fibonacci_heap .

    (               shift and go to state 247
    VAR             reduce using rule 29 (TYPE -> type_fibonacci_heap .)


state 77

    (106) return_val -> type_tree . ( arguments )
    (30) TYPE -> type_tree .

    (               shift and go to state 248
    VAR             reduce using rule 30 (TYPE -> type_tree .)


state 78

    (107) return_val -> type_trie . ( arguments )
    (31) TYPE -> type_trie .

    (               shift and go to state 249
    VAR             reduce using rule 31 (TYPE -> type_trie .)


state 79

    (108) return_val -> type_stack . ( arguments )
    (32) TYPE -> type_stack .

    (               shift and go to state 250
    VAR             reduce using rule 32 (TYPE -> type_stack .)


state 80

    (109) return_val -> type_queue . ( arguments )
    (33) TYPE -> type_queue .

    (               shift and go to state 251
    VAR             reduce using rule 33 (TYPE -> type_queue .)


state 81

    (110) return_val -> type_binary_search_tree . ( arguments )
    (34) TYPE -> type_binary_search_tree .

    (               shift and go to state 252
    VAR             reduce using rule 34 (TYPE -> type_binary_search_tree .)


state 82

    (111) return_val -> type_bitset . ( arguments )
    (35) TYPE -> type_bitset .

    (               shift and go to state 253
    VAR             reduce using rule 35 (TYPE -> type_bitset .)


state 83

    (112) return_val -> type_set . ( arguments )
    (36) TYPE -> type_set .

    (               shift and go to state 254
    VAR             reduce using rule 36 (TYPE -> type_set .)


state 84

    (113) return_val -> type_map . ( arguments )
    (37) TYPE -> type_map .

    (               shift and go to state 255
    VAR             reduce using rule 37 (TYPE -> type_map .)


state 85

    (114) return_val -> type_range . ( arguments )
    (38) TYPE -> type_range .

    (               shift and go to state 256
    VAR             reduce using rule 38 (TYPE -> type_range .)


state 86

    (115) return_val -> type_bad_struct . ( arguments )
    (39) TYPE -> type_bad_struct .

    (               shift and go to state 257
    VAR             reduce using rule 39 (TYPE -> type_bad_struct .)


state 87

    (116) return_val -> type_bad_struct2 . ( arguments )
    (40) TYPE -> type_bad_struct2 .

    (               shift and go to state 258
    VAR             reduce using rule 40 (TYPE -> type_bad_struct2 .)


state 88

    (47) lambda_decl -> lambda . comma_separated_names : expr
    (52) comma_separated_names -> . VAR
    (53) comma_separated_names -> . VAR , comma_separated_names

    VAR             shift and go to state 179

    comma_separated_names          shift and go to state 259

state 89

    (2) stmts -> stmt stmts .

    $end            reduce using rule 2 (stmts -> stmt stmts .)
    }               reduce using rule 2 (stmts -> stmt stmts .)


state 90

    (54) block_stmt -> block_decl { . stmts }
    (1) stmts -> . stmt
    (2) stmts -> . stmt stmts
    (3) stmt -> . block_stmt
    (4) stmt -> . line_stmt
    (54) block_stmt -> . block_decl { stmts }
    (41) line_stmt -> . assign_stmt
    (42) line_stmt -> . expr
    (43) line_stmt -> . pass
    (44) line_stmt -> . return_stmt
    (45) line_stmt -> . del_stmt
    (46) line_stmt -> . declaration_stmt
    (55) block_decl -> . for_decl
    (56) block_decl -> . if_decl
    (57) block_decl -> . else
    (58) block_decl -> . elif_decl
    (59) block_decl -> . operator_decl
    (60) block_decl -> . struct_decl
    (61) block_decl -> . while_decl
    (62) block_decl -> . func_decl
    (50) assign_stmt -> . comma_separated_names = expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (48) return_stmt -> . return expr
    (49) del_stmt -> . del expr
    (51) declaration_stmt -> . TYPE comma_separated_names
    (63) for_decl -> . for comma_separated_names operator_contains expr
    (64) if_decl -> . if expr
    (65) elif_decl -> . elif expr
    (66) operator_decl -> . operator ( arguments )
    (67) struct_decl -> . struct TYPE
    (68) while_decl -> . while expr
    (69) func_decl -> . func VAR ( def_arguments )
    (52) comma_separated_names -> . VAR
    (53) comma_separated_names -> . VAR , comma_separated_names
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr
    (5) TYPE -> . type_type
    (6) TYPE -> . type_num
    (7) TYPE -> . type_any
    (8) TYPE -> . type_u64
    (9) TYPE -> . type_u32
    (10) TYPE -> . type_u16
    (11) TYPE -> . type_u8
    (12) TYPE -> . type_i64
    (13) TYPE -> . type_i32
    (14) TYPE -> . type_i16
    (15) TYPE -> . type_i8
    (16) TYPE -> . type_f32
    (17) TYPE -> . type_f64
    (18) TYPE -> . type_str
    (19) TYPE -> . type_list
    (20) TYPE -> . type_tuple
    (21) TYPE -> . type_array
    (22) TYPE -> . type_vector
    (23) TYPE -> . type_dict
    (24) TYPE -> . type_generator
    (25) TYPE -> . type_linked_list
    (26) TYPE -> . type_doubly_linked_list
    (27) TYPE -> . type_deque
    (28) TYPE -> . type_heap
    (29) TYPE -> . type_fibonacci_heap
    (30) TYPE -> . type_tree
    (31) TYPE -> . type_trie
    (32) TYPE -> . type_stack
    (33) TYPE -> . type_queue
    (34) TYPE -> . type_binary_search_tree
    (35) TYPE -> . type_bitset
    (36) TYPE -> . type_set
    (37) TYPE -> . type_map
    (38) TYPE -> . type_range
    (39) TYPE -> . type_bad_struct
    (40) TYPE -> . type_bad_struct2

    pass            shift and go to state 8
    else            shift and go to state 14
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 30
    return          shift and go to state 33
    del             shift and go to state 34
    for             shift and go to state 36
    if              shift and go to state 37
    elif            shift and go to state 38
    operator        shift and go to state 39
    struct          shift and go to state 40
    while           shift and go to state 41
    func            shift and go to state 42
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 52
    type_num        shift and go to state 53
    type_any        shift and go to state 54
    type_u64        shift and go to state 55
    type_u32        shift and go to state 56
    type_u16        shift and go to state 57
    type_u8         shift and go to state 58
    type_i64        shift and go to state 59
    type_i32        shift and go to state 60
    type_i16        shift and go to state 61
    type_i8         shift and go to state 62
    type_f32        shift and go to state 63
    type_f64        shift and go to state 64
    type_str        shift and go to state 65
    type_list       shift and go to state 66
    type_tuple      shift and go to state 67
    type_array      shift and go to state 68
    type_vector     shift and go to state 69
    type_dict       shift and go to state 70
    type_generator  shift and go to state 71
    type_linked_list shift and go to state 72
    type_doubly_linked_list shift and go to state 73
    type_deque      shift and go to state 74
    type_heap       shift and go to state 75
    type_fibonacci_heap shift and go to state 76
    type_tree       shift and go to state 77
    type_trie       shift and go to state 78
    type_stack      shift and go to state 79
    type_queue      shift and go to state 80
    type_binary_search_tree shift and go to state 81
    type_bitset     shift and go to state 82
    type_set        shift and go to state 83
    type_map        shift and go to state 84
    type_range      shift and go to state 85
    type_bad_struct shift and go to state 86
    type_bad_struct2 shift and go to state 87
    lambda          shift and go to state 88

    block_decl                     shift and go to state 5
    stmts                          shift and go to state 260
    stmt                           shift and go to state 2
    block_stmt                     shift and go to state 3
    line_stmt                      shift and go to state 4
    assign_stmt                    shift and go to state 6
    expr                           shift and go to state 7
    return_stmt                    shift and go to state 9
    del_stmt                       shift and go to state 10
    declaration_stmt               shift and go to state 11
    for_decl                       shift and go to state 12
    if_decl                        shift and go to state 13
    elif_decl                      shift and go to state 15
    operator_decl                  shift and go to state 16
    struct_decl                    shift and go to state 17
    while_decl                     shift and go to state 18
    func_decl                      shift and go to state 19
    comma_separated_names          shift and go to state 20
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32
    TYPE                           shift and go to state 35

state 91

    (142) expr -> expr expr . operator_inner expr expr
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_inner  shift and go to state 261
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 92

    (118) expr -> expr operator_add . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 262
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 93

    (119) expr -> expr operator_sub . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 263
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 94

    (120) expr -> expr operator_mul . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 264
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 95

    (121) expr -> expr operator_div . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 265
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 96

    (122) expr -> expr operator_trudiv . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 266
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 97

    (123) expr -> expr operator_pow . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 267
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 98

    (124) expr -> expr operator_join . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 268
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 99

    (125) expr -> expr operator_split . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 269
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 100

    (126) expr -> expr operator_scan . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 270
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 101

    (127) expr -> expr operator_reduc . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 271
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 102

    (128) expr -> expr operator_bitand . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 272
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 103

    (129) expr -> expr operator_bitor . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 273
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 104

    (130) expr -> expr operator_bitxor . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 274
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 105

    (131) expr -> expr operator_bitshiftleft . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 275
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 106

    (132) expr -> expr operator_bitshiftright . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 276
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 107

    (133) expr -> expr operator_and . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 277
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 108

    (134) expr -> expr operator_or . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 278
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 109

    (135) expr -> expr operator_xor . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 279
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 110

    (136) expr -> expr operator_contains . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 280
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 111

    (139) expr -> expr operator_incr .

    operator_add    reduce using rule 139 (expr -> expr operator_incr .)
    operator_sub    reduce using rule 139 (expr -> expr operator_incr .)
    operator_mul    reduce using rule 139 (expr -> expr operator_incr .)
    operator_div    reduce using rule 139 (expr -> expr operator_incr .)
    operator_trudiv reduce using rule 139 (expr -> expr operator_incr .)
    operator_pow    reduce using rule 139 (expr -> expr operator_incr .)
    operator_join   reduce using rule 139 (expr -> expr operator_incr .)
    operator_split  reduce using rule 139 (expr -> expr operator_incr .)
    operator_scan   reduce using rule 139 (expr -> expr operator_incr .)
    operator_reduc  reduce using rule 139 (expr -> expr operator_incr .)
    operator_bitand reduce using rule 139 (expr -> expr operator_incr .)
    operator_bitor  reduce using rule 139 (expr -> expr operator_incr .)
    operator_bitxor reduce using rule 139 (expr -> expr operator_incr .)
    operator_bitshiftleft reduce using rule 139 (expr -> expr operator_incr .)
    operator_bitshiftright reduce using rule 139 (expr -> expr operator_incr .)
    operator_and    reduce using rule 139 (expr -> expr operator_incr .)
    operator_or     reduce using rule 139 (expr -> expr operator_incr .)
    operator_xor    reduce using rule 139 (expr -> expr operator_incr .)
    operator_contains reduce using rule 139 (expr -> expr operator_incr .)
    operator_incr   reduce using rule 139 (expr -> expr operator_incr .)
    operator_decr   reduce using rule 139 (expr -> expr operator_incr .)
    operator_outer  reduce using rule 139 (expr -> expr operator_incr .)
    operator_rotate reduce using rule 139 (expr -> expr operator_incr .)
    operator_apply  reduce using rule 139 (expr -> expr operator_incr .)
    operator_compose reduce using rule 139 (expr -> expr operator_incr .)
    operator_over   reduce using rule 139 (expr -> expr operator_incr .)
    operator_map    reduce using rule 139 (expr -> expr operator_incr .)
    operator_less_than reduce using rule 139 (expr -> expr operator_incr .)
    operator_less_than_equals reduce using rule 139 (expr -> expr operator_incr .)
    operator_greater_than reduce using rule 139 (expr -> expr operator_incr .)
    operator_greater_than_equals reduce using rule 139 (expr -> expr operator_incr .)
    operator_equals reduce using rule 139 (expr -> expr operator_incr .)
    operator_not_equals reduce using rule 139 (expr -> expr operator_incr .)
    operator_smallest reduce using rule 139 (expr -> expr operator_incr .)
    operator_greatest reduce using rule 139 (expr -> expr operator_incr .)
    operator_goodname reduce using rule 139 (expr -> expr operator_incr .)
    operator_bitnot reduce using rule 139 (expr -> expr operator_incr .)
    operator_not    reduce using rule 139 (expr -> expr operator_incr .)
    operator_reverse reduce using rule 139 (expr -> expr operator_incr .)
    operator_sorted_incr reduce using rule 139 (expr -> expr operator_incr .)
    operator_sorted_decr reduce using rule 139 (expr -> expr operator_incr .)
    operator_s_combinator reduce using rule 139 (expr -> expr operator_incr .)
    operator_s2_combinator reduce using rule 139 (expr -> expr operator_incr .)
    operator_goodname2 reduce using rule 139 (expr -> expr operator_incr .)
    VAR             reduce using rule 139 (expr -> expr operator_incr .)
    FLOAT           reduce using rule 139 (expr -> expr operator_incr .)
    NUM             reduce using rule 139 (expr -> expr operator_incr .)
    NULL            reduce using rule 139 (expr -> expr operator_incr .)
    STRING_3SQ      reduce using rule 139 (expr -> expr operator_incr .)
    STRING_3DQ      reduce using rule 139 (expr -> expr operator_incr .)
    STRING_SQ       reduce using rule 139 (expr -> expr operator_incr .)
    STRING_DQ       reduce using rule 139 (expr -> expr operator_incr .)
    true            reduce using rule 139 (expr -> expr operator_incr .)
    false           reduce using rule 139 (expr -> expr operator_incr .)
    type_type       reduce using rule 139 (expr -> expr operator_incr .)
    type_num        reduce using rule 139 (expr -> expr operator_incr .)
    type_any        reduce using rule 139 (expr -> expr operator_incr .)
    type_u64        reduce using rule 139 (expr -> expr operator_incr .)
    type_u32        reduce using rule 139 (expr -> expr operator_incr .)
    type_u16        reduce using rule 139 (expr -> expr operator_incr .)
    type_u8         reduce using rule 139 (expr -> expr operator_incr .)
    type_i64        reduce using rule 139 (expr -> expr operator_incr .)
    type_i32        reduce using rule 139 (expr -> expr operator_incr .)
    type_i16        reduce using rule 139 (expr -> expr operator_incr .)
    type_i8         reduce using rule 139 (expr -> expr operator_incr .)
    type_f32        reduce using rule 139 (expr -> expr operator_incr .)
    type_f64        reduce using rule 139 (expr -> expr operator_incr .)
    type_str        reduce using rule 139 (expr -> expr operator_incr .)
    type_list       reduce using rule 139 (expr -> expr operator_incr .)
    type_tuple      reduce using rule 139 (expr -> expr operator_incr .)
    type_array      reduce using rule 139 (expr -> expr operator_incr .)
    type_vector     reduce using rule 139 (expr -> expr operator_incr .)
    type_dict       reduce using rule 139 (expr -> expr operator_incr .)
    type_generator  reduce using rule 139 (expr -> expr operator_incr .)
    type_linked_list reduce using rule 139 (expr -> expr operator_incr .)
    type_doubly_linked_list reduce using rule 139 (expr -> expr operator_incr .)
    type_deque      reduce using rule 139 (expr -> expr operator_incr .)
    type_heap       reduce using rule 139 (expr -> expr operator_incr .)
    type_fibonacci_heap reduce using rule 139 (expr -> expr operator_incr .)
    type_tree       reduce using rule 139 (expr -> expr operator_incr .)
    type_trie       reduce using rule 139 (expr -> expr operator_incr .)
    type_stack      reduce using rule 139 (expr -> expr operator_incr .)
    type_queue      reduce using rule 139 (expr -> expr operator_incr .)
    type_binary_search_tree reduce using rule 139 (expr -> expr operator_incr .)
    type_bitset     reduce using rule 139 (expr -> expr operator_incr .)
    type_set        reduce using rule 139 (expr -> expr operator_incr .)
    type_map        reduce using rule 139 (expr -> expr operator_incr .)
    type_range      reduce using rule 139 (expr -> expr operator_incr .)
    type_bad_struct reduce using rule 139 (expr -> expr operator_incr .)
    type_bad_struct2 reduce using rule 139 (expr -> expr operator_incr .)
    lambda          reduce using rule 139 (expr -> expr operator_incr .)
    pass            reduce using rule 139 (expr -> expr operator_incr .)
    else            reduce using rule 139 (expr -> expr operator_incr .)
    return          reduce using rule 139 (expr -> expr operator_incr .)
    del             reduce using rule 139 (expr -> expr operator_incr .)
    for             reduce using rule 139 (expr -> expr operator_incr .)
    if              reduce using rule 139 (expr -> expr operator_incr .)
    elif            reduce using rule 139 (expr -> expr operator_incr .)
    operator        reduce using rule 139 (expr -> expr operator_incr .)
    struct          reduce using rule 139 (expr -> expr operator_incr .)
    while           reduce using rule 139 (expr -> expr operator_incr .)
    func            reduce using rule 139 (expr -> expr operator_incr .)
    $end            reduce using rule 139 (expr -> expr operator_incr .)
    }               reduce using rule 139 (expr -> expr operator_incr .)
    operator_inner  reduce using rule 139 (expr -> expr operator_incr .)
    {               reduce using rule 139 (expr -> expr operator_incr .)
    )               reduce using rule 139 (expr -> expr operator_incr .)
    ,               reduce using rule 139 (expr -> expr operator_incr .)


state 112

    (140) expr -> expr operator_decr .

    operator_add    reduce using rule 140 (expr -> expr operator_decr .)
    operator_sub    reduce using rule 140 (expr -> expr operator_decr .)
    operator_mul    reduce using rule 140 (expr -> expr operator_decr .)
    operator_div    reduce using rule 140 (expr -> expr operator_decr .)
    operator_trudiv reduce using rule 140 (expr -> expr operator_decr .)
    operator_pow    reduce using rule 140 (expr -> expr operator_decr .)
    operator_join   reduce using rule 140 (expr -> expr operator_decr .)
    operator_split  reduce using rule 140 (expr -> expr operator_decr .)
    operator_scan   reduce using rule 140 (expr -> expr operator_decr .)
    operator_reduc  reduce using rule 140 (expr -> expr operator_decr .)
    operator_bitand reduce using rule 140 (expr -> expr operator_decr .)
    operator_bitor  reduce using rule 140 (expr -> expr operator_decr .)
    operator_bitxor reduce using rule 140 (expr -> expr operator_decr .)
    operator_bitshiftleft reduce using rule 140 (expr -> expr operator_decr .)
    operator_bitshiftright reduce using rule 140 (expr -> expr operator_decr .)
    operator_and    reduce using rule 140 (expr -> expr operator_decr .)
    operator_or     reduce using rule 140 (expr -> expr operator_decr .)
    operator_xor    reduce using rule 140 (expr -> expr operator_decr .)
    operator_contains reduce using rule 140 (expr -> expr operator_decr .)
    operator_incr   reduce using rule 140 (expr -> expr operator_decr .)
    operator_decr   reduce using rule 140 (expr -> expr operator_decr .)
    operator_outer  reduce using rule 140 (expr -> expr operator_decr .)
    operator_rotate reduce using rule 140 (expr -> expr operator_decr .)
    operator_apply  reduce using rule 140 (expr -> expr operator_decr .)
    operator_compose reduce using rule 140 (expr -> expr operator_decr .)
    operator_over   reduce using rule 140 (expr -> expr operator_decr .)
    operator_map    reduce using rule 140 (expr -> expr operator_decr .)
    operator_less_than reduce using rule 140 (expr -> expr operator_decr .)
    operator_less_than_equals reduce using rule 140 (expr -> expr operator_decr .)
    operator_greater_than reduce using rule 140 (expr -> expr operator_decr .)
    operator_greater_than_equals reduce using rule 140 (expr -> expr operator_decr .)
    operator_equals reduce using rule 140 (expr -> expr operator_decr .)
    operator_not_equals reduce using rule 140 (expr -> expr operator_decr .)
    operator_smallest reduce using rule 140 (expr -> expr operator_decr .)
    operator_greatest reduce using rule 140 (expr -> expr operator_decr .)
    operator_goodname reduce using rule 140 (expr -> expr operator_decr .)
    operator_bitnot reduce using rule 140 (expr -> expr operator_decr .)
    operator_not    reduce using rule 140 (expr -> expr operator_decr .)
    operator_reverse reduce using rule 140 (expr -> expr operator_decr .)
    operator_sorted_incr reduce using rule 140 (expr -> expr operator_decr .)
    operator_sorted_decr reduce using rule 140 (expr -> expr operator_decr .)
    operator_s_combinator reduce using rule 140 (expr -> expr operator_decr .)
    operator_s2_combinator reduce using rule 140 (expr -> expr operator_decr .)
    operator_goodname2 reduce using rule 140 (expr -> expr operator_decr .)
    VAR             reduce using rule 140 (expr -> expr operator_decr .)
    FLOAT           reduce using rule 140 (expr -> expr operator_decr .)
    NUM             reduce using rule 140 (expr -> expr operator_decr .)
    NULL            reduce using rule 140 (expr -> expr operator_decr .)
    STRING_3SQ      reduce using rule 140 (expr -> expr operator_decr .)
    STRING_3DQ      reduce using rule 140 (expr -> expr operator_decr .)
    STRING_SQ       reduce using rule 140 (expr -> expr operator_decr .)
    STRING_DQ       reduce using rule 140 (expr -> expr operator_decr .)
    true            reduce using rule 140 (expr -> expr operator_decr .)
    false           reduce using rule 140 (expr -> expr operator_decr .)
    type_type       reduce using rule 140 (expr -> expr operator_decr .)
    type_num        reduce using rule 140 (expr -> expr operator_decr .)
    type_any        reduce using rule 140 (expr -> expr operator_decr .)
    type_u64        reduce using rule 140 (expr -> expr operator_decr .)
    type_u32        reduce using rule 140 (expr -> expr operator_decr .)
    type_u16        reduce using rule 140 (expr -> expr operator_decr .)
    type_u8         reduce using rule 140 (expr -> expr operator_decr .)
    type_i64        reduce using rule 140 (expr -> expr operator_decr .)
    type_i32        reduce using rule 140 (expr -> expr operator_decr .)
    type_i16        reduce using rule 140 (expr -> expr operator_decr .)
    type_i8         reduce using rule 140 (expr -> expr operator_decr .)
    type_f32        reduce using rule 140 (expr -> expr operator_decr .)
    type_f64        reduce using rule 140 (expr -> expr operator_decr .)
    type_str        reduce using rule 140 (expr -> expr operator_decr .)
    type_list       reduce using rule 140 (expr -> expr operator_decr .)
    type_tuple      reduce using rule 140 (expr -> expr operator_decr .)
    type_array      reduce using rule 140 (expr -> expr operator_decr .)
    type_vector     reduce using rule 140 (expr -> expr operator_decr .)
    type_dict       reduce using rule 140 (expr -> expr operator_decr .)
    type_generator  reduce using rule 140 (expr -> expr operator_decr .)
    type_linked_list reduce using rule 140 (expr -> expr operator_decr .)
    type_doubly_linked_list reduce using rule 140 (expr -> expr operator_decr .)
    type_deque      reduce using rule 140 (expr -> expr operator_decr .)
    type_heap       reduce using rule 140 (expr -> expr operator_decr .)
    type_fibonacci_heap reduce using rule 140 (expr -> expr operator_decr .)
    type_tree       reduce using rule 140 (expr -> expr operator_decr .)
    type_trie       reduce using rule 140 (expr -> expr operator_decr .)
    type_stack      reduce using rule 140 (expr -> expr operator_decr .)
    type_queue      reduce using rule 140 (expr -> expr operator_decr .)
    type_binary_search_tree reduce using rule 140 (expr -> expr operator_decr .)
    type_bitset     reduce using rule 140 (expr -> expr operator_decr .)
    type_set        reduce using rule 140 (expr -> expr operator_decr .)
    type_map        reduce using rule 140 (expr -> expr operator_decr .)
    type_range      reduce using rule 140 (expr -> expr operator_decr .)
    type_bad_struct reduce using rule 140 (expr -> expr operator_decr .)
    type_bad_struct2 reduce using rule 140 (expr -> expr operator_decr .)
    lambda          reduce using rule 140 (expr -> expr operator_decr .)
    pass            reduce using rule 140 (expr -> expr operator_decr .)
    else            reduce using rule 140 (expr -> expr operator_decr .)
    return          reduce using rule 140 (expr -> expr operator_decr .)
    del             reduce using rule 140 (expr -> expr operator_decr .)
    for             reduce using rule 140 (expr -> expr operator_decr .)
    if              reduce using rule 140 (expr -> expr operator_decr .)
    elif            reduce using rule 140 (expr -> expr operator_decr .)
    operator        reduce using rule 140 (expr -> expr operator_decr .)
    struct          reduce using rule 140 (expr -> expr operator_decr .)
    while           reduce using rule 140 (expr -> expr operator_decr .)
    func            reduce using rule 140 (expr -> expr operator_decr .)
    $end            reduce using rule 140 (expr -> expr operator_decr .)
    }               reduce using rule 140 (expr -> expr operator_decr .)
    operator_inner  reduce using rule 140 (expr -> expr operator_decr .)
    {               reduce using rule 140 (expr -> expr operator_decr .)
    )               reduce using rule 140 (expr -> expr operator_decr .)
    ,               reduce using rule 140 (expr -> expr operator_decr .)


state 113

    (141) expr -> expr operator_outer . expr expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 281
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 114

    (144) expr -> expr operator_rotate . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 282
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 115

    (145) expr -> expr operator_apply . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 283
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 116

    (146) expr -> expr operator_compose . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 284
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 117

    (147) expr -> expr operator_over . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 285
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 118

    (148) expr -> expr operator_map .

    operator_add    reduce using rule 148 (expr -> expr operator_map .)
    operator_sub    reduce using rule 148 (expr -> expr operator_map .)
    operator_mul    reduce using rule 148 (expr -> expr operator_map .)
    operator_div    reduce using rule 148 (expr -> expr operator_map .)
    operator_trudiv reduce using rule 148 (expr -> expr operator_map .)
    operator_pow    reduce using rule 148 (expr -> expr operator_map .)
    operator_join   reduce using rule 148 (expr -> expr operator_map .)
    operator_split  reduce using rule 148 (expr -> expr operator_map .)
    operator_scan   reduce using rule 148 (expr -> expr operator_map .)
    operator_reduc  reduce using rule 148 (expr -> expr operator_map .)
    operator_bitand reduce using rule 148 (expr -> expr operator_map .)
    operator_bitor  reduce using rule 148 (expr -> expr operator_map .)
    operator_bitxor reduce using rule 148 (expr -> expr operator_map .)
    operator_bitshiftleft reduce using rule 148 (expr -> expr operator_map .)
    operator_bitshiftright reduce using rule 148 (expr -> expr operator_map .)
    operator_and    reduce using rule 148 (expr -> expr operator_map .)
    operator_or     reduce using rule 148 (expr -> expr operator_map .)
    operator_xor    reduce using rule 148 (expr -> expr operator_map .)
    operator_contains reduce using rule 148 (expr -> expr operator_map .)
    operator_incr   reduce using rule 148 (expr -> expr operator_map .)
    operator_decr   reduce using rule 148 (expr -> expr operator_map .)
    operator_outer  reduce using rule 148 (expr -> expr operator_map .)
    operator_rotate reduce using rule 148 (expr -> expr operator_map .)
    operator_apply  reduce using rule 148 (expr -> expr operator_map .)
    operator_compose reduce using rule 148 (expr -> expr operator_map .)
    operator_over   reduce using rule 148 (expr -> expr operator_map .)
    operator_map    reduce using rule 148 (expr -> expr operator_map .)
    operator_less_than reduce using rule 148 (expr -> expr operator_map .)
    operator_less_than_equals reduce using rule 148 (expr -> expr operator_map .)
    operator_greater_than reduce using rule 148 (expr -> expr operator_map .)
    operator_greater_than_equals reduce using rule 148 (expr -> expr operator_map .)
    operator_equals reduce using rule 148 (expr -> expr operator_map .)
    operator_not_equals reduce using rule 148 (expr -> expr operator_map .)
    operator_smallest reduce using rule 148 (expr -> expr operator_map .)
    operator_greatest reduce using rule 148 (expr -> expr operator_map .)
    operator_goodname reduce using rule 148 (expr -> expr operator_map .)
    operator_bitnot reduce using rule 148 (expr -> expr operator_map .)
    operator_not    reduce using rule 148 (expr -> expr operator_map .)
    operator_reverse reduce using rule 148 (expr -> expr operator_map .)
    operator_sorted_incr reduce using rule 148 (expr -> expr operator_map .)
    operator_sorted_decr reduce using rule 148 (expr -> expr operator_map .)
    operator_s_combinator reduce using rule 148 (expr -> expr operator_map .)
    operator_s2_combinator reduce using rule 148 (expr -> expr operator_map .)
    operator_goodname2 reduce using rule 148 (expr -> expr operator_map .)
    VAR             reduce using rule 148 (expr -> expr operator_map .)
    FLOAT           reduce using rule 148 (expr -> expr operator_map .)
    NUM             reduce using rule 148 (expr -> expr operator_map .)
    NULL            reduce using rule 148 (expr -> expr operator_map .)
    STRING_3SQ      reduce using rule 148 (expr -> expr operator_map .)
    STRING_3DQ      reduce using rule 148 (expr -> expr operator_map .)
    STRING_SQ       reduce using rule 148 (expr -> expr operator_map .)
    STRING_DQ       reduce using rule 148 (expr -> expr operator_map .)
    true            reduce using rule 148 (expr -> expr operator_map .)
    false           reduce using rule 148 (expr -> expr operator_map .)
    type_type       reduce using rule 148 (expr -> expr operator_map .)
    type_num        reduce using rule 148 (expr -> expr operator_map .)
    type_any        reduce using rule 148 (expr -> expr operator_map .)
    type_u64        reduce using rule 148 (expr -> expr operator_map .)
    type_u32        reduce using rule 148 (expr -> expr operator_map .)
    type_u16        reduce using rule 148 (expr -> expr operator_map .)
    type_u8         reduce using rule 148 (expr -> expr operator_map .)
    type_i64        reduce using rule 148 (expr -> expr operator_map .)
    type_i32        reduce using rule 148 (expr -> expr operator_map .)
    type_i16        reduce using rule 148 (expr -> expr operator_map .)
    type_i8         reduce using rule 148 (expr -> expr operator_map .)
    type_f32        reduce using rule 148 (expr -> expr operator_map .)
    type_f64        reduce using rule 148 (expr -> expr operator_map .)
    type_str        reduce using rule 148 (expr -> expr operator_map .)
    type_list       reduce using rule 148 (expr -> expr operator_map .)
    type_tuple      reduce using rule 148 (expr -> expr operator_map .)
    type_array      reduce using rule 148 (expr -> expr operator_map .)
    type_vector     reduce using rule 148 (expr -> expr operator_map .)
    type_dict       reduce using rule 148 (expr -> expr operator_map .)
    type_generator  reduce using rule 148 (expr -> expr operator_map .)
    type_linked_list reduce using rule 148 (expr -> expr operator_map .)
    type_doubly_linked_list reduce using rule 148 (expr -> expr operator_map .)
    type_deque      reduce using rule 148 (expr -> expr operator_map .)
    type_heap       reduce using rule 148 (expr -> expr operator_map .)
    type_fibonacci_heap reduce using rule 148 (expr -> expr operator_map .)
    type_tree       reduce using rule 148 (expr -> expr operator_map .)
    type_trie       reduce using rule 148 (expr -> expr operator_map .)
    type_stack      reduce using rule 148 (expr -> expr operator_map .)
    type_queue      reduce using rule 148 (expr -> expr operator_map .)
    type_binary_search_tree reduce using rule 148 (expr -> expr operator_map .)
    type_bitset     reduce using rule 148 (expr -> expr operator_map .)
    type_set        reduce using rule 148 (expr -> expr operator_map .)
    type_map        reduce using rule 148 (expr -> expr operator_map .)
    type_range      reduce using rule 148 (expr -> expr operator_map .)
    type_bad_struct reduce using rule 148 (expr -> expr operator_map .)
    type_bad_struct2 reduce using rule 148 (expr -> expr operator_map .)
    lambda          reduce using rule 148 (expr -> expr operator_map .)
    pass            reduce using rule 148 (expr -> expr operator_map .)
    else            reduce using rule 148 (expr -> expr operator_map .)
    return          reduce using rule 148 (expr -> expr operator_map .)
    del             reduce using rule 148 (expr -> expr operator_map .)
    for             reduce using rule 148 (expr -> expr operator_map .)
    if              reduce using rule 148 (expr -> expr operator_map .)
    elif            reduce using rule 148 (expr -> expr operator_map .)
    operator        reduce using rule 148 (expr -> expr operator_map .)
    struct          reduce using rule 148 (expr -> expr operator_map .)
    while           reduce using rule 148 (expr -> expr operator_map .)
    func            reduce using rule 148 (expr -> expr operator_map .)
    $end            reduce using rule 148 (expr -> expr operator_map .)
    }               reduce using rule 148 (expr -> expr operator_map .)
    operator_inner  reduce using rule 148 (expr -> expr operator_map .)
    {               reduce using rule 148 (expr -> expr operator_map .)
    )               reduce using rule 148 (expr -> expr operator_map .)
    ,               reduce using rule 148 (expr -> expr operator_map .)


state 119

    (151) expr -> expr operator_less_than . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 286
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 120

    (152) expr -> expr operator_less_than_equals . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 287
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 121

    (153) expr -> expr operator_greater_than . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 288
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 122

    (154) expr -> expr operator_greater_than_equals . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 289
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 123

    (155) expr -> expr operator_equals . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 290
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 124

    (156) expr -> expr operator_not_equals . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 291
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 125

    (157) expr -> expr operator_smallest . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 292
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 126

    (158) expr -> expr operator_greatest . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 293
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 127

    (159) expr -> expr operator_goodname . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 294
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 128

    (164) expr -> VAR .
    (117) return_val -> VAR . ( arguments )

    operator_inner  reduce using rule 164 (expr -> VAR .)
    operator_add    reduce using rule 164 (expr -> VAR .)
    operator_sub    reduce using rule 164 (expr -> VAR .)
    operator_mul    reduce using rule 164 (expr -> VAR .)
    operator_div    reduce using rule 164 (expr -> VAR .)
    operator_trudiv reduce using rule 164 (expr -> VAR .)
    operator_pow    reduce using rule 164 (expr -> VAR .)
    operator_join   reduce using rule 164 (expr -> VAR .)
    operator_split  reduce using rule 164 (expr -> VAR .)
    operator_scan   reduce using rule 164 (expr -> VAR .)
    operator_reduc  reduce using rule 164 (expr -> VAR .)
    operator_bitand reduce using rule 164 (expr -> VAR .)
    operator_bitor  reduce using rule 164 (expr -> VAR .)
    operator_bitxor reduce using rule 164 (expr -> VAR .)
    operator_bitshiftleft reduce using rule 164 (expr -> VAR .)
    operator_bitshiftright reduce using rule 164 (expr -> VAR .)
    operator_and    reduce using rule 164 (expr -> VAR .)
    operator_or     reduce using rule 164 (expr -> VAR .)
    operator_xor    reduce using rule 164 (expr -> VAR .)
    operator_contains reduce using rule 164 (expr -> VAR .)
    operator_incr   reduce using rule 164 (expr -> VAR .)
    operator_decr   reduce using rule 164 (expr -> VAR .)
    operator_outer  reduce using rule 164 (expr -> VAR .)
    operator_rotate reduce using rule 164 (expr -> VAR .)
    operator_apply  reduce using rule 164 (expr -> VAR .)
    operator_compose reduce using rule 164 (expr -> VAR .)
    operator_over   reduce using rule 164 (expr -> VAR .)
    operator_map    reduce using rule 164 (expr -> VAR .)
    operator_less_than reduce using rule 164 (expr -> VAR .)
    operator_less_than_equals reduce using rule 164 (expr -> VAR .)
    operator_greater_than reduce using rule 164 (expr -> VAR .)
    operator_greater_than_equals reduce using rule 164 (expr -> VAR .)
    operator_equals reduce using rule 164 (expr -> VAR .)
    operator_not_equals reduce using rule 164 (expr -> VAR .)
    operator_smallest reduce using rule 164 (expr -> VAR .)
    operator_greatest reduce using rule 164 (expr -> VAR .)
    operator_goodname reduce using rule 164 (expr -> VAR .)
    operator_bitnot reduce using rule 164 (expr -> VAR .)
    operator_not    reduce using rule 164 (expr -> VAR .)
    operator_reverse reduce using rule 164 (expr -> VAR .)
    operator_sorted_incr reduce using rule 164 (expr -> VAR .)
    operator_sorted_decr reduce using rule 164 (expr -> VAR .)
    operator_s_combinator reduce using rule 164 (expr -> VAR .)
    operator_s2_combinator reduce using rule 164 (expr -> VAR .)
    operator_goodname2 reduce using rule 164 (expr -> VAR .)
    VAR             reduce using rule 164 (expr -> VAR .)
    FLOAT           reduce using rule 164 (expr -> VAR .)
    NUM             reduce using rule 164 (expr -> VAR .)
    NULL            reduce using rule 164 (expr -> VAR .)
    STRING_3SQ      reduce using rule 164 (expr -> VAR .)
    STRING_3DQ      reduce using rule 164 (expr -> VAR .)
    STRING_SQ       reduce using rule 164 (expr -> VAR .)
    STRING_DQ       reduce using rule 164 (expr -> VAR .)
    true            reduce using rule 164 (expr -> VAR .)
    false           reduce using rule 164 (expr -> VAR .)
    type_type       reduce using rule 164 (expr -> VAR .)
    type_num        reduce using rule 164 (expr -> VAR .)
    type_any        reduce using rule 164 (expr -> VAR .)
    type_u64        reduce using rule 164 (expr -> VAR .)
    type_u32        reduce using rule 164 (expr -> VAR .)
    type_u16        reduce using rule 164 (expr -> VAR .)
    type_u8         reduce using rule 164 (expr -> VAR .)
    type_i64        reduce using rule 164 (expr -> VAR .)
    type_i32        reduce using rule 164 (expr -> VAR .)
    type_i16        reduce using rule 164 (expr -> VAR .)
    type_i8         reduce using rule 164 (expr -> VAR .)
    type_f32        reduce using rule 164 (expr -> VAR .)
    type_f64        reduce using rule 164 (expr -> VAR .)
    type_str        reduce using rule 164 (expr -> VAR .)
    type_list       reduce using rule 164 (expr -> VAR .)
    type_tuple      reduce using rule 164 (expr -> VAR .)
    type_array      reduce using rule 164 (expr -> VAR .)
    type_vector     reduce using rule 164 (expr -> VAR .)
    type_dict       reduce using rule 164 (expr -> VAR .)
    type_generator  reduce using rule 164 (expr -> VAR .)
    type_linked_list reduce using rule 164 (expr -> VAR .)
    type_doubly_linked_list reduce using rule 164 (expr -> VAR .)
    type_deque      reduce using rule 164 (expr -> VAR .)
    type_heap       reduce using rule 164 (expr -> VAR .)
    type_fibonacci_heap reduce using rule 164 (expr -> VAR .)
    type_tree       reduce using rule 164 (expr -> VAR .)
    type_trie       reduce using rule 164 (expr -> VAR .)
    type_stack      reduce using rule 164 (expr -> VAR .)
    type_queue      reduce using rule 164 (expr -> VAR .)
    type_binary_search_tree reduce using rule 164 (expr -> VAR .)
    type_bitset     reduce using rule 164 (expr -> VAR .)
    type_set        reduce using rule 164 (expr -> VAR .)
    type_map        reduce using rule 164 (expr -> VAR .)
    type_range      reduce using rule 164 (expr -> VAR .)
    type_bad_struct reduce using rule 164 (expr -> VAR .)
    type_bad_struct2 reduce using rule 164 (expr -> VAR .)
    lambda          reduce using rule 164 (expr -> VAR .)
    pass            reduce using rule 164 (expr -> VAR .)
    else            reduce using rule 164 (expr -> VAR .)
    return          reduce using rule 164 (expr -> VAR .)
    del             reduce using rule 164 (expr -> VAR .)
    for             reduce using rule 164 (expr -> VAR .)
    if              reduce using rule 164 (expr -> VAR .)
    elif            reduce using rule 164 (expr -> VAR .)
    operator        reduce using rule 164 (expr -> VAR .)
    struct          reduce using rule 164 (expr -> VAR .)
    while           reduce using rule 164 (expr -> VAR .)
    func            reduce using rule 164 (expr -> VAR .)
    $end            reduce using rule 164 (expr -> VAR .)
    }               reduce using rule 164 (expr -> VAR .)
    {               reduce using rule 164 (expr -> VAR .)
    )               reduce using rule 164 (expr -> VAR .)
    ,               reduce using rule 164 (expr -> VAR .)
    (               shift and go to state 175


state 129

    (81) return_val -> type_type . ( arguments )

    (               shift and go to state 223


state 130

    (82) return_val -> type_num . ( arguments )

    (               shift and go to state 224


state 131

    (83) return_val -> type_any . ( arguments )

    (               shift and go to state 225


state 132

    (84) return_val -> type_u64 . ( arguments )

    (               shift and go to state 226


state 133

    (85) return_val -> type_u32 . ( arguments )

    (               shift and go to state 227


state 134

    (86) return_val -> type_u16 . ( arguments )

    (               shift and go to state 228


state 135

    (87) return_val -> type_u8 . ( arguments )

    (               shift and go to state 229


state 136

    (88) return_val -> type_i64 . ( arguments )

    (               shift and go to state 230


state 137

    (89) return_val -> type_i32 . ( arguments )

    (               shift and go to state 231


state 138

    (90) return_val -> type_i16 . ( arguments )

    (               shift and go to state 232


state 139

    (91) return_val -> type_i8 . ( arguments )

    (               shift and go to state 233


state 140

    (92) return_val -> type_f32 . ( arguments )

    (               shift and go to state 234


state 141

    (93) return_val -> type_f64 . ( arguments )

    (               shift and go to state 235


state 142

    (94) return_val -> type_str . ( arguments )

    (               shift and go to state 236


state 143

    (95) return_val -> type_list . ( arguments )

    (               shift and go to state 237


state 144

    (96) return_val -> type_tuple . ( arguments )

    (               shift and go to state 238


state 145

    (97) return_val -> type_array . ( arguments )

    (               shift and go to state 239


state 146

    (98) return_val -> type_vector . ( arguments )

    (               shift and go to state 240


state 147

    (99) return_val -> type_dict . ( arguments )

    (               shift and go to state 241


state 148

    (100) return_val -> type_generator . ( arguments )

    (               shift and go to state 242


state 149

    (101) return_val -> type_linked_list . ( arguments )

    (               shift and go to state 243


state 150

    (102) return_val -> type_doubly_linked_list . ( arguments )

    (               shift and go to state 244


state 151

    (103) return_val -> type_deque . ( arguments )

    (               shift and go to state 245


state 152

    (104) return_val -> type_heap . ( arguments )

    (               shift and go to state 246


state 153

    (105) return_val -> type_fibonacci_heap . ( arguments )

    (               shift and go to state 247


state 154

    (106) return_val -> type_tree . ( arguments )

    (               shift and go to state 248


state 155

    (107) return_val -> type_trie . ( arguments )

    (               shift and go to state 249


state 156

    (108) return_val -> type_stack . ( arguments )

    (               shift and go to state 250


state 157

    (109) return_val -> type_queue . ( arguments )

    (               shift and go to state 251


state 158

    (110) return_val -> type_binary_search_tree . ( arguments )

    (               shift and go to state 252


state 159

    (111) return_val -> type_bitset . ( arguments )

    (               shift and go to state 253


state 160

    (112) return_val -> type_set . ( arguments )

    (               shift and go to state 254


state 161

    (113) return_val -> type_map . ( arguments )

    (               shift and go to state 255


state 162

    (114) return_val -> type_range . ( arguments )

    (               shift and go to state 256


state 163

    (115) return_val -> type_bad_struct . ( arguments )

    (               shift and go to state 257


state 164

    (116) return_val -> type_bad_struct2 . ( arguments )

    (               shift and go to state 258


state 165

    (50) assign_stmt -> comma_separated_names = . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 295
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 166

    (137) expr -> operator_bitnot expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 137 (expr -> operator_bitnot expr .)
    else            reduce using rule 137 (expr -> operator_bitnot expr .)
    return          reduce using rule 137 (expr -> operator_bitnot expr .)
    del             reduce using rule 137 (expr -> operator_bitnot expr .)
    for             reduce using rule 137 (expr -> operator_bitnot expr .)
    if              reduce using rule 137 (expr -> operator_bitnot expr .)
    elif            reduce using rule 137 (expr -> operator_bitnot expr .)
    operator        reduce using rule 137 (expr -> operator_bitnot expr .)
    struct          reduce using rule 137 (expr -> operator_bitnot expr .)
    while           reduce using rule 137 (expr -> operator_bitnot expr .)
    func            reduce using rule 137 (expr -> operator_bitnot expr .)
    $end            reduce using rule 137 (expr -> operator_bitnot expr .)
    }               reduce using rule 137 (expr -> operator_bitnot expr .)
    operator_inner  reduce using rule 137 (expr -> operator_bitnot expr .)
    {               reduce using rule 137 (expr -> operator_bitnot expr .)
    )               reduce using rule 137 (expr -> operator_bitnot expr .)
    ,               reduce using rule 137 (expr -> operator_bitnot expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_sub    [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_mul    [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_div    [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_trudiv [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_pow    [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_join   [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_split  [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_scan   [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_reduc  [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_bitand [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_bitor  [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_bitxor [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_bitshiftleft [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_bitshiftright [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_and    [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_or     [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_xor    [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_contains [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_incr   [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_decr   [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_outer  [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_rotate [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_apply  [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_compose [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_over   [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_map    [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_less_than [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_less_than_equals [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_greater_than [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_greater_than_equals [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_equals [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_not_equals [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_smallest [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_greatest [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_goodname [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_bitnot [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_not    [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_reverse [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_sorted_incr [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_sorted_decr [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_s_combinator [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_s2_combinator [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! operator_goodname2 [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! VAR             [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! FLOAT           [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! NUM             [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! NULL            [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! STRING_3SQ      [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! STRING_3DQ      [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! STRING_SQ       [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! STRING_DQ       [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! true            [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! false           [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_type       [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_num        [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_any        [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_u64        [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_u32        [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_u16        [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_u8         [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_i64        [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_i32        [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_i16        [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_i8         [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_f32        [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_f64        [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_str        [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_list       [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_tuple      [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_array      [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_vector     [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_dict       [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_generator  [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_linked_list [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_doubly_linked_list [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_deque      [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_heap       [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_fibonacci_heap [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_tree       [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_trie       [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_stack      [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_queue      [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_binary_search_tree [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_bitset     [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_set        [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_map        [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_range      [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_bad_struct [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! type_bad_struct2 [ reduce using rule 137 (expr -> operator_bitnot expr .) ]
  ! lambda          [ reduce using rule 137 (expr -> operator_bitnot expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 167

    (138) expr -> operator_not expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 138 (expr -> operator_not expr .)
    else            reduce using rule 138 (expr -> operator_not expr .)
    return          reduce using rule 138 (expr -> operator_not expr .)
    del             reduce using rule 138 (expr -> operator_not expr .)
    for             reduce using rule 138 (expr -> operator_not expr .)
    if              reduce using rule 138 (expr -> operator_not expr .)
    elif            reduce using rule 138 (expr -> operator_not expr .)
    operator        reduce using rule 138 (expr -> operator_not expr .)
    struct          reduce using rule 138 (expr -> operator_not expr .)
    while           reduce using rule 138 (expr -> operator_not expr .)
    func            reduce using rule 138 (expr -> operator_not expr .)
    $end            reduce using rule 138 (expr -> operator_not expr .)
    }               reduce using rule 138 (expr -> operator_not expr .)
    operator_inner  reduce using rule 138 (expr -> operator_not expr .)
    {               reduce using rule 138 (expr -> operator_not expr .)
    )               reduce using rule 138 (expr -> operator_not expr .)
    ,               reduce using rule 138 (expr -> operator_not expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_sub    [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_mul    [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_div    [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_trudiv [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_pow    [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_join   [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_split  [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_scan   [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_reduc  [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_bitand [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_bitor  [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_bitxor [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_bitshiftleft [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_bitshiftright [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_and    [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_or     [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_xor    [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_contains [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_incr   [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_decr   [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_outer  [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_rotate [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_apply  [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_compose [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_over   [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_map    [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_less_than [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_less_than_equals [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_greater_than [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_greater_than_equals [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_equals [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_not_equals [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_smallest [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_greatest [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_goodname [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_bitnot [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_not    [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_reverse [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_sorted_incr [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_sorted_decr [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_s_combinator [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_s2_combinator [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! operator_goodname2 [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! VAR             [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! FLOAT           [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! NUM             [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! NULL            [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! STRING_3SQ      [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! STRING_3DQ      [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! STRING_SQ       [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! STRING_DQ       [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! true            [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! false           [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_type       [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_num        [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_any        [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_u64        [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_u32        [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_u16        [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_u8         [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_i64        [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_i32        [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_i16        [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_i8         [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_f32        [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_f64        [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_str        [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_list       [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_tuple      [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_array      [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_vector     [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_dict       [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_generator  [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_linked_list [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_doubly_linked_list [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_deque      [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_heap       [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_fibonacci_heap [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_tree       [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_trie       [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_stack      [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_queue      [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_binary_search_tree [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_bitset     [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_set        [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_map        [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_range      [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_bad_struct [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! type_bad_struct2 [ reduce using rule 138 (expr -> operator_not expr .) ]
  ! lambda          [ reduce using rule 138 (expr -> operator_not expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 168

    (143) expr -> operator_reverse expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 143 (expr -> operator_reverse expr .)
    else            reduce using rule 143 (expr -> operator_reverse expr .)
    return          reduce using rule 143 (expr -> operator_reverse expr .)
    del             reduce using rule 143 (expr -> operator_reverse expr .)
    for             reduce using rule 143 (expr -> operator_reverse expr .)
    if              reduce using rule 143 (expr -> operator_reverse expr .)
    elif            reduce using rule 143 (expr -> operator_reverse expr .)
    operator        reduce using rule 143 (expr -> operator_reverse expr .)
    struct          reduce using rule 143 (expr -> operator_reverse expr .)
    while           reduce using rule 143 (expr -> operator_reverse expr .)
    func            reduce using rule 143 (expr -> operator_reverse expr .)
    $end            reduce using rule 143 (expr -> operator_reverse expr .)
    }               reduce using rule 143 (expr -> operator_reverse expr .)
    operator_inner  reduce using rule 143 (expr -> operator_reverse expr .)
    {               reduce using rule 143 (expr -> operator_reverse expr .)
    )               reduce using rule 143 (expr -> operator_reverse expr .)
    ,               reduce using rule 143 (expr -> operator_reverse expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_sub    [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_mul    [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_div    [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_trudiv [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_pow    [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_join   [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_split  [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_scan   [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_reduc  [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_bitand [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_bitor  [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_bitxor [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_bitshiftleft [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_bitshiftright [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_and    [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_or     [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_xor    [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_contains [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_incr   [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_decr   [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_outer  [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_rotate [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_apply  [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_compose [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_over   [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_map    [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_less_than [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_less_than_equals [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_greater_than [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_greater_than_equals [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_equals [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_not_equals [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_smallest [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_greatest [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_goodname [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_bitnot [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_not    [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_reverse [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_sorted_incr [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_sorted_decr [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_s_combinator [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_s2_combinator [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! operator_goodname2 [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! VAR             [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! FLOAT           [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! NUM             [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! NULL            [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! STRING_3SQ      [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! STRING_3DQ      [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! STRING_SQ       [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! STRING_DQ       [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! true            [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! false           [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_type       [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_num        [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_any        [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_u64        [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_u32        [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_u16        [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_u8         [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_i64        [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_i32        [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_i16        [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_i8         [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_f32        [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_f64        [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_str        [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_list       [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_tuple      [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_array      [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_vector     [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_dict       [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_generator  [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_linked_list [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_doubly_linked_list [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_deque      [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_heap       [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_fibonacci_heap [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_tree       [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_trie       [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_stack      [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_queue      [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_binary_search_tree [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_bitset     [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_set        [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_map        [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_range      [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_bad_struct [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! type_bad_struct2 [ reduce using rule 143 (expr -> operator_reverse expr .) ]
  ! lambda          [ reduce using rule 143 (expr -> operator_reverse expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 169

    (149) expr -> operator_sorted_incr expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 149 (expr -> operator_sorted_incr expr .)
    else            reduce using rule 149 (expr -> operator_sorted_incr expr .)
    return          reduce using rule 149 (expr -> operator_sorted_incr expr .)
    del             reduce using rule 149 (expr -> operator_sorted_incr expr .)
    for             reduce using rule 149 (expr -> operator_sorted_incr expr .)
    if              reduce using rule 149 (expr -> operator_sorted_incr expr .)
    elif            reduce using rule 149 (expr -> operator_sorted_incr expr .)
    operator        reduce using rule 149 (expr -> operator_sorted_incr expr .)
    struct          reduce using rule 149 (expr -> operator_sorted_incr expr .)
    while           reduce using rule 149 (expr -> operator_sorted_incr expr .)
    func            reduce using rule 149 (expr -> operator_sorted_incr expr .)
    $end            reduce using rule 149 (expr -> operator_sorted_incr expr .)
    }               reduce using rule 149 (expr -> operator_sorted_incr expr .)
    operator_inner  reduce using rule 149 (expr -> operator_sorted_incr expr .)
    {               reduce using rule 149 (expr -> operator_sorted_incr expr .)
    )               reduce using rule 149 (expr -> operator_sorted_incr expr .)
    ,               reduce using rule 149 (expr -> operator_sorted_incr expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_sub    [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_mul    [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_div    [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_trudiv [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_pow    [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_join   [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_split  [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_scan   [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_reduc  [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_bitand [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_bitor  [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_bitxor [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_bitshiftleft [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_bitshiftright [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_and    [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_or     [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_xor    [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_contains [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_incr   [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_decr   [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_outer  [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_rotate [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_apply  [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_compose [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_over   [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_map    [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_less_than [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_less_than_equals [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_greater_than [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_greater_than_equals [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_equals [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_not_equals [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_smallest [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_greatest [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_goodname [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_bitnot [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_not    [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_reverse [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_sorted_incr [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_sorted_decr [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_s_combinator [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_s2_combinator [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! operator_goodname2 [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! VAR             [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! FLOAT           [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! NUM             [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! NULL            [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! STRING_3SQ      [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! STRING_3DQ      [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! STRING_SQ       [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! STRING_DQ       [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! true            [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! false           [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_type       [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_num        [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_any        [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_u64        [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_u32        [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_u16        [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_u8         [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_i64        [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_i32        [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_i16        [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_i8         [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_f32        [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_f64        [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_str        [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_list       [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_tuple      [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_array      [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_vector     [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_dict       [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_generator  [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_linked_list [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_doubly_linked_list [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_deque      [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_heap       [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_fibonacci_heap [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_tree       [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_trie       [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_stack      [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_queue      [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_binary_search_tree [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_bitset     [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_set        [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_map        [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_range      [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_bad_struct [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! type_bad_struct2 [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]
  ! lambda          [ reduce using rule 149 (expr -> operator_sorted_incr expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 170

    (150) expr -> operator_sorted_decr expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 150 (expr -> operator_sorted_decr expr .)
    else            reduce using rule 150 (expr -> operator_sorted_decr expr .)
    return          reduce using rule 150 (expr -> operator_sorted_decr expr .)
    del             reduce using rule 150 (expr -> operator_sorted_decr expr .)
    for             reduce using rule 150 (expr -> operator_sorted_decr expr .)
    if              reduce using rule 150 (expr -> operator_sorted_decr expr .)
    elif            reduce using rule 150 (expr -> operator_sorted_decr expr .)
    operator        reduce using rule 150 (expr -> operator_sorted_decr expr .)
    struct          reduce using rule 150 (expr -> operator_sorted_decr expr .)
    while           reduce using rule 150 (expr -> operator_sorted_decr expr .)
    func            reduce using rule 150 (expr -> operator_sorted_decr expr .)
    $end            reduce using rule 150 (expr -> operator_sorted_decr expr .)
    }               reduce using rule 150 (expr -> operator_sorted_decr expr .)
    operator_inner  reduce using rule 150 (expr -> operator_sorted_decr expr .)
    {               reduce using rule 150 (expr -> operator_sorted_decr expr .)
    )               reduce using rule 150 (expr -> operator_sorted_decr expr .)
    ,               reduce using rule 150 (expr -> operator_sorted_decr expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_sub    [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_mul    [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_div    [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_trudiv [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_pow    [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_join   [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_split  [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_scan   [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_reduc  [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_bitand [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_bitor  [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_bitxor [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_bitshiftleft [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_bitshiftright [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_and    [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_or     [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_xor    [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_contains [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_incr   [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_decr   [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_outer  [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_rotate [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_apply  [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_compose [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_over   [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_map    [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_less_than [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_less_than_equals [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_greater_than [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_greater_than_equals [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_equals [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_not_equals [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_smallest [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_greatest [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_goodname [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_bitnot [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_not    [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_reverse [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_sorted_incr [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_sorted_decr [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_s_combinator [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_s2_combinator [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! operator_goodname2 [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! VAR             [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! FLOAT           [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! NUM             [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! NULL            [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! STRING_3SQ      [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! STRING_3DQ      [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! STRING_SQ       [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! STRING_DQ       [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! true            [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! false           [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_type       [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_num        [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_any        [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_u64        [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_u32        [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_u16        [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_u8         [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_i64        [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_i32        [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_i16        [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_i8         [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_f32        [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_f64        [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_str        [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_list       [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_tuple      [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_array      [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_vector     [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_dict       [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_generator  [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_linked_list [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_doubly_linked_list [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_deque      [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_heap       [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_fibonacci_heap [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_tree       [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_trie       [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_stack      [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_queue      [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_binary_search_tree [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_bitset     [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_set        [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_map        [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_range      [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_bad_struct [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! type_bad_struct2 [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]
  ! lambda          [ reduce using rule 150 (expr -> operator_sorted_decr expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 171

    (160) expr -> operator_s_combinator expr . expr expr
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 296
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 172

    (161) expr -> operator_s2_combinator expr . expr expr
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 297
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 173

    (162) expr -> operator_goodname2 expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 162 (expr -> operator_goodname2 expr .)
    else            reduce using rule 162 (expr -> operator_goodname2 expr .)
    return          reduce using rule 162 (expr -> operator_goodname2 expr .)
    del             reduce using rule 162 (expr -> operator_goodname2 expr .)
    for             reduce using rule 162 (expr -> operator_goodname2 expr .)
    if              reduce using rule 162 (expr -> operator_goodname2 expr .)
    elif            reduce using rule 162 (expr -> operator_goodname2 expr .)
    operator        reduce using rule 162 (expr -> operator_goodname2 expr .)
    struct          reduce using rule 162 (expr -> operator_goodname2 expr .)
    while           reduce using rule 162 (expr -> operator_goodname2 expr .)
    func            reduce using rule 162 (expr -> operator_goodname2 expr .)
    $end            reduce using rule 162 (expr -> operator_goodname2 expr .)
    }               reduce using rule 162 (expr -> operator_goodname2 expr .)
    operator_inner  reduce using rule 162 (expr -> operator_goodname2 expr .)
    {               reduce using rule 162 (expr -> operator_goodname2 expr .)
    )               reduce using rule 162 (expr -> operator_goodname2 expr .)
    ,               reduce using rule 162 (expr -> operator_goodname2 expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_sub    [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_mul    [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_div    [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_trudiv [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_pow    [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_join   [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_split  [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_scan   [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_reduc  [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_bitand [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_bitor  [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_bitxor [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_bitshiftleft [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_bitshiftright [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_and    [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_or     [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_xor    [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_contains [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_incr   [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_decr   [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_outer  [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_rotate [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_apply  [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_compose [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_over   [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_map    [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_less_than [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_less_than_equals [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_greater_than [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_greater_than_equals [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_equals [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_not_equals [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_smallest [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_greatest [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_goodname [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_bitnot [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_not    [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_reverse [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_sorted_incr [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_sorted_decr [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_s_combinator [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_s2_combinator [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! operator_goodname2 [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! VAR             [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! FLOAT           [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! NUM             [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! NULL            [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! STRING_3SQ      [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! STRING_3DQ      [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! STRING_SQ       [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! STRING_DQ       [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! true            [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! false           [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_type       [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_num        [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_any        [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_u64        [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_u32        [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_u16        [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_u8         [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_i64        [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_i32        [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_i16        [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_i8         [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_f32        [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_f64        [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_str        [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_list       [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_tuple      [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_array      [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_vector     [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_dict       [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_generator  [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_linked_list [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_doubly_linked_list [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_deque      [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_heap       [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_fibonacci_heap [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_tree       [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_trie       [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_stack      [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_queue      [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_binary_search_tree [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_bitset     [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_set        [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_map        [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_range      [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_bad_struct [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! type_bad_struct2 [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]
  ! lambda          [ reduce using rule 162 (expr -> operator_goodname2 expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 174

    (53) comma_separated_names -> VAR , . comma_separated_names
    (52) comma_separated_names -> . VAR
    (53) comma_separated_names -> . VAR , comma_separated_names

    VAR             shift and go to state 179

    comma_separated_names          shift and go to state 298

state 175

    (117) return_val -> VAR ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 299
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 176

    (48) return_stmt -> return expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 48 (return_stmt -> return expr .)
    else            reduce using rule 48 (return_stmt -> return expr .)
    return          reduce using rule 48 (return_stmt -> return expr .)
    del             reduce using rule 48 (return_stmt -> return expr .)
    for             reduce using rule 48 (return_stmt -> return expr .)
    if              reduce using rule 48 (return_stmt -> return expr .)
    elif            reduce using rule 48 (return_stmt -> return expr .)
    operator        reduce using rule 48 (return_stmt -> return expr .)
    struct          reduce using rule 48 (return_stmt -> return expr .)
    while           reduce using rule 48 (return_stmt -> return expr .)
    func            reduce using rule 48 (return_stmt -> return expr .)
    $end            reduce using rule 48 (return_stmt -> return expr .)
    }               reduce using rule 48 (return_stmt -> return expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_bitnot [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! operator_not    [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! operator_reverse [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! operator_sorted_incr [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! operator_sorted_decr [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! operator_s_combinator [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! operator_s2_combinator [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! operator_goodname2 [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! VAR             [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! FLOAT           [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! NUM             [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! NULL            [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! STRING_3SQ      [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! STRING_3DQ      [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! STRING_SQ       [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! STRING_DQ       [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! true            [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! false           [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_type       [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_num        [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_any        [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_u64        [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_u32        [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_u16        [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_u8         [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_i64        [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_i32        [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_i16        [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_i8         [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_f32        [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_f64        [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_str        [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_list       [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_tuple      [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_array      [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_vector     [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_dict       [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_generator  [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_linked_list [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_doubly_linked_list [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_deque      [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_heap       [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_fibonacci_heap [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_tree       [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_trie       [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_stack      [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_queue      [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_binary_search_tree [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_bitset     [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_set        [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_map        [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_range      [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_bad_struct [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! type_bad_struct2 [ reduce using rule 48 (return_stmt -> return expr .) ]
  ! lambda          [ reduce using rule 48 (return_stmt -> return expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 177

    (49) del_stmt -> del expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 49 (del_stmt -> del expr .)
    else            reduce using rule 49 (del_stmt -> del expr .)
    return          reduce using rule 49 (del_stmt -> del expr .)
    del             reduce using rule 49 (del_stmt -> del expr .)
    for             reduce using rule 49 (del_stmt -> del expr .)
    if              reduce using rule 49 (del_stmt -> del expr .)
    elif            reduce using rule 49 (del_stmt -> del expr .)
    operator        reduce using rule 49 (del_stmt -> del expr .)
    struct          reduce using rule 49 (del_stmt -> del expr .)
    while           reduce using rule 49 (del_stmt -> del expr .)
    func            reduce using rule 49 (del_stmt -> del expr .)
    $end            reduce using rule 49 (del_stmt -> del expr .)
    }               reduce using rule 49 (del_stmt -> del expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_bitnot [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! operator_not    [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! operator_reverse [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! operator_sorted_incr [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! operator_sorted_decr [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! operator_s_combinator [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! operator_s2_combinator [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! operator_goodname2 [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! VAR             [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! FLOAT           [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! NUM             [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! NULL            [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! STRING_3SQ      [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! STRING_3DQ      [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! STRING_SQ       [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! STRING_DQ       [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! true            [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! false           [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_type       [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_num        [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_any        [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_u64        [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_u32        [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_u16        [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_u8         [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_i64        [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_i32        [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_i16        [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_i8         [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_f32        [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_f64        [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_str        [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_list       [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_tuple      [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_array      [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_vector     [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_dict       [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_generator  [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_linked_list [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_doubly_linked_list [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_deque      [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_heap       [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_fibonacci_heap [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_tree       [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_trie       [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_stack      [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_queue      [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_binary_search_tree [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_bitset     [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_set        [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_map        [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_range      [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_bad_struct [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! type_bad_struct2 [ reduce using rule 49 (del_stmt -> del expr .) ]
  ! lambda          [ reduce using rule 49 (del_stmt -> del expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 178

    (51) declaration_stmt -> TYPE comma_separated_names .

    pass            reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    else            reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    operator_bitnot reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    operator_not    reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    operator_reverse reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    operator_sorted_incr reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    operator_sorted_decr reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    operator_s_combinator reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    operator_s2_combinator reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    operator_goodname2 reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    VAR             reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    return          reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    del             reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    for             reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    if              reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    elif            reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    operator        reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    struct          reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    while           reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    func            reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    FLOAT           reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    NUM             reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    NULL            reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    STRING_3SQ      reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    STRING_3DQ      reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    STRING_SQ       reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    STRING_DQ       reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    true            reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    false           reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_type       reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_num        reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_any        reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_u64        reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_u32        reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_u16        reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_u8         reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_i64        reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_i32        reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_i16        reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_i8         reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_f32        reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_f64        reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_str        reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_list       reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_tuple      reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_array      reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_vector     reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_dict       reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_generator  reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_linked_list reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_doubly_linked_list reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_deque      reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_heap       reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_fibonacci_heap reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_tree       reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_trie       reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_stack      reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_queue      reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_binary_search_tree reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_bitset     reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_set        reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_map        reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_range      reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_bad_struct reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    type_bad_struct2 reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    lambda          reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    $end            reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    }               reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    ;               reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)
    )               reduce using rule 51 (declaration_stmt -> TYPE comma_separated_names .)


state 179

    (52) comma_separated_names -> VAR .
    (53) comma_separated_names -> VAR . , comma_separated_names

    pass            reduce using rule 52 (comma_separated_names -> VAR .)
    else            reduce using rule 52 (comma_separated_names -> VAR .)
    operator_bitnot reduce using rule 52 (comma_separated_names -> VAR .)
    operator_not    reduce using rule 52 (comma_separated_names -> VAR .)
    operator_reverse reduce using rule 52 (comma_separated_names -> VAR .)
    operator_sorted_incr reduce using rule 52 (comma_separated_names -> VAR .)
    operator_sorted_decr reduce using rule 52 (comma_separated_names -> VAR .)
    operator_s_combinator reduce using rule 52 (comma_separated_names -> VAR .)
    operator_s2_combinator reduce using rule 52 (comma_separated_names -> VAR .)
    operator_goodname2 reduce using rule 52 (comma_separated_names -> VAR .)
    VAR             reduce using rule 52 (comma_separated_names -> VAR .)
    return          reduce using rule 52 (comma_separated_names -> VAR .)
    del             reduce using rule 52 (comma_separated_names -> VAR .)
    for             reduce using rule 52 (comma_separated_names -> VAR .)
    if              reduce using rule 52 (comma_separated_names -> VAR .)
    elif            reduce using rule 52 (comma_separated_names -> VAR .)
    operator        reduce using rule 52 (comma_separated_names -> VAR .)
    struct          reduce using rule 52 (comma_separated_names -> VAR .)
    while           reduce using rule 52 (comma_separated_names -> VAR .)
    func            reduce using rule 52 (comma_separated_names -> VAR .)
    FLOAT           reduce using rule 52 (comma_separated_names -> VAR .)
    NUM             reduce using rule 52 (comma_separated_names -> VAR .)
    NULL            reduce using rule 52 (comma_separated_names -> VAR .)
    STRING_3SQ      reduce using rule 52 (comma_separated_names -> VAR .)
    STRING_3DQ      reduce using rule 52 (comma_separated_names -> VAR .)
    STRING_SQ       reduce using rule 52 (comma_separated_names -> VAR .)
    STRING_DQ       reduce using rule 52 (comma_separated_names -> VAR .)
    true            reduce using rule 52 (comma_separated_names -> VAR .)
    false           reduce using rule 52 (comma_separated_names -> VAR .)
    type_type       reduce using rule 52 (comma_separated_names -> VAR .)
    type_num        reduce using rule 52 (comma_separated_names -> VAR .)
    type_any        reduce using rule 52 (comma_separated_names -> VAR .)
    type_u64        reduce using rule 52 (comma_separated_names -> VAR .)
    type_u32        reduce using rule 52 (comma_separated_names -> VAR .)
    type_u16        reduce using rule 52 (comma_separated_names -> VAR .)
    type_u8         reduce using rule 52 (comma_separated_names -> VAR .)
    type_i64        reduce using rule 52 (comma_separated_names -> VAR .)
    type_i32        reduce using rule 52 (comma_separated_names -> VAR .)
    type_i16        reduce using rule 52 (comma_separated_names -> VAR .)
    type_i8         reduce using rule 52 (comma_separated_names -> VAR .)
    type_f32        reduce using rule 52 (comma_separated_names -> VAR .)
    type_f64        reduce using rule 52 (comma_separated_names -> VAR .)
    type_str        reduce using rule 52 (comma_separated_names -> VAR .)
    type_list       reduce using rule 52 (comma_separated_names -> VAR .)
    type_tuple      reduce using rule 52 (comma_separated_names -> VAR .)
    type_array      reduce using rule 52 (comma_separated_names -> VAR .)
    type_vector     reduce using rule 52 (comma_separated_names -> VAR .)
    type_dict       reduce using rule 52 (comma_separated_names -> VAR .)
    type_generator  reduce using rule 52 (comma_separated_names -> VAR .)
    type_linked_list reduce using rule 52 (comma_separated_names -> VAR .)
    type_doubly_linked_list reduce using rule 52 (comma_separated_names -> VAR .)
    type_deque      reduce using rule 52 (comma_separated_names -> VAR .)
    type_heap       reduce using rule 52 (comma_separated_names -> VAR .)
    type_fibonacci_heap reduce using rule 52 (comma_separated_names -> VAR .)
    type_tree       reduce using rule 52 (comma_separated_names -> VAR .)
    type_trie       reduce using rule 52 (comma_separated_names -> VAR .)
    type_stack      reduce using rule 52 (comma_separated_names -> VAR .)
    type_queue      reduce using rule 52 (comma_separated_names -> VAR .)
    type_binary_search_tree reduce using rule 52 (comma_separated_names -> VAR .)
    type_bitset     reduce using rule 52 (comma_separated_names -> VAR .)
    type_set        reduce using rule 52 (comma_separated_names -> VAR .)
    type_map        reduce using rule 52 (comma_separated_names -> VAR .)
    type_range      reduce using rule 52 (comma_separated_names -> VAR .)
    type_bad_struct reduce using rule 52 (comma_separated_names -> VAR .)
    type_bad_struct2 reduce using rule 52 (comma_separated_names -> VAR .)
    lambda          reduce using rule 52 (comma_separated_names -> VAR .)
    $end            reduce using rule 52 (comma_separated_names -> VAR .)
    }               reduce using rule 52 (comma_separated_names -> VAR .)
    ;               reduce using rule 52 (comma_separated_names -> VAR .)
    )               reduce using rule 52 (comma_separated_names -> VAR .)
    operator_contains reduce using rule 52 (comma_separated_names -> VAR .)
    :               reduce using rule 52 (comma_separated_names -> VAR .)
    =               reduce using rule 52 (comma_separated_names -> VAR .)
    ,               shift and go to state 174


state 180

    (63) for_decl -> for comma_separated_names . operator_contains expr

    operator_contains shift and go to state 338


state 181

    (64) if_decl -> if expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    {               reduce using rule 64 (if_decl -> if expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 182

    (65) elif_decl -> elif expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    {               reduce using rule 65 (elif_decl -> elif expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 183

    (66) operator_decl -> operator ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 339
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 184

    (67) struct_decl -> struct TYPE .

    {               reduce using rule 67 (struct_decl -> struct TYPE .)


state 185

    (5) TYPE -> type_type .

    {               reduce using rule 5 (TYPE -> type_type .)
    VAR             reduce using rule 5 (TYPE -> type_type .)


state 186

    (6) TYPE -> type_num .

    {               reduce using rule 6 (TYPE -> type_num .)
    VAR             reduce using rule 6 (TYPE -> type_num .)


state 187

    (7) TYPE -> type_any .

    {               reduce using rule 7 (TYPE -> type_any .)
    VAR             reduce using rule 7 (TYPE -> type_any .)


state 188

    (8) TYPE -> type_u64 .

    {               reduce using rule 8 (TYPE -> type_u64 .)
    VAR             reduce using rule 8 (TYPE -> type_u64 .)


state 189

    (9) TYPE -> type_u32 .

    {               reduce using rule 9 (TYPE -> type_u32 .)
    VAR             reduce using rule 9 (TYPE -> type_u32 .)


state 190

    (10) TYPE -> type_u16 .

    {               reduce using rule 10 (TYPE -> type_u16 .)
    VAR             reduce using rule 10 (TYPE -> type_u16 .)


state 191

    (11) TYPE -> type_u8 .

    {               reduce using rule 11 (TYPE -> type_u8 .)
    VAR             reduce using rule 11 (TYPE -> type_u8 .)


state 192

    (12) TYPE -> type_i64 .

    {               reduce using rule 12 (TYPE -> type_i64 .)
    VAR             reduce using rule 12 (TYPE -> type_i64 .)


state 193

    (13) TYPE -> type_i32 .

    {               reduce using rule 13 (TYPE -> type_i32 .)
    VAR             reduce using rule 13 (TYPE -> type_i32 .)


state 194

    (14) TYPE -> type_i16 .

    {               reduce using rule 14 (TYPE -> type_i16 .)
    VAR             reduce using rule 14 (TYPE -> type_i16 .)


state 195

    (15) TYPE -> type_i8 .

    {               reduce using rule 15 (TYPE -> type_i8 .)
    VAR             reduce using rule 15 (TYPE -> type_i8 .)


state 196

    (16) TYPE -> type_f32 .

    {               reduce using rule 16 (TYPE -> type_f32 .)
    VAR             reduce using rule 16 (TYPE -> type_f32 .)


state 197

    (17) TYPE -> type_f64 .

    {               reduce using rule 17 (TYPE -> type_f64 .)
    VAR             reduce using rule 17 (TYPE -> type_f64 .)


state 198

    (18) TYPE -> type_str .

    {               reduce using rule 18 (TYPE -> type_str .)
    VAR             reduce using rule 18 (TYPE -> type_str .)


state 199

    (19) TYPE -> type_list .

    {               reduce using rule 19 (TYPE -> type_list .)
    VAR             reduce using rule 19 (TYPE -> type_list .)


state 200

    (20) TYPE -> type_tuple .

    {               reduce using rule 20 (TYPE -> type_tuple .)
    VAR             reduce using rule 20 (TYPE -> type_tuple .)


state 201

    (21) TYPE -> type_array .

    {               reduce using rule 21 (TYPE -> type_array .)
    VAR             reduce using rule 21 (TYPE -> type_array .)


state 202

    (22) TYPE -> type_vector .

    {               reduce using rule 22 (TYPE -> type_vector .)
    VAR             reduce using rule 22 (TYPE -> type_vector .)


state 203

    (23) TYPE -> type_dict .

    {               reduce using rule 23 (TYPE -> type_dict .)
    VAR             reduce using rule 23 (TYPE -> type_dict .)


state 204

    (24) TYPE -> type_generator .

    {               reduce using rule 24 (TYPE -> type_generator .)
    VAR             reduce using rule 24 (TYPE -> type_generator .)


state 205

    (25) TYPE -> type_linked_list .

    {               reduce using rule 25 (TYPE -> type_linked_list .)
    VAR             reduce using rule 25 (TYPE -> type_linked_list .)


state 206

    (26) TYPE -> type_doubly_linked_list .

    {               reduce using rule 26 (TYPE -> type_doubly_linked_list .)
    VAR             reduce using rule 26 (TYPE -> type_doubly_linked_list .)


state 207

    (27) TYPE -> type_deque .

    {               reduce using rule 27 (TYPE -> type_deque .)
    VAR             reduce using rule 27 (TYPE -> type_deque .)


state 208

    (28) TYPE -> type_heap .

    {               reduce using rule 28 (TYPE -> type_heap .)
    VAR             reduce using rule 28 (TYPE -> type_heap .)


state 209

    (29) TYPE -> type_fibonacci_heap .

    {               reduce using rule 29 (TYPE -> type_fibonacci_heap .)
    VAR             reduce using rule 29 (TYPE -> type_fibonacci_heap .)


state 210

    (30) TYPE -> type_tree .

    {               reduce using rule 30 (TYPE -> type_tree .)
    VAR             reduce using rule 30 (TYPE -> type_tree .)


state 211

    (31) TYPE -> type_trie .

    {               reduce using rule 31 (TYPE -> type_trie .)
    VAR             reduce using rule 31 (TYPE -> type_trie .)


state 212

    (32) TYPE -> type_stack .

    {               reduce using rule 32 (TYPE -> type_stack .)
    VAR             reduce using rule 32 (TYPE -> type_stack .)


state 213

    (33) TYPE -> type_queue .

    {               reduce using rule 33 (TYPE -> type_queue .)
    VAR             reduce using rule 33 (TYPE -> type_queue .)


state 214

    (34) TYPE -> type_binary_search_tree .

    {               reduce using rule 34 (TYPE -> type_binary_search_tree .)
    VAR             reduce using rule 34 (TYPE -> type_binary_search_tree .)


state 215

    (35) TYPE -> type_bitset .

    {               reduce using rule 35 (TYPE -> type_bitset .)
    VAR             reduce using rule 35 (TYPE -> type_bitset .)


state 216

    (36) TYPE -> type_set .

    {               reduce using rule 36 (TYPE -> type_set .)
    VAR             reduce using rule 36 (TYPE -> type_set .)


state 217

    (37) TYPE -> type_map .

    {               reduce using rule 37 (TYPE -> type_map .)
    VAR             reduce using rule 37 (TYPE -> type_map .)


state 218

    (38) TYPE -> type_range .

    {               reduce using rule 38 (TYPE -> type_range .)
    VAR             reduce using rule 38 (TYPE -> type_range .)


state 219

    (39) TYPE -> type_bad_struct .

    {               reduce using rule 39 (TYPE -> type_bad_struct .)
    VAR             reduce using rule 39 (TYPE -> type_bad_struct .)


state 220

    (40) TYPE -> type_bad_struct2 .

    {               reduce using rule 40 (TYPE -> type_bad_struct2 .)
    VAR             reduce using rule 40 (TYPE -> type_bad_struct2 .)


state 221

    (68) while_decl -> while expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    {               reduce using rule 68 (while_decl -> while expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 222

    (69) func_decl -> func VAR . ( def_arguments )

    (               shift and go to state 340


state 223

    (81) return_val -> type_type ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 341
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 224

    (82) return_val -> type_num ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 342
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 225

    (83) return_val -> type_any ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 343
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 226

    (84) return_val -> type_u64 ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 344
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 227

    (85) return_val -> type_u32 ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 345
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 228

    (86) return_val -> type_u16 ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 346
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 229

    (87) return_val -> type_u8 ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 347
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 230

    (88) return_val -> type_i64 ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 348
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 231

    (89) return_val -> type_i32 ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 349
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 232

    (90) return_val -> type_i16 ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 350
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 233

    (91) return_val -> type_i8 ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 351
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 234

    (92) return_val -> type_f32 ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 352
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 235

    (93) return_val -> type_f64 ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 353
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 236

    (94) return_val -> type_str ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 354
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 237

    (95) return_val -> type_list ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 355
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 238

    (96) return_val -> type_tuple ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 356
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 239

    (97) return_val -> type_array ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 357
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 240

    (98) return_val -> type_vector ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 358
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 241

    (99) return_val -> type_dict ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 359
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 242

    (100) return_val -> type_generator ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 360
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 243

    (101) return_val -> type_linked_list ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 361
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 244

    (102) return_val -> type_doubly_linked_list ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 362
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 245

    (103) return_val -> type_deque ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 363
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 246

    (104) return_val -> type_heap ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 364
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 247

    (105) return_val -> type_fibonacci_heap ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 365
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 248

    (106) return_val -> type_tree ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 366
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 249

    (107) return_val -> type_trie ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 367
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 250

    (108) return_val -> type_stack ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 368
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 251

    (109) return_val -> type_queue ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 369
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 252

    (110) return_val -> type_binary_search_tree ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 370
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 253

    (111) return_val -> type_bitset ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 371
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 254

    (112) return_val -> type_set ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 372
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 255

    (113) return_val -> type_map ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 373
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 256

    (114) return_val -> type_range ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 374
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 257

    (115) return_val -> type_bad_struct ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 375
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 258

    (116) return_val -> type_bad_struct2 ( . arguments )
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    )               reduce using rule 167 (empty -> .)
    ,               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 376
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 259

    (47) lambda_decl -> lambda comma_separated_names . : expr

    :               shift and go to state 377


state 260

    (54) block_stmt -> block_decl { stmts . }

    }               shift and go to state 378


state 261

    (142) expr -> expr expr operator_inner . expr expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 379
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 262

    (118) expr -> expr operator_add expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 118 (expr -> expr operator_add expr .)
    else            reduce using rule 118 (expr -> expr operator_add expr .)
    return          reduce using rule 118 (expr -> expr operator_add expr .)
    del             reduce using rule 118 (expr -> expr operator_add expr .)
    for             reduce using rule 118 (expr -> expr operator_add expr .)
    if              reduce using rule 118 (expr -> expr operator_add expr .)
    elif            reduce using rule 118 (expr -> expr operator_add expr .)
    operator        reduce using rule 118 (expr -> expr operator_add expr .)
    struct          reduce using rule 118 (expr -> expr operator_add expr .)
    while           reduce using rule 118 (expr -> expr operator_add expr .)
    func            reduce using rule 118 (expr -> expr operator_add expr .)
    $end            reduce using rule 118 (expr -> expr operator_add expr .)
    }               reduce using rule 118 (expr -> expr operator_add expr .)
    operator_inner  reduce using rule 118 (expr -> expr operator_add expr .)
    {               reduce using rule 118 (expr -> expr operator_add expr .)
    )               reduce using rule 118 (expr -> expr operator_add expr .)
    ,               reduce using rule 118 (expr -> expr operator_add expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_sub    [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_mul    [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_div    [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_trudiv [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_pow    [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_join   [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_split  [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_scan   [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_reduc  [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_bitand [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_bitor  [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_bitxor [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_bitshiftleft [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_bitshiftright [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_and    [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_or     [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_xor    [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_contains [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_incr   [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_decr   [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_outer  [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_rotate [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_apply  [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_compose [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_over   [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_map    [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_less_than [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_less_than_equals [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_greater_than [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_greater_than_equals [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_equals [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_not_equals [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_smallest [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_greatest [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_goodname [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_bitnot [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_not    [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_reverse [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_sorted_incr [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_sorted_decr [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_s_combinator [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_s2_combinator [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! operator_goodname2 [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! VAR             [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! FLOAT           [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! NUM             [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! NULL            [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! STRING_3SQ      [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! STRING_3DQ      [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! STRING_SQ       [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! STRING_DQ       [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! true            [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! false           [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_type       [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_num        [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_any        [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_u64        [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_u32        [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_u16        [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_u8         [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_i64        [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_i32        [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_i16        [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_i8         [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_f32        [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_f64        [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_str        [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_list       [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_tuple      [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_array      [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_vector     [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_dict       [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_generator  [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_linked_list [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_doubly_linked_list [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_deque      [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_heap       [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_fibonacci_heap [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_tree       [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_trie       [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_stack      [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_queue      [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_binary_search_tree [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_bitset     [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_set        [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_map        [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_range      [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_bad_struct [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! type_bad_struct2 [ reduce using rule 118 (expr -> expr operator_add expr .) ]
  ! lambda          [ reduce using rule 118 (expr -> expr operator_add expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 263

    (119) expr -> expr operator_sub expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 119 (expr -> expr operator_sub expr .)
    else            reduce using rule 119 (expr -> expr operator_sub expr .)
    return          reduce using rule 119 (expr -> expr operator_sub expr .)
    del             reduce using rule 119 (expr -> expr operator_sub expr .)
    for             reduce using rule 119 (expr -> expr operator_sub expr .)
    if              reduce using rule 119 (expr -> expr operator_sub expr .)
    elif            reduce using rule 119 (expr -> expr operator_sub expr .)
    operator        reduce using rule 119 (expr -> expr operator_sub expr .)
    struct          reduce using rule 119 (expr -> expr operator_sub expr .)
    while           reduce using rule 119 (expr -> expr operator_sub expr .)
    func            reduce using rule 119 (expr -> expr operator_sub expr .)
    $end            reduce using rule 119 (expr -> expr operator_sub expr .)
    }               reduce using rule 119 (expr -> expr operator_sub expr .)
    operator_inner  reduce using rule 119 (expr -> expr operator_sub expr .)
    {               reduce using rule 119 (expr -> expr operator_sub expr .)
    )               reduce using rule 119 (expr -> expr operator_sub expr .)
    ,               reduce using rule 119 (expr -> expr operator_sub expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_sub    [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_mul    [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_div    [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_trudiv [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_pow    [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_join   [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_split  [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_scan   [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_reduc  [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_bitand [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_bitor  [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_bitxor [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_bitshiftleft [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_bitshiftright [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_and    [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_or     [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_xor    [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_contains [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_incr   [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_decr   [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_outer  [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_rotate [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_apply  [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_compose [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_over   [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_map    [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_less_than [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_less_than_equals [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_greater_than [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_greater_than_equals [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_equals [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_not_equals [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_smallest [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_greatest [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_goodname [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_bitnot [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_not    [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_reverse [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_sorted_incr [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_sorted_decr [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_s_combinator [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_s2_combinator [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! operator_goodname2 [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! VAR             [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! FLOAT           [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! NUM             [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! NULL            [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! STRING_3SQ      [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! STRING_3DQ      [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! STRING_SQ       [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! STRING_DQ       [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! true            [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! false           [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_type       [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_num        [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_any        [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_u64        [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_u32        [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_u16        [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_u8         [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_i64        [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_i32        [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_i16        [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_i8         [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_f32        [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_f64        [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_str        [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_list       [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_tuple      [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_array      [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_vector     [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_dict       [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_generator  [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_linked_list [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_doubly_linked_list [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_deque      [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_heap       [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_fibonacci_heap [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_tree       [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_trie       [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_stack      [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_queue      [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_binary_search_tree [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_bitset     [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_set        [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_map        [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_range      [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_bad_struct [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! type_bad_struct2 [ reduce using rule 119 (expr -> expr operator_sub expr .) ]
  ! lambda          [ reduce using rule 119 (expr -> expr operator_sub expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 264

    (120) expr -> expr operator_mul expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 120 (expr -> expr operator_mul expr .)
    else            reduce using rule 120 (expr -> expr operator_mul expr .)
    return          reduce using rule 120 (expr -> expr operator_mul expr .)
    del             reduce using rule 120 (expr -> expr operator_mul expr .)
    for             reduce using rule 120 (expr -> expr operator_mul expr .)
    if              reduce using rule 120 (expr -> expr operator_mul expr .)
    elif            reduce using rule 120 (expr -> expr operator_mul expr .)
    operator        reduce using rule 120 (expr -> expr operator_mul expr .)
    struct          reduce using rule 120 (expr -> expr operator_mul expr .)
    while           reduce using rule 120 (expr -> expr operator_mul expr .)
    func            reduce using rule 120 (expr -> expr operator_mul expr .)
    $end            reduce using rule 120 (expr -> expr operator_mul expr .)
    }               reduce using rule 120 (expr -> expr operator_mul expr .)
    operator_inner  reduce using rule 120 (expr -> expr operator_mul expr .)
    {               reduce using rule 120 (expr -> expr operator_mul expr .)
    )               reduce using rule 120 (expr -> expr operator_mul expr .)
    ,               reduce using rule 120 (expr -> expr operator_mul expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_sub    [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_mul    [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_div    [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_trudiv [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_pow    [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_join   [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_split  [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_scan   [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_reduc  [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_bitand [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_bitor  [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_bitxor [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_bitshiftleft [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_bitshiftright [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_and    [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_or     [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_xor    [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_contains [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_incr   [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_decr   [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_outer  [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_rotate [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_apply  [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_compose [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_over   [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_map    [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_less_than [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_less_than_equals [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_greater_than [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_greater_than_equals [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_equals [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_not_equals [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_smallest [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_greatest [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_goodname [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_bitnot [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_not    [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_reverse [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_sorted_incr [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_sorted_decr [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_s_combinator [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_s2_combinator [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! operator_goodname2 [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! VAR             [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! FLOAT           [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! NUM             [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! NULL            [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! STRING_3SQ      [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! STRING_3DQ      [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! STRING_SQ       [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! STRING_DQ       [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! true            [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! false           [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_type       [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_num        [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_any        [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_u64        [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_u32        [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_u16        [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_u8         [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_i64        [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_i32        [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_i16        [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_i8         [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_f32        [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_f64        [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_str        [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_list       [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_tuple      [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_array      [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_vector     [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_dict       [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_generator  [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_linked_list [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_doubly_linked_list [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_deque      [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_heap       [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_fibonacci_heap [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_tree       [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_trie       [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_stack      [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_queue      [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_binary_search_tree [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_bitset     [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_set        [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_map        [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_range      [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_bad_struct [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! type_bad_struct2 [ reduce using rule 120 (expr -> expr operator_mul expr .) ]
  ! lambda          [ reduce using rule 120 (expr -> expr operator_mul expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 265

    (121) expr -> expr operator_div expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 121 (expr -> expr operator_div expr .)
    else            reduce using rule 121 (expr -> expr operator_div expr .)
    return          reduce using rule 121 (expr -> expr operator_div expr .)
    del             reduce using rule 121 (expr -> expr operator_div expr .)
    for             reduce using rule 121 (expr -> expr operator_div expr .)
    if              reduce using rule 121 (expr -> expr operator_div expr .)
    elif            reduce using rule 121 (expr -> expr operator_div expr .)
    operator        reduce using rule 121 (expr -> expr operator_div expr .)
    struct          reduce using rule 121 (expr -> expr operator_div expr .)
    while           reduce using rule 121 (expr -> expr operator_div expr .)
    func            reduce using rule 121 (expr -> expr operator_div expr .)
    $end            reduce using rule 121 (expr -> expr operator_div expr .)
    }               reduce using rule 121 (expr -> expr operator_div expr .)
    operator_inner  reduce using rule 121 (expr -> expr operator_div expr .)
    {               reduce using rule 121 (expr -> expr operator_div expr .)
    )               reduce using rule 121 (expr -> expr operator_div expr .)
    ,               reduce using rule 121 (expr -> expr operator_div expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_sub    [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_mul    [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_div    [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_trudiv [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_pow    [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_join   [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_split  [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_scan   [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_reduc  [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_bitand [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_bitor  [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_bitxor [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_bitshiftleft [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_bitshiftright [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_and    [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_or     [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_xor    [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_contains [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_incr   [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_decr   [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_outer  [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_rotate [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_apply  [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_compose [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_over   [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_map    [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_less_than [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_less_than_equals [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_greater_than [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_greater_than_equals [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_equals [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_not_equals [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_smallest [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_greatest [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_goodname [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_bitnot [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_not    [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_reverse [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_sorted_incr [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_sorted_decr [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_s_combinator [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_s2_combinator [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! operator_goodname2 [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! VAR             [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! FLOAT           [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! NUM             [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! NULL            [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! STRING_3SQ      [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! STRING_3DQ      [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! STRING_SQ       [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! STRING_DQ       [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! true            [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! false           [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_type       [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_num        [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_any        [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_u64        [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_u32        [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_u16        [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_u8         [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_i64        [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_i32        [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_i16        [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_i8         [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_f32        [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_f64        [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_str        [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_list       [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_tuple      [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_array      [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_vector     [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_dict       [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_generator  [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_linked_list [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_doubly_linked_list [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_deque      [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_heap       [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_fibonacci_heap [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_tree       [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_trie       [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_stack      [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_queue      [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_binary_search_tree [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_bitset     [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_set        [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_map        [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_range      [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_bad_struct [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! type_bad_struct2 [ reduce using rule 121 (expr -> expr operator_div expr .) ]
  ! lambda          [ reduce using rule 121 (expr -> expr operator_div expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 266

    (122) expr -> expr operator_trudiv expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 122 (expr -> expr operator_trudiv expr .)
    else            reduce using rule 122 (expr -> expr operator_trudiv expr .)
    return          reduce using rule 122 (expr -> expr operator_trudiv expr .)
    del             reduce using rule 122 (expr -> expr operator_trudiv expr .)
    for             reduce using rule 122 (expr -> expr operator_trudiv expr .)
    if              reduce using rule 122 (expr -> expr operator_trudiv expr .)
    elif            reduce using rule 122 (expr -> expr operator_trudiv expr .)
    operator        reduce using rule 122 (expr -> expr operator_trudiv expr .)
    struct          reduce using rule 122 (expr -> expr operator_trudiv expr .)
    while           reduce using rule 122 (expr -> expr operator_trudiv expr .)
    func            reduce using rule 122 (expr -> expr operator_trudiv expr .)
    $end            reduce using rule 122 (expr -> expr operator_trudiv expr .)
    }               reduce using rule 122 (expr -> expr operator_trudiv expr .)
    operator_inner  reduce using rule 122 (expr -> expr operator_trudiv expr .)
    {               reduce using rule 122 (expr -> expr operator_trudiv expr .)
    )               reduce using rule 122 (expr -> expr operator_trudiv expr .)
    ,               reduce using rule 122 (expr -> expr operator_trudiv expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_sub    [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_mul    [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_div    [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_trudiv [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_pow    [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_join   [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_split  [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_scan   [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_reduc  [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_bitand [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_bitor  [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_bitxor [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_bitshiftleft [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_bitshiftright [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_and    [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_or     [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_xor    [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_contains [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_incr   [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_decr   [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_outer  [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_rotate [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_apply  [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_compose [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_over   [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_map    [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_less_than [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_less_than_equals [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_greater_than [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_greater_than_equals [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_equals [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_not_equals [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_smallest [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_greatest [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_goodname [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_bitnot [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_not    [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_reverse [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_sorted_incr [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_sorted_decr [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_s_combinator [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_s2_combinator [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! operator_goodname2 [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! VAR             [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! FLOAT           [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! NUM             [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! NULL            [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! STRING_3SQ      [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! STRING_3DQ      [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! STRING_SQ       [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! STRING_DQ       [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! true            [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! false           [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_type       [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_num        [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_any        [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_u64        [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_u32        [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_u16        [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_u8         [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_i64        [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_i32        [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_i16        [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_i8         [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_f32        [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_f64        [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_str        [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_list       [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_tuple      [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_array      [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_vector     [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_dict       [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_generator  [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_linked_list [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_doubly_linked_list [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_deque      [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_heap       [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_fibonacci_heap [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_tree       [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_trie       [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_stack      [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_queue      [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_binary_search_tree [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_bitset     [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_set        [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_map        [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_range      [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_bad_struct [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! type_bad_struct2 [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]
  ! lambda          [ reduce using rule 122 (expr -> expr operator_trudiv expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 267

    (123) expr -> expr operator_pow expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 123 (expr -> expr operator_pow expr .)
    else            reduce using rule 123 (expr -> expr operator_pow expr .)
    return          reduce using rule 123 (expr -> expr operator_pow expr .)
    del             reduce using rule 123 (expr -> expr operator_pow expr .)
    for             reduce using rule 123 (expr -> expr operator_pow expr .)
    if              reduce using rule 123 (expr -> expr operator_pow expr .)
    elif            reduce using rule 123 (expr -> expr operator_pow expr .)
    operator        reduce using rule 123 (expr -> expr operator_pow expr .)
    struct          reduce using rule 123 (expr -> expr operator_pow expr .)
    while           reduce using rule 123 (expr -> expr operator_pow expr .)
    func            reduce using rule 123 (expr -> expr operator_pow expr .)
    $end            reduce using rule 123 (expr -> expr operator_pow expr .)
    }               reduce using rule 123 (expr -> expr operator_pow expr .)
    operator_inner  reduce using rule 123 (expr -> expr operator_pow expr .)
    {               reduce using rule 123 (expr -> expr operator_pow expr .)
    )               reduce using rule 123 (expr -> expr operator_pow expr .)
    ,               reduce using rule 123 (expr -> expr operator_pow expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_sub    [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_mul    [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_div    [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_trudiv [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_pow    [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_join   [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_split  [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_scan   [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_reduc  [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_bitand [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_bitor  [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_bitxor [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_bitshiftleft [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_bitshiftright [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_and    [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_or     [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_xor    [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_contains [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_incr   [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_decr   [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_outer  [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_rotate [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_apply  [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_compose [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_over   [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_map    [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_less_than [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_less_than_equals [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_greater_than [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_greater_than_equals [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_equals [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_not_equals [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_smallest [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_greatest [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_goodname [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_bitnot [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_not    [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_reverse [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_sorted_incr [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_sorted_decr [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_s_combinator [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_s2_combinator [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! operator_goodname2 [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! VAR             [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! FLOAT           [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! NUM             [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! NULL            [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! STRING_3SQ      [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! STRING_3DQ      [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! STRING_SQ       [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! STRING_DQ       [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! true            [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! false           [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_type       [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_num        [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_any        [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_u64        [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_u32        [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_u16        [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_u8         [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_i64        [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_i32        [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_i16        [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_i8         [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_f32        [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_f64        [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_str        [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_list       [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_tuple      [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_array      [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_vector     [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_dict       [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_generator  [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_linked_list [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_doubly_linked_list [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_deque      [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_heap       [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_fibonacci_heap [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_tree       [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_trie       [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_stack      [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_queue      [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_binary_search_tree [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_bitset     [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_set        [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_map        [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_range      [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_bad_struct [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! type_bad_struct2 [ reduce using rule 123 (expr -> expr operator_pow expr .) ]
  ! lambda          [ reduce using rule 123 (expr -> expr operator_pow expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 268

    (124) expr -> expr operator_join expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 124 (expr -> expr operator_join expr .)
    else            reduce using rule 124 (expr -> expr operator_join expr .)
    return          reduce using rule 124 (expr -> expr operator_join expr .)
    del             reduce using rule 124 (expr -> expr operator_join expr .)
    for             reduce using rule 124 (expr -> expr operator_join expr .)
    if              reduce using rule 124 (expr -> expr operator_join expr .)
    elif            reduce using rule 124 (expr -> expr operator_join expr .)
    operator        reduce using rule 124 (expr -> expr operator_join expr .)
    struct          reduce using rule 124 (expr -> expr operator_join expr .)
    while           reduce using rule 124 (expr -> expr operator_join expr .)
    func            reduce using rule 124 (expr -> expr operator_join expr .)
    $end            reduce using rule 124 (expr -> expr operator_join expr .)
    }               reduce using rule 124 (expr -> expr operator_join expr .)
    operator_inner  reduce using rule 124 (expr -> expr operator_join expr .)
    {               reduce using rule 124 (expr -> expr operator_join expr .)
    )               reduce using rule 124 (expr -> expr operator_join expr .)
    ,               reduce using rule 124 (expr -> expr operator_join expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_sub    [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_mul    [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_div    [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_trudiv [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_pow    [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_join   [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_split  [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_scan   [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_reduc  [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_bitand [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_bitor  [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_bitxor [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_bitshiftleft [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_bitshiftright [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_and    [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_or     [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_xor    [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_contains [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_incr   [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_decr   [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_outer  [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_rotate [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_apply  [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_compose [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_over   [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_map    [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_less_than [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_less_than_equals [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_greater_than [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_greater_than_equals [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_equals [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_not_equals [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_smallest [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_greatest [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_goodname [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_bitnot [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_not    [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_reverse [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_sorted_incr [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_sorted_decr [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_s_combinator [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_s2_combinator [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! operator_goodname2 [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! VAR             [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! FLOAT           [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! NUM             [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! NULL            [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! STRING_3SQ      [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! STRING_3DQ      [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! STRING_SQ       [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! STRING_DQ       [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! true            [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! false           [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_type       [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_num        [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_any        [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_u64        [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_u32        [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_u16        [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_u8         [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_i64        [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_i32        [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_i16        [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_i8         [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_f32        [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_f64        [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_str        [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_list       [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_tuple      [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_array      [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_vector     [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_dict       [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_generator  [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_linked_list [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_doubly_linked_list [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_deque      [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_heap       [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_fibonacci_heap [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_tree       [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_trie       [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_stack      [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_queue      [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_binary_search_tree [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_bitset     [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_set        [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_map        [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_range      [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_bad_struct [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! type_bad_struct2 [ reduce using rule 124 (expr -> expr operator_join expr .) ]
  ! lambda          [ reduce using rule 124 (expr -> expr operator_join expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 269

    (125) expr -> expr operator_split expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 125 (expr -> expr operator_split expr .)
    else            reduce using rule 125 (expr -> expr operator_split expr .)
    return          reduce using rule 125 (expr -> expr operator_split expr .)
    del             reduce using rule 125 (expr -> expr operator_split expr .)
    for             reduce using rule 125 (expr -> expr operator_split expr .)
    if              reduce using rule 125 (expr -> expr operator_split expr .)
    elif            reduce using rule 125 (expr -> expr operator_split expr .)
    operator        reduce using rule 125 (expr -> expr operator_split expr .)
    struct          reduce using rule 125 (expr -> expr operator_split expr .)
    while           reduce using rule 125 (expr -> expr operator_split expr .)
    func            reduce using rule 125 (expr -> expr operator_split expr .)
    $end            reduce using rule 125 (expr -> expr operator_split expr .)
    }               reduce using rule 125 (expr -> expr operator_split expr .)
    operator_inner  reduce using rule 125 (expr -> expr operator_split expr .)
    {               reduce using rule 125 (expr -> expr operator_split expr .)
    )               reduce using rule 125 (expr -> expr operator_split expr .)
    ,               reduce using rule 125 (expr -> expr operator_split expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_sub    [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_mul    [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_div    [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_trudiv [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_pow    [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_join   [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_split  [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_scan   [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_reduc  [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_bitand [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_bitor  [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_bitxor [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_bitshiftleft [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_bitshiftright [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_and    [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_or     [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_xor    [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_contains [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_incr   [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_decr   [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_outer  [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_rotate [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_apply  [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_compose [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_over   [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_map    [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_less_than [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_less_than_equals [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_greater_than [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_greater_than_equals [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_equals [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_not_equals [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_smallest [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_greatest [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_goodname [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_bitnot [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_not    [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_reverse [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_sorted_incr [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_sorted_decr [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_s_combinator [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_s2_combinator [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! operator_goodname2 [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! VAR             [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! FLOAT           [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! NUM             [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! NULL            [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! STRING_3SQ      [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! STRING_3DQ      [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! STRING_SQ       [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! STRING_DQ       [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! true            [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! false           [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_type       [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_num        [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_any        [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_u64        [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_u32        [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_u16        [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_u8         [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_i64        [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_i32        [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_i16        [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_i8         [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_f32        [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_f64        [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_str        [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_list       [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_tuple      [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_array      [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_vector     [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_dict       [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_generator  [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_linked_list [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_doubly_linked_list [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_deque      [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_heap       [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_fibonacci_heap [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_tree       [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_trie       [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_stack      [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_queue      [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_binary_search_tree [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_bitset     [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_set        [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_map        [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_range      [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_bad_struct [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! type_bad_struct2 [ reduce using rule 125 (expr -> expr operator_split expr .) ]
  ! lambda          [ reduce using rule 125 (expr -> expr operator_split expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 270

    (126) expr -> expr operator_scan expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 126 (expr -> expr operator_scan expr .)
    else            reduce using rule 126 (expr -> expr operator_scan expr .)
    return          reduce using rule 126 (expr -> expr operator_scan expr .)
    del             reduce using rule 126 (expr -> expr operator_scan expr .)
    for             reduce using rule 126 (expr -> expr operator_scan expr .)
    if              reduce using rule 126 (expr -> expr operator_scan expr .)
    elif            reduce using rule 126 (expr -> expr operator_scan expr .)
    operator        reduce using rule 126 (expr -> expr operator_scan expr .)
    struct          reduce using rule 126 (expr -> expr operator_scan expr .)
    while           reduce using rule 126 (expr -> expr operator_scan expr .)
    func            reduce using rule 126 (expr -> expr operator_scan expr .)
    $end            reduce using rule 126 (expr -> expr operator_scan expr .)
    }               reduce using rule 126 (expr -> expr operator_scan expr .)
    operator_inner  reduce using rule 126 (expr -> expr operator_scan expr .)
    {               reduce using rule 126 (expr -> expr operator_scan expr .)
    )               reduce using rule 126 (expr -> expr operator_scan expr .)
    ,               reduce using rule 126 (expr -> expr operator_scan expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_sub    [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_mul    [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_div    [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_trudiv [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_pow    [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_join   [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_split  [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_scan   [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_reduc  [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_bitand [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_bitor  [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_bitxor [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_bitshiftleft [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_bitshiftright [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_and    [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_or     [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_xor    [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_contains [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_incr   [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_decr   [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_outer  [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_rotate [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_apply  [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_compose [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_over   [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_map    [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_less_than [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_less_than_equals [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_greater_than [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_greater_than_equals [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_equals [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_not_equals [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_smallest [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_greatest [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_goodname [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_bitnot [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_not    [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_reverse [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_sorted_incr [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_sorted_decr [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_s_combinator [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_s2_combinator [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! operator_goodname2 [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! VAR             [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! FLOAT           [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! NUM             [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! NULL            [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! STRING_3SQ      [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! STRING_3DQ      [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! STRING_SQ       [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! STRING_DQ       [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! true            [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! false           [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_type       [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_num        [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_any        [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_u64        [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_u32        [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_u16        [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_u8         [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_i64        [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_i32        [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_i16        [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_i8         [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_f32        [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_f64        [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_str        [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_list       [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_tuple      [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_array      [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_vector     [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_dict       [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_generator  [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_linked_list [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_doubly_linked_list [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_deque      [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_heap       [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_fibonacci_heap [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_tree       [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_trie       [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_stack      [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_queue      [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_binary_search_tree [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_bitset     [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_set        [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_map        [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_range      [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_bad_struct [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! type_bad_struct2 [ reduce using rule 126 (expr -> expr operator_scan expr .) ]
  ! lambda          [ reduce using rule 126 (expr -> expr operator_scan expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 271

    (127) expr -> expr operator_reduc expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 127 (expr -> expr operator_reduc expr .)
    else            reduce using rule 127 (expr -> expr operator_reduc expr .)
    return          reduce using rule 127 (expr -> expr operator_reduc expr .)
    del             reduce using rule 127 (expr -> expr operator_reduc expr .)
    for             reduce using rule 127 (expr -> expr operator_reduc expr .)
    if              reduce using rule 127 (expr -> expr operator_reduc expr .)
    elif            reduce using rule 127 (expr -> expr operator_reduc expr .)
    operator        reduce using rule 127 (expr -> expr operator_reduc expr .)
    struct          reduce using rule 127 (expr -> expr operator_reduc expr .)
    while           reduce using rule 127 (expr -> expr operator_reduc expr .)
    func            reduce using rule 127 (expr -> expr operator_reduc expr .)
    $end            reduce using rule 127 (expr -> expr operator_reduc expr .)
    }               reduce using rule 127 (expr -> expr operator_reduc expr .)
    operator_inner  reduce using rule 127 (expr -> expr operator_reduc expr .)
    {               reduce using rule 127 (expr -> expr operator_reduc expr .)
    )               reduce using rule 127 (expr -> expr operator_reduc expr .)
    ,               reduce using rule 127 (expr -> expr operator_reduc expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_sub    [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_mul    [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_div    [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_trudiv [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_pow    [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_join   [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_split  [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_scan   [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_reduc  [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_bitand [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_bitor  [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_bitxor [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_bitshiftleft [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_bitshiftright [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_and    [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_or     [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_xor    [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_contains [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_incr   [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_decr   [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_outer  [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_rotate [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_apply  [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_compose [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_over   [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_map    [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_less_than [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_less_than_equals [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_greater_than [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_greater_than_equals [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_equals [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_not_equals [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_smallest [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_greatest [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_goodname [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_bitnot [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_not    [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_reverse [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_sorted_incr [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_sorted_decr [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_s_combinator [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_s2_combinator [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! operator_goodname2 [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! VAR             [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! FLOAT           [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! NUM             [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! NULL            [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! STRING_3SQ      [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! STRING_3DQ      [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! STRING_SQ       [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! STRING_DQ       [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! true            [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! false           [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_type       [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_num        [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_any        [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_u64        [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_u32        [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_u16        [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_u8         [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_i64        [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_i32        [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_i16        [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_i8         [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_f32        [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_f64        [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_str        [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_list       [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_tuple      [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_array      [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_vector     [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_dict       [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_generator  [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_linked_list [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_doubly_linked_list [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_deque      [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_heap       [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_fibonacci_heap [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_tree       [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_trie       [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_stack      [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_queue      [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_binary_search_tree [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_bitset     [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_set        [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_map        [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_range      [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_bad_struct [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! type_bad_struct2 [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]
  ! lambda          [ reduce using rule 127 (expr -> expr operator_reduc expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 272

    (128) expr -> expr operator_bitand expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 128 (expr -> expr operator_bitand expr .)
    else            reduce using rule 128 (expr -> expr operator_bitand expr .)
    return          reduce using rule 128 (expr -> expr operator_bitand expr .)
    del             reduce using rule 128 (expr -> expr operator_bitand expr .)
    for             reduce using rule 128 (expr -> expr operator_bitand expr .)
    if              reduce using rule 128 (expr -> expr operator_bitand expr .)
    elif            reduce using rule 128 (expr -> expr operator_bitand expr .)
    operator        reduce using rule 128 (expr -> expr operator_bitand expr .)
    struct          reduce using rule 128 (expr -> expr operator_bitand expr .)
    while           reduce using rule 128 (expr -> expr operator_bitand expr .)
    func            reduce using rule 128 (expr -> expr operator_bitand expr .)
    $end            reduce using rule 128 (expr -> expr operator_bitand expr .)
    }               reduce using rule 128 (expr -> expr operator_bitand expr .)
    operator_inner  reduce using rule 128 (expr -> expr operator_bitand expr .)
    {               reduce using rule 128 (expr -> expr operator_bitand expr .)
    )               reduce using rule 128 (expr -> expr operator_bitand expr .)
    ,               reduce using rule 128 (expr -> expr operator_bitand expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_sub    [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_mul    [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_div    [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_trudiv [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_pow    [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_join   [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_split  [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_scan   [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_reduc  [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_bitand [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_bitor  [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_bitxor [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_bitshiftleft [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_bitshiftright [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_and    [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_or     [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_xor    [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_contains [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_incr   [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_decr   [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_outer  [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_rotate [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_apply  [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_compose [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_over   [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_map    [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_less_than [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_less_than_equals [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_greater_than [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_greater_than_equals [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_equals [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_not_equals [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_smallest [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_greatest [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_goodname [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_bitnot [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_not    [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_reverse [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_sorted_incr [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_sorted_decr [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_s_combinator [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_s2_combinator [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! operator_goodname2 [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! VAR             [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! FLOAT           [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! NUM             [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! NULL            [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! STRING_3SQ      [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! STRING_3DQ      [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! STRING_SQ       [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! STRING_DQ       [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! true            [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! false           [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_type       [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_num        [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_any        [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_u64        [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_u32        [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_u16        [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_u8         [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_i64        [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_i32        [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_i16        [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_i8         [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_f32        [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_f64        [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_str        [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_list       [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_tuple      [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_array      [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_vector     [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_dict       [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_generator  [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_linked_list [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_doubly_linked_list [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_deque      [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_heap       [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_fibonacci_heap [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_tree       [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_trie       [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_stack      [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_queue      [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_binary_search_tree [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_bitset     [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_set        [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_map        [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_range      [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_bad_struct [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! type_bad_struct2 [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]
  ! lambda          [ reduce using rule 128 (expr -> expr operator_bitand expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 273

    (129) expr -> expr operator_bitor expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 129 (expr -> expr operator_bitor expr .)
    else            reduce using rule 129 (expr -> expr operator_bitor expr .)
    return          reduce using rule 129 (expr -> expr operator_bitor expr .)
    del             reduce using rule 129 (expr -> expr operator_bitor expr .)
    for             reduce using rule 129 (expr -> expr operator_bitor expr .)
    if              reduce using rule 129 (expr -> expr operator_bitor expr .)
    elif            reduce using rule 129 (expr -> expr operator_bitor expr .)
    operator        reduce using rule 129 (expr -> expr operator_bitor expr .)
    struct          reduce using rule 129 (expr -> expr operator_bitor expr .)
    while           reduce using rule 129 (expr -> expr operator_bitor expr .)
    func            reduce using rule 129 (expr -> expr operator_bitor expr .)
    $end            reduce using rule 129 (expr -> expr operator_bitor expr .)
    }               reduce using rule 129 (expr -> expr operator_bitor expr .)
    operator_inner  reduce using rule 129 (expr -> expr operator_bitor expr .)
    {               reduce using rule 129 (expr -> expr operator_bitor expr .)
    )               reduce using rule 129 (expr -> expr operator_bitor expr .)
    ,               reduce using rule 129 (expr -> expr operator_bitor expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_sub    [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_mul    [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_div    [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_trudiv [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_pow    [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_join   [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_split  [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_scan   [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_reduc  [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_bitand [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_bitor  [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_bitxor [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_bitshiftleft [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_bitshiftright [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_and    [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_or     [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_xor    [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_contains [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_incr   [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_decr   [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_outer  [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_rotate [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_apply  [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_compose [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_over   [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_map    [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_less_than [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_less_than_equals [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_greater_than [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_greater_than_equals [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_equals [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_not_equals [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_smallest [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_greatest [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_goodname [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_bitnot [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_not    [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_reverse [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_sorted_incr [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_sorted_decr [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_s_combinator [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_s2_combinator [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! operator_goodname2 [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! VAR             [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! FLOAT           [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! NUM             [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! NULL            [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! STRING_3SQ      [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! STRING_3DQ      [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! STRING_SQ       [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! STRING_DQ       [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! true            [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! false           [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_type       [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_num        [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_any        [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_u64        [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_u32        [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_u16        [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_u8         [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_i64        [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_i32        [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_i16        [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_i8         [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_f32        [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_f64        [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_str        [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_list       [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_tuple      [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_array      [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_vector     [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_dict       [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_generator  [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_linked_list [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_doubly_linked_list [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_deque      [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_heap       [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_fibonacci_heap [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_tree       [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_trie       [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_stack      [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_queue      [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_binary_search_tree [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_bitset     [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_set        [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_map        [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_range      [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_bad_struct [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! type_bad_struct2 [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]
  ! lambda          [ reduce using rule 129 (expr -> expr operator_bitor expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 274

    (130) expr -> expr operator_bitxor expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 130 (expr -> expr operator_bitxor expr .)
    else            reduce using rule 130 (expr -> expr operator_bitxor expr .)
    return          reduce using rule 130 (expr -> expr operator_bitxor expr .)
    del             reduce using rule 130 (expr -> expr operator_bitxor expr .)
    for             reduce using rule 130 (expr -> expr operator_bitxor expr .)
    if              reduce using rule 130 (expr -> expr operator_bitxor expr .)
    elif            reduce using rule 130 (expr -> expr operator_bitxor expr .)
    operator        reduce using rule 130 (expr -> expr operator_bitxor expr .)
    struct          reduce using rule 130 (expr -> expr operator_bitxor expr .)
    while           reduce using rule 130 (expr -> expr operator_bitxor expr .)
    func            reduce using rule 130 (expr -> expr operator_bitxor expr .)
    $end            reduce using rule 130 (expr -> expr operator_bitxor expr .)
    }               reduce using rule 130 (expr -> expr operator_bitxor expr .)
    operator_inner  reduce using rule 130 (expr -> expr operator_bitxor expr .)
    {               reduce using rule 130 (expr -> expr operator_bitxor expr .)
    )               reduce using rule 130 (expr -> expr operator_bitxor expr .)
    ,               reduce using rule 130 (expr -> expr operator_bitxor expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_sub    [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_mul    [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_div    [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_trudiv [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_pow    [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_join   [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_split  [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_scan   [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_reduc  [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_bitand [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_bitor  [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_bitxor [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_bitshiftleft [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_bitshiftright [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_and    [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_or     [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_xor    [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_contains [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_incr   [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_decr   [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_outer  [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_rotate [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_apply  [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_compose [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_over   [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_map    [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_less_than [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_less_than_equals [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_greater_than [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_greater_than_equals [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_equals [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_not_equals [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_smallest [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_greatest [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_goodname [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_bitnot [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_not    [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_reverse [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_sorted_incr [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_sorted_decr [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_s_combinator [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_s2_combinator [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! operator_goodname2 [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! VAR             [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! FLOAT           [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! NUM             [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! NULL            [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! STRING_3SQ      [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! STRING_3DQ      [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! STRING_SQ       [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! STRING_DQ       [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! true            [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! false           [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_type       [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_num        [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_any        [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_u64        [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_u32        [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_u16        [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_u8         [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_i64        [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_i32        [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_i16        [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_i8         [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_f32        [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_f64        [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_str        [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_list       [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_tuple      [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_array      [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_vector     [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_dict       [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_generator  [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_linked_list [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_doubly_linked_list [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_deque      [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_heap       [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_fibonacci_heap [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_tree       [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_trie       [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_stack      [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_queue      [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_binary_search_tree [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_bitset     [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_set        [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_map        [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_range      [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_bad_struct [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! type_bad_struct2 [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]
  ! lambda          [ reduce using rule 130 (expr -> expr operator_bitxor expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 275

    (131) expr -> expr operator_bitshiftleft expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 131 (expr -> expr operator_bitshiftleft expr .)
    else            reduce using rule 131 (expr -> expr operator_bitshiftleft expr .)
    return          reduce using rule 131 (expr -> expr operator_bitshiftleft expr .)
    del             reduce using rule 131 (expr -> expr operator_bitshiftleft expr .)
    for             reduce using rule 131 (expr -> expr operator_bitshiftleft expr .)
    if              reduce using rule 131 (expr -> expr operator_bitshiftleft expr .)
    elif            reduce using rule 131 (expr -> expr operator_bitshiftleft expr .)
    operator        reduce using rule 131 (expr -> expr operator_bitshiftleft expr .)
    struct          reduce using rule 131 (expr -> expr operator_bitshiftleft expr .)
    while           reduce using rule 131 (expr -> expr operator_bitshiftleft expr .)
    func            reduce using rule 131 (expr -> expr operator_bitshiftleft expr .)
    $end            reduce using rule 131 (expr -> expr operator_bitshiftleft expr .)
    }               reduce using rule 131 (expr -> expr operator_bitshiftleft expr .)
    operator_inner  reduce using rule 131 (expr -> expr operator_bitshiftleft expr .)
    {               reduce using rule 131 (expr -> expr operator_bitshiftleft expr .)
    )               reduce using rule 131 (expr -> expr operator_bitshiftleft expr .)
    ,               reduce using rule 131 (expr -> expr operator_bitshiftleft expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_sub    [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_mul    [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_div    [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_trudiv [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_pow    [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_join   [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_split  [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_scan   [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_reduc  [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_bitand [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_bitor  [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_bitxor [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_bitshiftleft [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_bitshiftright [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_and    [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_or     [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_xor    [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_contains [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_incr   [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_decr   [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_outer  [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_rotate [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_apply  [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_compose [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_over   [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_map    [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_less_than [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_less_than_equals [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_greater_than [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_greater_than_equals [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_equals [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_not_equals [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_smallest [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_greatest [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_goodname [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_bitnot [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_not    [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_reverse [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_sorted_incr [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_sorted_decr [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_s_combinator [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_s2_combinator [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_goodname2 [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! VAR             [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! FLOAT           [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! NUM             [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! NULL            [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! STRING_3SQ      [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! STRING_3DQ      [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! STRING_SQ       [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! STRING_DQ       [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! true            [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! false           [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_type       [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_num        [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_any        [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_u64        [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_u32        [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_u16        [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_u8         [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_i64        [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_i32        [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_i16        [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_i8         [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_f32        [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_f64        [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_str        [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_list       [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_tuple      [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_array      [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_vector     [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_dict       [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_generator  [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_linked_list [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_doubly_linked_list [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_deque      [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_heap       [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_fibonacci_heap [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_tree       [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_trie       [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_stack      [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_queue      [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_binary_search_tree [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_bitset     [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_set        [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_map        [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_range      [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_bad_struct [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! type_bad_struct2 [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]
  ! lambda          [ reduce using rule 131 (expr -> expr operator_bitshiftleft expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 276

    (132) expr -> expr operator_bitshiftright expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 132 (expr -> expr operator_bitshiftright expr .)
    else            reduce using rule 132 (expr -> expr operator_bitshiftright expr .)
    return          reduce using rule 132 (expr -> expr operator_bitshiftright expr .)
    del             reduce using rule 132 (expr -> expr operator_bitshiftright expr .)
    for             reduce using rule 132 (expr -> expr operator_bitshiftright expr .)
    if              reduce using rule 132 (expr -> expr operator_bitshiftright expr .)
    elif            reduce using rule 132 (expr -> expr operator_bitshiftright expr .)
    operator        reduce using rule 132 (expr -> expr operator_bitshiftright expr .)
    struct          reduce using rule 132 (expr -> expr operator_bitshiftright expr .)
    while           reduce using rule 132 (expr -> expr operator_bitshiftright expr .)
    func            reduce using rule 132 (expr -> expr operator_bitshiftright expr .)
    $end            reduce using rule 132 (expr -> expr operator_bitshiftright expr .)
    }               reduce using rule 132 (expr -> expr operator_bitshiftright expr .)
    operator_inner  reduce using rule 132 (expr -> expr operator_bitshiftright expr .)
    {               reduce using rule 132 (expr -> expr operator_bitshiftright expr .)
    )               reduce using rule 132 (expr -> expr operator_bitshiftright expr .)
    ,               reduce using rule 132 (expr -> expr operator_bitshiftright expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_sub    [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_mul    [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_div    [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_trudiv [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_pow    [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_join   [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_split  [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_scan   [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_reduc  [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_bitand [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_bitor  [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_bitxor [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_bitshiftleft [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_bitshiftright [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_and    [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_or     [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_xor    [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_contains [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_incr   [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_decr   [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_outer  [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_rotate [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_apply  [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_compose [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_over   [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_map    [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_less_than [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_less_than_equals [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_greater_than [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_greater_than_equals [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_equals [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_not_equals [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_smallest [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_greatest [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_goodname [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_bitnot [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_not    [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_reverse [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_sorted_incr [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_sorted_decr [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_s_combinator [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_s2_combinator [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_goodname2 [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! VAR             [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! FLOAT           [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! NUM             [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! NULL            [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! STRING_3SQ      [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! STRING_3DQ      [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! STRING_SQ       [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! STRING_DQ       [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! true            [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! false           [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_type       [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_num        [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_any        [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_u64        [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_u32        [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_u16        [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_u8         [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_i64        [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_i32        [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_i16        [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_i8         [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_f32        [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_f64        [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_str        [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_list       [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_tuple      [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_array      [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_vector     [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_dict       [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_generator  [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_linked_list [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_doubly_linked_list [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_deque      [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_heap       [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_fibonacci_heap [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_tree       [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_trie       [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_stack      [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_queue      [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_binary_search_tree [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_bitset     [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_set        [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_map        [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_range      [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_bad_struct [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! type_bad_struct2 [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]
  ! lambda          [ reduce using rule 132 (expr -> expr operator_bitshiftright expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 277

    (133) expr -> expr operator_and expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 133 (expr -> expr operator_and expr .)
    else            reduce using rule 133 (expr -> expr operator_and expr .)
    return          reduce using rule 133 (expr -> expr operator_and expr .)
    del             reduce using rule 133 (expr -> expr operator_and expr .)
    for             reduce using rule 133 (expr -> expr operator_and expr .)
    if              reduce using rule 133 (expr -> expr operator_and expr .)
    elif            reduce using rule 133 (expr -> expr operator_and expr .)
    operator        reduce using rule 133 (expr -> expr operator_and expr .)
    struct          reduce using rule 133 (expr -> expr operator_and expr .)
    while           reduce using rule 133 (expr -> expr operator_and expr .)
    func            reduce using rule 133 (expr -> expr operator_and expr .)
    $end            reduce using rule 133 (expr -> expr operator_and expr .)
    }               reduce using rule 133 (expr -> expr operator_and expr .)
    operator_inner  reduce using rule 133 (expr -> expr operator_and expr .)
    {               reduce using rule 133 (expr -> expr operator_and expr .)
    )               reduce using rule 133 (expr -> expr operator_and expr .)
    ,               reduce using rule 133 (expr -> expr operator_and expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_sub    [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_mul    [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_div    [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_trudiv [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_pow    [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_join   [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_split  [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_scan   [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_reduc  [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_bitand [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_bitor  [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_bitxor [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_bitshiftleft [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_bitshiftright [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_and    [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_or     [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_xor    [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_contains [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_incr   [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_decr   [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_outer  [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_rotate [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_apply  [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_compose [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_over   [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_map    [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_less_than [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_less_than_equals [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_greater_than [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_greater_than_equals [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_equals [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_not_equals [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_smallest [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_greatest [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_goodname [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_bitnot [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_not    [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_reverse [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_sorted_incr [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_sorted_decr [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_s_combinator [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_s2_combinator [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! operator_goodname2 [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! VAR             [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! FLOAT           [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! NUM             [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! NULL            [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! STRING_3SQ      [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! STRING_3DQ      [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! STRING_SQ       [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! STRING_DQ       [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! true            [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! false           [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_type       [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_num        [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_any        [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_u64        [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_u32        [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_u16        [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_u8         [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_i64        [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_i32        [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_i16        [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_i8         [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_f32        [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_f64        [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_str        [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_list       [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_tuple      [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_array      [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_vector     [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_dict       [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_generator  [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_linked_list [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_doubly_linked_list [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_deque      [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_heap       [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_fibonacci_heap [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_tree       [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_trie       [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_stack      [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_queue      [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_binary_search_tree [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_bitset     [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_set        [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_map        [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_range      [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_bad_struct [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! type_bad_struct2 [ reduce using rule 133 (expr -> expr operator_and expr .) ]
  ! lambda          [ reduce using rule 133 (expr -> expr operator_and expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 278

    (134) expr -> expr operator_or expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 134 (expr -> expr operator_or expr .)
    else            reduce using rule 134 (expr -> expr operator_or expr .)
    return          reduce using rule 134 (expr -> expr operator_or expr .)
    del             reduce using rule 134 (expr -> expr operator_or expr .)
    for             reduce using rule 134 (expr -> expr operator_or expr .)
    if              reduce using rule 134 (expr -> expr operator_or expr .)
    elif            reduce using rule 134 (expr -> expr operator_or expr .)
    operator        reduce using rule 134 (expr -> expr operator_or expr .)
    struct          reduce using rule 134 (expr -> expr operator_or expr .)
    while           reduce using rule 134 (expr -> expr operator_or expr .)
    func            reduce using rule 134 (expr -> expr operator_or expr .)
    $end            reduce using rule 134 (expr -> expr operator_or expr .)
    }               reduce using rule 134 (expr -> expr operator_or expr .)
    operator_inner  reduce using rule 134 (expr -> expr operator_or expr .)
    {               reduce using rule 134 (expr -> expr operator_or expr .)
    )               reduce using rule 134 (expr -> expr operator_or expr .)
    ,               reduce using rule 134 (expr -> expr operator_or expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_sub    [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_mul    [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_div    [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_trudiv [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_pow    [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_join   [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_split  [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_scan   [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_reduc  [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_bitand [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_bitor  [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_bitxor [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_bitshiftleft [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_bitshiftright [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_and    [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_or     [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_xor    [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_contains [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_incr   [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_decr   [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_outer  [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_rotate [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_apply  [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_compose [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_over   [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_map    [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_less_than [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_less_than_equals [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_greater_than [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_greater_than_equals [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_equals [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_not_equals [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_smallest [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_greatest [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_goodname [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_bitnot [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_not    [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_reverse [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_sorted_incr [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_sorted_decr [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_s_combinator [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_s2_combinator [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! operator_goodname2 [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! VAR             [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! FLOAT           [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! NUM             [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! NULL            [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! STRING_3SQ      [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! STRING_3DQ      [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! STRING_SQ       [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! STRING_DQ       [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! true            [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! false           [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_type       [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_num        [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_any        [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_u64        [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_u32        [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_u16        [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_u8         [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_i64        [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_i32        [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_i16        [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_i8         [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_f32        [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_f64        [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_str        [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_list       [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_tuple      [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_array      [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_vector     [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_dict       [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_generator  [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_linked_list [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_doubly_linked_list [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_deque      [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_heap       [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_fibonacci_heap [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_tree       [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_trie       [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_stack      [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_queue      [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_binary_search_tree [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_bitset     [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_set        [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_map        [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_range      [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_bad_struct [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! type_bad_struct2 [ reduce using rule 134 (expr -> expr operator_or expr .) ]
  ! lambda          [ reduce using rule 134 (expr -> expr operator_or expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 279

    (135) expr -> expr operator_xor expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 135 (expr -> expr operator_xor expr .)
    else            reduce using rule 135 (expr -> expr operator_xor expr .)
    return          reduce using rule 135 (expr -> expr operator_xor expr .)
    del             reduce using rule 135 (expr -> expr operator_xor expr .)
    for             reduce using rule 135 (expr -> expr operator_xor expr .)
    if              reduce using rule 135 (expr -> expr operator_xor expr .)
    elif            reduce using rule 135 (expr -> expr operator_xor expr .)
    operator        reduce using rule 135 (expr -> expr operator_xor expr .)
    struct          reduce using rule 135 (expr -> expr operator_xor expr .)
    while           reduce using rule 135 (expr -> expr operator_xor expr .)
    func            reduce using rule 135 (expr -> expr operator_xor expr .)
    $end            reduce using rule 135 (expr -> expr operator_xor expr .)
    }               reduce using rule 135 (expr -> expr operator_xor expr .)
    operator_inner  reduce using rule 135 (expr -> expr operator_xor expr .)
    {               reduce using rule 135 (expr -> expr operator_xor expr .)
    )               reduce using rule 135 (expr -> expr operator_xor expr .)
    ,               reduce using rule 135 (expr -> expr operator_xor expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_sub    [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_mul    [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_div    [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_trudiv [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_pow    [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_join   [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_split  [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_scan   [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_reduc  [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_bitand [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_bitor  [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_bitxor [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_bitshiftleft [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_bitshiftright [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_and    [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_or     [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_xor    [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_contains [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_incr   [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_decr   [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_outer  [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_rotate [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_apply  [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_compose [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_over   [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_map    [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_less_than [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_less_than_equals [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_greater_than [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_greater_than_equals [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_equals [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_not_equals [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_smallest [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_greatest [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_goodname [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_bitnot [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_not    [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_reverse [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_sorted_incr [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_sorted_decr [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_s_combinator [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_s2_combinator [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! operator_goodname2 [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! VAR             [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! FLOAT           [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! NUM             [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! NULL            [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! STRING_3SQ      [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! STRING_3DQ      [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! STRING_SQ       [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! STRING_DQ       [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! true            [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! false           [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_type       [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_num        [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_any        [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_u64        [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_u32        [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_u16        [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_u8         [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_i64        [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_i32        [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_i16        [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_i8         [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_f32        [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_f64        [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_str        [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_list       [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_tuple      [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_array      [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_vector     [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_dict       [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_generator  [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_linked_list [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_doubly_linked_list [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_deque      [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_heap       [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_fibonacci_heap [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_tree       [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_trie       [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_stack      [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_queue      [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_binary_search_tree [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_bitset     [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_set        [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_map        [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_range      [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_bad_struct [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! type_bad_struct2 [ reduce using rule 135 (expr -> expr operator_xor expr .) ]
  ! lambda          [ reduce using rule 135 (expr -> expr operator_xor expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 280

    (136) expr -> expr operator_contains expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 136 (expr -> expr operator_contains expr .)
    else            reduce using rule 136 (expr -> expr operator_contains expr .)
    return          reduce using rule 136 (expr -> expr operator_contains expr .)
    del             reduce using rule 136 (expr -> expr operator_contains expr .)
    for             reduce using rule 136 (expr -> expr operator_contains expr .)
    if              reduce using rule 136 (expr -> expr operator_contains expr .)
    elif            reduce using rule 136 (expr -> expr operator_contains expr .)
    operator        reduce using rule 136 (expr -> expr operator_contains expr .)
    struct          reduce using rule 136 (expr -> expr operator_contains expr .)
    while           reduce using rule 136 (expr -> expr operator_contains expr .)
    func            reduce using rule 136 (expr -> expr operator_contains expr .)
    $end            reduce using rule 136 (expr -> expr operator_contains expr .)
    }               reduce using rule 136 (expr -> expr operator_contains expr .)
    operator_inner  reduce using rule 136 (expr -> expr operator_contains expr .)
    {               reduce using rule 136 (expr -> expr operator_contains expr .)
    )               reduce using rule 136 (expr -> expr operator_contains expr .)
    ,               reduce using rule 136 (expr -> expr operator_contains expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_sub    [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_mul    [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_div    [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_trudiv [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_pow    [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_join   [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_split  [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_scan   [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_reduc  [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_bitand [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_bitor  [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_bitxor [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_bitshiftleft [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_bitshiftright [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_and    [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_or     [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_xor    [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_contains [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_incr   [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_decr   [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_outer  [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_rotate [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_apply  [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_compose [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_over   [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_map    [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_less_than [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_less_than_equals [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_greater_than [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_greater_than_equals [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_equals [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_not_equals [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_smallest [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_greatest [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_goodname [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_bitnot [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_not    [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_reverse [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_sorted_incr [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_sorted_decr [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_s_combinator [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_s2_combinator [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! operator_goodname2 [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! VAR             [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! FLOAT           [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! NUM             [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! NULL            [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! STRING_3SQ      [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! STRING_3DQ      [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! STRING_SQ       [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! STRING_DQ       [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! true            [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! false           [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_type       [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_num        [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_any        [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_u64        [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_u32        [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_u16        [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_u8         [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_i64        [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_i32        [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_i16        [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_i8         [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_f32        [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_f64        [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_str        [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_list       [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_tuple      [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_array      [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_vector     [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_dict       [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_generator  [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_linked_list [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_doubly_linked_list [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_deque      [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_heap       [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_fibonacci_heap [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_tree       [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_trie       [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_stack      [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_queue      [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_binary_search_tree [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_bitset     [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_set        [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_map        [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_range      [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_bad_struct [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! type_bad_struct2 [ reduce using rule 136 (expr -> expr operator_contains expr .) ]
  ! lambda          [ reduce using rule 136 (expr -> expr operator_contains expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 281

    (141) expr -> expr operator_outer expr . expr
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 380
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 282

    (144) expr -> expr operator_rotate expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 144 (expr -> expr operator_rotate expr .)
    else            reduce using rule 144 (expr -> expr operator_rotate expr .)
    return          reduce using rule 144 (expr -> expr operator_rotate expr .)
    del             reduce using rule 144 (expr -> expr operator_rotate expr .)
    for             reduce using rule 144 (expr -> expr operator_rotate expr .)
    if              reduce using rule 144 (expr -> expr operator_rotate expr .)
    elif            reduce using rule 144 (expr -> expr operator_rotate expr .)
    operator        reduce using rule 144 (expr -> expr operator_rotate expr .)
    struct          reduce using rule 144 (expr -> expr operator_rotate expr .)
    while           reduce using rule 144 (expr -> expr operator_rotate expr .)
    func            reduce using rule 144 (expr -> expr operator_rotate expr .)
    $end            reduce using rule 144 (expr -> expr operator_rotate expr .)
    }               reduce using rule 144 (expr -> expr operator_rotate expr .)
    operator_inner  reduce using rule 144 (expr -> expr operator_rotate expr .)
    {               reduce using rule 144 (expr -> expr operator_rotate expr .)
    )               reduce using rule 144 (expr -> expr operator_rotate expr .)
    ,               reduce using rule 144 (expr -> expr operator_rotate expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_sub    [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_mul    [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_div    [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_trudiv [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_pow    [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_join   [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_split  [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_scan   [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_reduc  [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_bitand [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_bitor  [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_bitxor [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_bitshiftleft [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_bitshiftright [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_and    [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_or     [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_xor    [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_contains [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_incr   [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_decr   [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_outer  [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_rotate [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_apply  [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_compose [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_over   [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_map    [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_less_than [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_less_than_equals [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_greater_than [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_greater_than_equals [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_equals [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_not_equals [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_smallest [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_greatest [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_goodname [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_bitnot [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_not    [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_reverse [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_sorted_incr [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_sorted_decr [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_s_combinator [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_s2_combinator [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! operator_goodname2 [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! VAR             [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! FLOAT           [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! NUM             [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! NULL            [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! STRING_3SQ      [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! STRING_3DQ      [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! STRING_SQ       [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! STRING_DQ       [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! true            [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! false           [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_type       [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_num        [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_any        [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_u64        [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_u32        [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_u16        [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_u8         [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_i64        [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_i32        [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_i16        [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_i8         [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_f32        [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_f64        [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_str        [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_list       [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_tuple      [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_array      [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_vector     [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_dict       [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_generator  [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_linked_list [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_doubly_linked_list [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_deque      [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_heap       [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_fibonacci_heap [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_tree       [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_trie       [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_stack      [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_queue      [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_binary_search_tree [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_bitset     [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_set        [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_map        [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_range      [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_bad_struct [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! type_bad_struct2 [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]
  ! lambda          [ reduce using rule 144 (expr -> expr operator_rotate expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 283

    (145) expr -> expr operator_apply expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 145 (expr -> expr operator_apply expr .)
    else            reduce using rule 145 (expr -> expr operator_apply expr .)
    return          reduce using rule 145 (expr -> expr operator_apply expr .)
    del             reduce using rule 145 (expr -> expr operator_apply expr .)
    for             reduce using rule 145 (expr -> expr operator_apply expr .)
    if              reduce using rule 145 (expr -> expr operator_apply expr .)
    elif            reduce using rule 145 (expr -> expr operator_apply expr .)
    operator        reduce using rule 145 (expr -> expr operator_apply expr .)
    struct          reduce using rule 145 (expr -> expr operator_apply expr .)
    while           reduce using rule 145 (expr -> expr operator_apply expr .)
    func            reduce using rule 145 (expr -> expr operator_apply expr .)
    $end            reduce using rule 145 (expr -> expr operator_apply expr .)
    }               reduce using rule 145 (expr -> expr operator_apply expr .)
    operator_inner  reduce using rule 145 (expr -> expr operator_apply expr .)
    {               reduce using rule 145 (expr -> expr operator_apply expr .)
    )               reduce using rule 145 (expr -> expr operator_apply expr .)
    ,               reduce using rule 145 (expr -> expr operator_apply expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_sub    [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_mul    [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_div    [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_trudiv [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_pow    [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_join   [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_split  [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_scan   [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_reduc  [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_bitand [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_bitor  [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_bitxor [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_bitshiftleft [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_bitshiftright [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_and    [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_or     [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_xor    [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_contains [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_incr   [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_decr   [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_outer  [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_rotate [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_apply  [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_compose [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_over   [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_map    [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_less_than [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_less_than_equals [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_greater_than [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_greater_than_equals [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_equals [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_not_equals [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_smallest [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_greatest [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_goodname [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_bitnot [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_not    [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_reverse [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_sorted_incr [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_sorted_decr [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_s_combinator [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_s2_combinator [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! operator_goodname2 [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! VAR             [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! FLOAT           [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! NUM             [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! NULL            [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! STRING_3SQ      [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! STRING_3DQ      [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! STRING_SQ       [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! STRING_DQ       [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! true            [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! false           [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_type       [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_num        [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_any        [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_u64        [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_u32        [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_u16        [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_u8         [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_i64        [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_i32        [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_i16        [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_i8         [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_f32        [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_f64        [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_str        [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_list       [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_tuple      [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_array      [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_vector     [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_dict       [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_generator  [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_linked_list [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_doubly_linked_list [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_deque      [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_heap       [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_fibonacci_heap [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_tree       [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_trie       [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_stack      [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_queue      [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_binary_search_tree [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_bitset     [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_set        [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_map        [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_range      [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_bad_struct [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! type_bad_struct2 [ reduce using rule 145 (expr -> expr operator_apply expr .) ]
  ! lambda          [ reduce using rule 145 (expr -> expr operator_apply expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 284

    (146) expr -> expr operator_compose expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 146 (expr -> expr operator_compose expr .)
    else            reduce using rule 146 (expr -> expr operator_compose expr .)
    return          reduce using rule 146 (expr -> expr operator_compose expr .)
    del             reduce using rule 146 (expr -> expr operator_compose expr .)
    for             reduce using rule 146 (expr -> expr operator_compose expr .)
    if              reduce using rule 146 (expr -> expr operator_compose expr .)
    elif            reduce using rule 146 (expr -> expr operator_compose expr .)
    operator        reduce using rule 146 (expr -> expr operator_compose expr .)
    struct          reduce using rule 146 (expr -> expr operator_compose expr .)
    while           reduce using rule 146 (expr -> expr operator_compose expr .)
    func            reduce using rule 146 (expr -> expr operator_compose expr .)
    $end            reduce using rule 146 (expr -> expr operator_compose expr .)
    }               reduce using rule 146 (expr -> expr operator_compose expr .)
    operator_inner  reduce using rule 146 (expr -> expr operator_compose expr .)
    {               reduce using rule 146 (expr -> expr operator_compose expr .)
    )               reduce using rule 146 (expr -> expr operator_compose expr .)
    ,               reduce using rule 146 (expr -> expr operator_compose expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_sub    [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_mul    [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_div    [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_trudiv [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_pow    [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_join   [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_split  [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_scan   [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_reduc  [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_bitand [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_bitor  [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_bitxor [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_bitshiftleft [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_bitshiftright [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_and    [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_or     [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_xor    [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_contains [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_incr   [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_decr   [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_outer  [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_rotate [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_apply  [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_compose [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_over   [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_map    [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_less_than [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_less_than_equals [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_greater_than [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_greater_than_equals [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_equals [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_not_equals [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_smallest [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_greatest [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_goodname [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_bitnot [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_not    [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_reverse [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_sorted_incr [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_sorted_decr [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_s_combinator [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_s2_combinator [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! operator_goodname2 [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! VAR             [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! FLOAT           [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! NUM             [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! NULL            [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! STRING_3SQ      [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! STRING_3DQ      [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! STRING_SQ       [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! STRING_DQ       [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! true            [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! false           [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_type       [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_num        [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_any        [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_u64        [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_u32        [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_u16        [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_u8         [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_i64        [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_i32        [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_i16        [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_i8         [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_f32        [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_f64        [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_str        [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_list       [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_tuple      [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_array      [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_vector     [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_dict       [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_generator  [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_linked_list [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_doubly_linked_list [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_deque      [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_heap       [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_fibonacci_heap [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_tree       [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_trie       [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_stack      [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_queue      [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_binary_search_tree [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_bitset     [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_set        [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_map        [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_range      [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_bad_struct [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! type_bad_struct2 [ reduce using rule 146 (expr -> expr operator_compose expr .) ]
  ! lambda          [ reduce using rule 146 (expr -> expr operator_compose expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 285

    (147) expr -> expr operator_over expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 147 (expr -> expr operator_over expr .)
    else            reduce using rule 147 (expr -> expr operator_over expr .)
    return          reduce using rule 147 (expr -> expr operator_over expr .)
    del             reduce using rule 147 (expr -> expr operator_over expr .)
    for             reduce using rule 147 (expr -> expr operator_over expr .)
    if              reduce using rule 147 (expr -> expr operator_over expr .)
    elif            reduce using rule 147 (expr -> expr operator_over expr .)
    operator        reduce using rule 147 (expr -> expr operator_over expr .)
    struct          reduce using rule 147 (expr -> expr operator_over expr .)
    while           reduce using rule 147 (expr -> expr operator_over expr .)
    func            reduce using rule 147 (expr -> expr operator_over expr .)
    $end            reduce using rule 147 (expr -> expr operator_over expr .)
    }               reduce using rule 147 (expr -> expr operator_over expr .)
    operator_inner  reduce using rule 147 (expr -> expr operator_over expr .)
    {               reduce using rule 147 (expr -> expr operator_over expr .)
    )               reduce using rule 147 (expr -> expr operator_over expr .)
    ,               reduce using rule 147 (expr -> expr operator_over expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_sub    [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_mul    [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_div    [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_trudiv [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_pow    [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_join   [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_split  [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_scan   [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_reduc  [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_bitand [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_bitor  [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_bitxor [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_bitshiftleft [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_bitshiftright [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_and    [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_or     [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_xor    [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_contains [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_incr   [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_decr   [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_outer  [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_rotate [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_apply  [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_compose [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_over   [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_map    [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_less_than [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_less_than_equals [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_greater_than [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_greater_than_equals [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_equals [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_not_equals [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_smallest [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_greatest [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_goodname [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_bitnot [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_not    [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_reverse [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_sorted_incr [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_sorted_decr [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_s_combinator [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_s2_combinator [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! operator_goodname2 [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! VAR             [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! FLOAT           [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! NUM             [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! NULL            [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! STRING_3SQ      [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! STRING_3DQ      [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! STRING_SQ       [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! STRING_DQ       [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! true            [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! false           [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_type       [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_num        [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_any        [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_u64        [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_u32        [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_u16        [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_u8         [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_i64        [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_i32        [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_i16        [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_i8         [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_f32        [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_f64        [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_str        [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_list       [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_tuple      [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_array      [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_vector     [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_dict       [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_generator  [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_linked_list [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_doubly_linked_list [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_deque      [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_heap       [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_fibonacci_heap [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_tree       [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_trie       [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_stack      [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_queue      [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_binary_search_tree [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_bitset     [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_set        [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_map        [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_range      [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_bad_struct [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! type_bad_struct2 [ reduce using rule 147 (expr -> expr operator_over expr .) ]
  ! lambda          [ reduce using rule 147 (expr -> expr operator_over expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 286

    (151) expr -> expr operator_less_than expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 151 (expr -> expr operator_less_than expr .)
    else            reduce using rule 151 (expr -> expr operator_less_than expr .)
    return          reduce using rule 151 (expr -> expr operator_less_than expr .)
    del             reduce using rule 151 (expr -> expr operator_less_than expr .)
    for             reduce using rule 151 (expr -> expr operator_less_than expr .)
    if              reduce using rule 151 (expr -> expr operator_less_than expr .)
    elif            reduce using rule 151 (expr -> expr operator_less_than expr .)
    operator        reduce using rule 151 (expr -> expr operator_less_than expr .)
    struct          reduce using rule 151 (expr -> expr operator_less_than expr .)
    while           reduce using rule 151 (expr -> expr operator_less_than expr .)
    func            reduce using rule 151 (expr -> expr operator_less_than expr .)
    $end            reduce using rule 151 (expr -> expr operator_less_than expr .)
    }               reduce using rule 151 (expr -> expr operator_less_than expr .)
    operator_inner  reduce using rule 151 (expr -> expr operator_less_than expr .)
    {               reduce using rule 151 (expr -> expr operator_less_than expr .)
    )               reduce using rule 151 (expr -> expr operator_less_than expr .)
    ,               reduce using rule 151 (expr -> expr operator_less_than expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_sub    [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_mul    [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_div    [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_trudiv [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_pow    [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_join   [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_split  [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_scan   [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_reduc  [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_bitand [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_bitor  [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_bitxor [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_bitshiftleft [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_bitshiftright [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_and    [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_or     [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_xor    [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_contains [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_incr   [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_decr   [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_outer  [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_rotate [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_apply  [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_compose [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_over   [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_map    [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_less_than [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_less_than_equals [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_greater_than [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_greater_than_equals [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_equals [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_not_equals [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_smallest [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_greatest [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_goodname [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_bitnot [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_not    [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_reverse [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_sorted_incr [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_sorted_decr [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_s_combinator [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_s2_combinator [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! operator_goodname2 [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! VAR             [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! FLOAT           [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! NUM             [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! NULL            [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! STRING_3SQ      [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! STRING_3DQ      [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! STRING_SQ       [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! STRING_DQ       [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! true            [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! false           [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_type       [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_num        [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_any        [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_u64        [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_u32        [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_u16        [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_u8         [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_i64        [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_i32        [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_i16        [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_i8         [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_f32        [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_f64        [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_str        [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_list       [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_tuple      [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_array      [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_vector     [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_dict       [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_generator  [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_linked_list [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_doubly_linked_list [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_deque      [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_heap       [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_fibonacci_heap [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_tree       [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_trie       [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_stack      [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_queue      [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_binary_search_tree [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_bitset     [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_set        [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_map        [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_range      [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_bad_struct [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! type_bad_struct2 [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]
  ! lambda          [ reduce using rule 151 (expr -> expr operator_less_than expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 287

    (152) expr -> expr operator_less_than_equals expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 152 (expr -> expr operator_less_than_equals expr .)
    else            reduce using rule 152 (expr -> expr operator_less_than_equals expr .)
    return          reduce using rule 152 (expr -> expr operator_less_than_equals expr .)
    del             reduce using rule 152 (expr -> expr operator_less_than_equals expr .)
    for             reduce using rule 152 (expr -> expr operator_less_than_equals expr .)
    if              reduce using rule 152 (expr -> expr operator_less_than_equals expr .)
    elif            reduce using rule 152 (expr -> expr operator_less_than_equals expr .)
    operator        reduce using rule 152 (expr -> expr operator_less_than_equals expr .)
    struct          reduce using rule 152 (expr -> expr operator_less_than_equals expr .)
    while           reduce using rule 152 (expr -> expr operator_less_than_equals expr .)
    func            reduce using rule 152 (expr -> expr operator_less_than_equals expr .)
    $end            reduce using rule 152 (expr -> expr operator_less_than_equals expr .)
    }               reduce using rule 152 (expr -> expr operator_less_than_equals expr .)
    operator_inner  reduce using rule 152 (expr -> expr operator_less_than_equals expr .)
    {               reduce using rule 152 (expr -> expr operator_less_than_equals expr .)
    )               reduce using rule 152 (expr -> expr operator_less_than_equals expr .)
    ,               reduce using rule 152 (expr -> expr operator_less_than_equals expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_sub    [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_mul    [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_div    [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_trudiv [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_pow    [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_join   [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_split  [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_scan   [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_reduc  [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitand [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitor  [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitxor [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitshiftleft [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitshiftright [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_and    [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_or     [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_xor    [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_contains [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_incr   [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_decr   [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_outer  [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_rotate [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_apply  [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_compose [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_over   [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_map    [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_less_than [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_less_than_equals [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_greater_than [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_greater_than_equals [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_equals [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_not_equals [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_smallest [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_greatest [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_goodname [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitnot [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_not    [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_reverse [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_sorted_incr [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_sorted_decr [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_s_combinator [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_s2_combinator [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_goodname2 [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! VAR             [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! FLOAT           [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! NUM             [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! NULL            [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! STRING_3SQ      [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! STRING_3DQ      [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! STRING_SQ       [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! STRING_DQ       [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! true            [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! false           [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_type       [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_num        [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_any        [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_u64        [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_u32        [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_u16        [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_u8         [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_i64        [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_i32        [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_i16        [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_i8         [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_f32        [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_f64        [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_str        [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_list       [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_tuple      [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_array      [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_vector     [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_dict       [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_generator  [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_linked_list [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_doubly_linked_list [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_deque      [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_heap       [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_fibonacci_heap [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_tree       [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_trie       [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_stack      [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_queue      [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_binary_search_tree [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_bitset     [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_set        [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_map        [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_range      [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_bad_struct [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! type_bad_struct2 [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]
  ! lambda          [ reduce using rule 152 (expr -> expr operator_less_than_equals expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 288

    (153) expr -> expr operator_greater_than expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 153 (expr -> expr operator_greater_than expr .)
    else            reduce using rule 153 (expr -> expr operator_greater_than expr .)
    return          reduce using rule 153 (expr -> expr operator_greater_than expr .)
    del             reduce using rule 153 (expr -> expr operator_greater_than expr .)
    for             reduce using rule 153 (expr -> expr operator_greater_than expr .)
    if              reduce using rule 153 (expr -> expr operator_greater_than expr .)
    elif            reduce using rule 153 (expr -> expr operator_greater_than expr .)
    operator        reduce using rule 153 (expr -> expr operator_greater_than expr .)
    struct          reduce using rule 153 (expr -> expr operator_greater_than expr .)
    while           reduce using rule 153 (expr -> expr operator_greater_than expr .)
    func            reduce using rule 153 (expr -> expr operator_greater_than expr .)
    $end            reduce using rule 153 (expr -> expr operator_greater_than expr .)
    }               reduce using rule 153 (expr -> expr operator_greater_than expr .)
    operator_inner  reduce using rule 153 (expr -> expr operator_greater_than expr .)
    {               reduce using rule 153 (expr -> expr operator_greater_than expr .)
    )               reduce using rule 153 (expr -> expr operator_greater_than expr .)
    ,               reduce using rule 153 (expr -> expr operator_greater_than expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_sub    [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_mul    [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_div    [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_trudiv [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_pow    [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_join   [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_split  [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_scan   [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_reduc  [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitand [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitor  [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitxor [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitshiftleft [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitshiftright [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_and    [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_or     [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_xor    [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_contains [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_incr   [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_decr   [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_outer  [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_rotate [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_apply  [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_compose [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_over   [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_map    [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_less_than [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_less_than_equals [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_greater_than [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_greater_than_equals [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_equals [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_not_equals [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_smallest [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_greatest [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_goodname [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitnot [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_not    [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_reverse [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_sorted_incr [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_sorted_decr [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_s_combinator [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_s2_combinator [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! operator_goodname2 [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! VAR             [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! FLOAT           [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! NUM             [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! NULL            [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! STRING_3SQ      [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! STRING_3DQ      [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! STRING_SQ       [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! STRING_DQ       [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! true            [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! false           [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_type       [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_num        [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_any        [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_u64        [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_u32        [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_u16        [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_u8         [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_i64        [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_i32        [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_i16        [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_i8         [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_f32        [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_f64        [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_str        [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_list       [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_tuple      [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_array      [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_vector     [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_dict       [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_generator  [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_linked_list [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_doubly_linked_list [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_deque      [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_heap       [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_fibonacci_heap [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_tree       [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_trie       [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_stack      [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_queue      [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_binary_search_tree [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_bitset     [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_set        [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_map        [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_range      [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_bad_struct [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! type_bad_struct2 [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]
  ! lambda          [ reduce using rule 153 (expr -> expr operator_greater_than expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 289

    (154) expr -> expr operator_greater_than_equals expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 154 (expr -> expr operator_greater_than_equals expr .)
    else            reduce using rule 154 (expr -> expr operator_greater_than_equals expr .)
    return          reduce using rule 154 (expr -> expr operator_greater_than_equals expr .)
    del             reduce using rule 154 (expr -> expr operator_greater_than_equals expr .)
    for             reduce using rule 154 (expr -> expr operator_greater_than_equals expr .)
    if              reduce using rule 154 (expr -> expr operator_greater_than_equals expr .)
    elif            reduce using rule 154 (expr -> expr operator_greater_than_equals expr .)
    operator        reduce using rule 154 (expr -> expr operator_greater_than_equals expr .)
    struct          reduce using rule 154 (expr -> expr operator_greater_than_equals expr .)
    while           reduce using rule 154 (expr -> expr operator_greater_than_equals expr .)
    func            reduce using rule 154 (expr -> expr operator_greater_than_equals expr .)
    $end            reduce using rule 154 (expr -> expr operator_greater_than_equals expr .)
    }               reduce using rule 154 (expr -> expr operator_greater_than_equals expr .)
    operator_inner  reduce using rule 154 (expr -> expr operator_greater_than_equals expr .)
    {               reduce using rule 154 (expr -> expr operator_greater_than_equals expr .)
    )               reduce using rule 154 (expr -> expr operator_greater_than_equals expr .)
    ,               reduce using rule 154 (expr -> expr operator_greater_than_equals expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_sub    [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_mul    [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_div    [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_trudiv [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_pow    [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_join   [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_split  [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_scan   [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_reduc  [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitand [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitor  [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitxor [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitshiftleft [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitshiftright [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_and    [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_or     [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_xor    [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_contains [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_incr   [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_decr   [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_outer  [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_rotate [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_apply  [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_compose [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_over   [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_map    [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_less_than [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_less_than_equals [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_greater_than [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_greater_than_equals [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_equals [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_not_equals [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_smallest [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_greatest [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_goodname [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitnot [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_not    [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_reverse [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_sorted_incr [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_sorted_decr [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_s_combinator [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_s2_combinator [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_goodname2 [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! VAR             [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! FLOAT           [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! NUM             [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! NULL            [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! STRING_3SQ      [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! STRING_3DQ      [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! STRING_SQ       [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! STRING_DQ       [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! true            [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! false           [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_type       [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_num        [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_any        [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_u64        [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_u32        [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_u16        [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_u8         [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_i64        [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_i32        [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_i16        [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_i8         [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_f32        [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_f64        [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_str        [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_list       [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_tuple      [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_array      [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_vector     [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_dict       [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_generator  [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_linked_list [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_doubly_linked_list [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_deque      [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_heap       [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_fibonacci_heap [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_tree       [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_trie       [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_stack      [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_queue      [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_binary_search_tree [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_bitset     [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_set        [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_map        [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_range      [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_bad_struct [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! type_bad_struct2 [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]
  ! lambda          [ reduce using rule 154 (expr -> expr operator_greater_than_equals expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 290

    (155) expr -> expr operator_equals expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 155 (expr -> expr operator_equals expr .)
    else            reduce using rule 155 (expr -> expr operator_equals expr .)
    return          reduce using rule 155 (expr -> expr operator_equals expr .)
    del             reduce using rule 155 (expr -> expr operator_equals expr .)
    for             reduce using rule 155 (expr -> expr operator_equals expr .)
    if              reduce using rule 155 (expr -> expr operator_equals expr .)
    elif            reduce using rule 155 (expr -> expr operator_equals expr .)
    operator        reduce using rule 155 (expr -> expr operator_equals expr .)
    struct          reduce using rule 155 (expr -> expr operator_equals expr .)
    while           reduce using rule 155 (expr -> expr operator_equals expr .)
    func            reduce using rule 155 (expr -> expr operator_equals expr .)
    $end            reduce using rule 155 (expr -> expr operator_equals expr .)
    }               reduce using rule 155 (expr -> expr operator_equals expr .)
    operator_inner  reduce using rule 155 (expr -> expr operator_equals expr .)
    {               reduce using rule 155 (expr -> expr operator_equals expr .)
    )               reduce using rule 155 (expr -> expr operator_equals expr .)
    ,               reduce using rule 155 (expr -> expr operator_equals expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_sub    [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_mul    [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_div    [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_trudiv [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_pow    [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_join   [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_split  [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_scan   [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_reduc  [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_bitand [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_bitor  [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_bitxor [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_bitshiftleft [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_bitshiftright [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_and    [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_or     [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_xor    [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_contains [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_incr   [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_decr   [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_outer  [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_rotate [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_apply  [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_compose [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_over   [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_map    [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_less_than [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_less_than_equals [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_greater_than [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_greater_than_equals [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_equals [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_not_equals [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_smallest [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_greatest [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_goodname [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_bitnot [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_not    [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_reverse [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_sorted_incr [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_sorted_decr [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_s_combinator [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_s2_combinator [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! operator_goodname2 [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! VAR             [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! FLOAT           [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! NUM             [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! NULL            [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! STRING_3SQ      [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! STRING_3DQ      [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! STRING_SQ       [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! STRING_DQ       [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! true            [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! false           [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_type       [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_num        [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_any        [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_u64        [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_u32        [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_u16        [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_u8         [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_i64        [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_i32        [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_i16        [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_i8         [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_f32        [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_f64        [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_str        [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_list       [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_tuple      [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_array      [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_vector     [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_dict       [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_generator  [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_linked_list [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_doubly_linked_list [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_deque      [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_heap       [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_fibonacci_heap [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_tree       [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_trie       [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_stack      [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_queue      [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_binary_search_tree [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_bitset     [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_set        [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_map        [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_range      [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_bad_struct [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! type_bad_struct2 [ reduce using rule 155 (expr -> expr operator_equals expr .) ]
  ! lambda          [ reduce using rule 155 (expr -> expr operator_equals expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 291

    (156) expr -> expr operator_not_equals expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 156 (expr -> expr operator_not_equals expr .)
    else            reduce using rule 156 (expr -> expr operator_not_equals expr .)
    return          reduce using rule 156 (expr -> expr operator_not_equals expr .)
    del             reduce using rule 156 (expr -> expr operator_not_equals expr .)
    for             reduce using rule 156 (expr -> expr operator_not_equals expr .)
    if              reduce using rule 156 (expr -> expr operator_not_equals expr .)
    elif            reduce using rule 156 (expr -> expr operator_not_equals expr .)
    operator        reduce using rule 156 (expr -> expr operator_not_equals expr .)
    struct          reduce using rule 156 (expr -> expr operator_not_equals expr .)
    while           reduce using rule 156 (expr -> expr operator_not_equals expr .)
    func            reduce using rule 156 (expr -> expr operator_not_equals expr .)
    $end            reduce using rule 156 (expr -> expr operator_not_equals expr .)
    }               reduce using rule 156 (expr -> expr operator_not_equals expr .)
    operator_inner  reduce using rule 156 (expr -> expr operator_not_equals expr .)
    {               reduce using rule 156 (expr -> expr operator_not_equals expr .)
    )               reduce using rule 156 (expr -> expr operator_not_equals expr .)
    ,               reduce using rule 156 (expr -> expr operator_not_equals expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_sub    [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_mul    [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_div    [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_trudiv [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_pow    [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_join   [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_split  [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_scan   [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_reduc  [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitand [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitor  [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitxor [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitshiftleft [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitshiftright [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_and    [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_or     [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_xor    [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_contains [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_incr   [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_decr   [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_outer  [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_rotate [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_apply  [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_compose [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_over   [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_map    [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_less_than [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_less_than_equals [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_greater_than [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_greater_than_equals [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_equals [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_not_equals [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_smallest [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_greatest [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_goodname [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitnot [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_not    [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_reverse [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_sorted_incr [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_sorted_decr [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_s_combinator [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_s2_combinator [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! operator_goodname2 [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! VAR             [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! FLOAT           [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! NUM             [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! NULL            [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! STRING_3SQ      [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! STRING_3DQ      [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! STRING_SQ       [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! STRING_DQ       [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! true            [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! false           [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_type       [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_num        [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_any        [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_u64        [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_u32        [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_u16        [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_u8         [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_i64        [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_i32        [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_i16        [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_i8         [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_f32        [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_f64        [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_str        [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_list       [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_tuple      [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_array      [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_vector     [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_dict       [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_generator  [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_linked_list [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_doubly_linked_list [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_deque      [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_heap       [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_fibonacci_heap [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_tree       [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_trie       [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_stack      [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_queue      [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_binary_search_tree [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_bitset     [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_set        [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_map        [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_range      [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_bad_struct [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! type_bad_struct2 [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]
  ! lambda          [ reduce using rule 156 (expr -> expr operator_not_equals expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 292

    (157) expr -> expr operator_smallest expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 157 (expr -> expr operator_smallest expr .)
    else            reduce using rule 157 (expr -> expr operator_smallest expr .)
    return          reduce using rule 157 (expr -> expr operator_smallest expr .)
    del             reduce using rule 157 (expr -> expr operator_smallest expr .)
    for             reduce using rule 157 (expr -> expr operator_smallest expr .)
    if              reduce using rule 157 (expr -> expr operator_smallest expr .)
    elif            reduce using rule 157 (expr -> expr operator_smallest expr .)
    operator        reduce using rule 157 (expr -> expr operator_smallest expr .)
    struct          reduce using rule 157 (expr -> expr operator_smallest expr .)
    while           reduce using rule 157 (expr -> expr operator_smallest expr .)
    func            reduce using rule 157 (expr -> expr operator_smallest expr .)
    $end            reduce using rule 157 (expr -> expr operator_smallest expr .)
    }               reduce using rule 157 (expr -> expr operator_smallest expr .)
    operator_inner  reduce using rule 157 (expr -> expr operator_smallest expr .)
    {               reduce using rule 157 (expr -> expr operator_smallest expr .)
    )               reduce using rule 157 (expr -> expr operator_smallest expr .)
    ,               reduce using rule 157 (expr -> expr operator_smallest expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_sub    [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_mul    [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_div    [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_trudiv [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_pow    [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_join   [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_split  [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_scan   [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_reduc  [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_bitand [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_bitor  [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_bitxor [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_bitshiftleft [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_bitshiftright [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_and    [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_or     [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_xor    [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_contains [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_incr   [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_decr   [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_outer  [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_rotate [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_apply  [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_compose [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_over   [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_map    [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_less_than [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_less_than_equals [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_greater_than [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_greater_than_equals [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_equals [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_not_equals [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_smallest [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_greatest [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_goodname [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_bitnot [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_not    [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_reverse [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_sorted_incr [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_sorted_decr [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_s_combinator [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_s2_combinator [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! operator_goodname2 [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! VAR             [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! FLOAT           [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! NUM             [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! NULL            [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! STRING_3SQ      [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! STRING_3DQ      [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! STRING_SQ       [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! STRING_DQ       [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! true            [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! false           [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_type       [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_num        [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_any        [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_u64        [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_u32        [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_u16        [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_u8         [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_i64        [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_i32        [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_i16        [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_i8         [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_f32        [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_f64        [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_str        [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_list       [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_tuple      [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_array      [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_vector     [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_dict       [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_generator  [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_linked_list [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_doubly_linked_list [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_deque      [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_heap       [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_fibonacci_heap [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_tree       [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_trie       [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_stack      [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_queue      [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_binary_search_tree [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_bitset     [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_set        [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_map        [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_range      [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_bad_struct [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! type_bad_struct2 [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]
  ! lambda          [ reduce using rule 157 (expr -> expr operator_smallest expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 293

    (158) expr -> expr operator_greatest expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 158 (expr -> expr operator_greatest expr .)
    else            reduce using rule 158 (expr -> expr operator_greatest expr .)
    return          reduce using rule 158 (expr -> expr operator_greatest expr .)
    del             reduce using rule 158 (expr -> expr operator_greatest expr .)
    for             reduce using rule 158 (expr -> expr operator_greatest expr .)
    if              reduce using rule 158 (expr -> expr operator_greatest expr .)
    elif            reduce using rule 158 (expr -> expr operator_greatest expr .)
    operator        reduce using rule 158 (expr -> expr operator_greatest expr .)
    struct          reduce using rule 158 (expr -> expr operator_greatest expr .)
    while           reduce using rule 158 (expr -> expr operator_greatest expr .)
    func            reduce using rule 158 (expr -> expr operator_greatest expr .)
    $end            reduce using rule 158 (expr -> expr operator_greatest expr .)
    }               reduce using rule 158 (expr -> expr operator_greatest expr .)
    operator_inner  reduce using rule 158 (expr -> expr operator_greatest expr .)
    {               reduce using rule 158 (expr -> expr operator_greatest expr .)
    )               reduce using rule 158 (expr -> expr operator_greatest expr .)
    ,               reduce using rule 158 (expr -> expr operator_greatest expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_sub    [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_mul    [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_div    [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_trudiv [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_pow    [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_join   [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_split  [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_scan   [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_reduc  [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_bitand [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_bitor  [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_bitxor [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_bitshiftleft [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_bitshiftright [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_and    [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_or     [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_xor    [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_contains [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_incr   [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_decr   [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_outer  [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_rotate [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_apply  [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_compose [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_over   [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_map    [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_less_than [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_less_than_equals [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_greater_than [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_greater_than_equals [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_equals [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_not_equals [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_smallest [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_greatest [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_goodname [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_bitnot [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_not    [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_reverse [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_sorted_incr [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_sorted_decr [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_s_combinator [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_s2_combinator [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! operator_goodname2 [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! VAR             [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! FLOAT           [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! NUM             [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! NULL            [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! STRING_3SQ      [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! STRING_3DQ      [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! STRING_SQ       [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! STRING_DQ       [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! true            [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! false           [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_type       [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_num        [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_any        [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_u64        [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_u32        [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_u16        [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_u8         [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_i64        [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_i32        [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_i16        [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_i8         [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_f32        [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_f64        [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_str        [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_list       [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_tuple      [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_array      [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_vector     [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_dict       [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_generator  [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_linked_list [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_doubly_linked_list [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_deque      [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_heap       [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_fibonacci_heap [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_tree       [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_trie       [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_stack      [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_queue      [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_binary_search_tree [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_bitset     [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_set        [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_map        [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_range      [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_bad_struct [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! type_bad_struct2 [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]
  ! lambda          [ reduce using rule 158 (expr -> expr operator_greatest expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 294

    (159) expr -> expr operator_goodname expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 159 (expr -> expr operator_goodname expr .)
    else            reduce using rule 159 (expr -> expr operator_goodname expr .)
    return          reduce using rule 159 (expr -> expr operator_goodname expr .)
    del             reduce using rule 159 (expr -> expr operator_goodname expr .)
    for             reduce using rule 159 (expr -> expr operator_goodname expr .)
    if              reduce using rule 159 (expr -> expr operator_goodname expr .)
    elif            reduce using rule 159 (expr -> expr operator_goodname expr .)
    operator        reduce using rule 159 (expr -> expr operator_goodname expr .)
    struct          reduce using rule 159 (expr -> expr operator_goodname expr .)
    while           reduce using rule 159 (expr -> expr operator_goodname expr .)
    func            reduce using rule 159 (expr -> expr operator_goodname expr .)
    $end            reduce using rule 159 (expr -> expr operator_goodname expr .)
    }               reduce using rule 159 (expr -> expr operator_goodname expr .)
    operator_inner  reduce using rule 159 (expr -> expr operator_goodname expr .)
    {               reduce using rule 159 (expr -> expr operator_goodname expr .)
    )               reduce using rule 159 (expr -> expr operator_goodname expr .)
    ,               reduce using rule 159 (expr -> expr operator_goodname expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_sub    [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_mul    [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_div    [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_trudiv [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_pow    [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_join   [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_split  [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_scan   [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_reduc  [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_bitand [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_bitor  [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_bitxor [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_bitshiftleft [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_bitshiftright [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_and    [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_or     [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_xor    [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_contains [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_incr   [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_decr   [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_outer  [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_rotate [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_apply  [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_compose [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_over   [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_map    [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_less_than [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_less_than_equals [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_greater_than [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_greater_than_equals [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_equals [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_not_equals [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_smallest [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_greatest [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_goodname [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_bitnot [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_not    [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_reverse [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_sorted_incr [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_sorted_decr [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_s_combinator [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_s2_combinator [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! operator_goodname2 [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! VAR             [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! FLOAT           [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! NUM             [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! NULL            [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! STRING_3SQ      [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! STRING_3DQ      [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! STRING_SQ       [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! STRING_DQ       [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! true            [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! false           [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_type       [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_num        [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_any        [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_u64        [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_u32        [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_u16        [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_u8         [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_i64        [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_i32        [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_i16        [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_i8         [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_f32        [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_f64        [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_str        [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_list       [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_tuple      [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_array      [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_vector     [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_dict       [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_generator  [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_linked_list [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_doubly_linked_list [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_deque      [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_heap       [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_fibonacci_heap [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_tree       [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_trie       [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_stack      [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_queue      [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_binary_search_tree [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_bitset     [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_set        [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_map        [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_range      [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_bad_struct [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! type_bad_struct2 [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]
  ! lambda          [ reduce using rule 159 (expr -> expr operator_goodname expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 295

    (50) assign_stmt -> comma_separated_names = expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 50 (assign_stmt -> comma_separated_names = expr .)
    else            reduce using rule 50 (assign_stmt -> comma_separated_names = expr .)
    return          reduce using rule 50 (assign_stmt -> comma_separated_names = expr .)
    del             reduce using rule 50 (assign_stmt -> comma_separated_names = expr .)
    for             reduce using rule 50 (assign_stmt -> comma_separated_names = expr .)
    if              reduce using rule 50 (assign_stmt -> comma_separated_names = expr .)
    elif            reduce using rule 50 (assign_stmt -> comma_separated_names = expr .)
    operator        reduce using rule 50 (assign_stmt -> comma_separated_names = expr .)
    struct          reduce using rule 50 (assign_stmt -> comma_separated_names = expr .)
    while           reduce using rule 50 (assign_stmt -> comma_separated_names = expr .)
    func            reduce using rule 50 (assign_stmt -> comma_separated_names = expr .)
    $end            reduce using rule 50 (assign_stmt -> comma_separated_names = expr .)
    }               reduce using rule 50 (assign_stmt -> comma_separated_names = expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_bitnot [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! operator_not    [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! operator_reverse [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! operator_sorted_incr [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! operator_sorted_decr [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! operator_s_combinator [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! operator_s2_combinator [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! operator_goodname2 [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! VAR             [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! FLOAT           [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! NUM             [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! NULL            [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! STRING_3SQ      [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! STRING_3DQ      [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! STRING_SQ       [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! STRING_DQ       [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! true            [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! false           [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_type       [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_num        [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_any        [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_u64        [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_u32        [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_u16        [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_u8         [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_i64        [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_i32        [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_i16        [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_i8         [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_f32        [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_f64        [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_str        [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_list       [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_tuple      [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_array      [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_vector     [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_dict       [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_generator  [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_linked_list [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_doubly_linked_list [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_deque      [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_heap       [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_fibonacci_heap [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_tree       [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_trie       [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_stack      [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_queue      [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_binary_search_tree [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_bitset     [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_set        [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_map        [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_range      [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_bad_struct [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! type_bad_struct2 [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]
  ! lambda          [ reduce using rule 50 (assign_stmt -> comma_separated_names = expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 296

    (160) expr -> operator_s_combinator expr expr . expr
    (142) expr -> expr expr . operator_inner expr expr
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_inner  shift and go to state 261
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 381
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 297

    (161) expr -> operator_s2_combinator expr expr . expr
    (142) expr -> expr expr . operator_inner expr expr
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_inner  shift and go to state 261
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 382
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 298

    (53) comma_separated_names -> VAR , comma_separated_names .

    =               reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    pass            reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    else            reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    operator_bitnot reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    operator_not    reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    operator_reverse reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    operator_sorted_incr reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    operator_sorted_decr reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    operator_s_combinator reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    operator_s2_combinator reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    operator_goodname2 reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    VAR             reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    return          reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    del             reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    for             reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    if              reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    elif            reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    operator        reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    struct          reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    while           reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    func            reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    FLOAT           reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    NUM             reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    NULL            reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    STRING_3SQ      reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    STRING_3DQ      reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    STRING_SQ       reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    STRING_DQ       reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    true            reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    false           reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_type       reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_num        reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_any        reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_u64        reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_u32        reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_u16        reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_u8         reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_i64        reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_i32        reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_i16        reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_i8         reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_f32        reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_f64        reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_str        reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_list       reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_tuple      reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_array      reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_vector     reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_dict       reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_generator  reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_linked_list reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_doubly_linked_list reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_deque      reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_heap       reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_fibonacci_heap reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_tree       reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_trie       reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_stack      reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_queue      reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_binary_search_tree reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_bitset     reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_set        reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_map        reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_range      reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_bad_struct reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    type_bad_struct2 reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    lambda          reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    $end            reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    }               reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    ;               reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    )               reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    operator_contains reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)
    :               reduce using rule 53 (comma_separated_names -> VAR , comma_separated_names .)


state 299

    (117) return_val -> VAR ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 383
    ,               shift and go to state 384


state 300

    (168) arguments -> expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    )               reduce using rule 168 (arguments -> expr .)
    ,               reduce using rule 168 (arguments -> expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 301

    (169) arguments -> type_type .
    (81) return_val -> type_type . ( arguments )

    )               reduce using rule 169 (arguments -> type_type .)
    ,               reduce using rule 169 (arguments -> type_type .)
    (               shift and go to state 223


state 302

    (170) arguments -> type_num .
    (82) return_val -> type_num . ( arguments )

    )               reduce using rule 170 (arguments -> type_num .)
    ,               reduce using rule 170 (arguments -> type_num .)
    (               shift and go to state 224


state 303

    (171) arguments -> type_any .
    (83) return_val -> type_any . ( arguments )

    )               reduce using rule 171 (arguments -> type_any .)
    ,               reduce using rule 171 (arguments -> type_any .)
    (               shift and go to state 225


state 304

    (172) arguments -> type_u64 .
    (84) return_val -> type_u64 . ( arguments )

    )               reduce using rule 172 (arguments -> type_u64 .)
    ,               reduce using rule 172 (arguments -> type_u64 .)
    (               shift and go to state 226


state 305

    (173) arguments -> type_u32 .
    (85) return_val -> type_u32 . ( arguments )

    )               reduce using rule 173 (arguments -> type_u32 .)
    ,               reduce using rule 173 (arguments -> type_u32 .)
    (               shift and go to state 227


state 306

    (174) arguments -> type_u16 .
    (86) return_val -> type_u16 . ( arguments )

    )               reduce using rule 174 (arguments -> type_u16 .)
    ,               reduce using rule 174 (arguments -> type_u16 .)
    (               shift and go to state 228


state 307

    (175) arguments -> type_u8 .
    (87) return_val -> type_u8 . ( arguments )

    )               reduce using rule 175 (arguments -> type_u8 .)
    ,               reduce using rule 175 (arguments -> type_u8 .)
    (               shift and go to state 229


state 308

    (176) arguments -> type_i64 .
    (88) return_val -> type_i64 . ( arguments )

    )               reduce using rule 176 (arguments -> type_i64 .)
    ,               reduce using rule 176 (arguments -> type_i64 .)
    (               shift and go to state 230


state 309

    (177) arguments -> type_i32 .
    (89) return_val -> type_i32 . ( arguments )

    )               reduce using rule 177 (arguments -> type_i32 .)
    ,               reduce using rule 177 (arguments -> type_i32 .)
    (               shift and go to state 231


state 310

    (178) arguments -> type_i16 .
    (90) return_val -> type_i16 . ( arguments )

    )               reduce using rule 178 (arguments -> type_i16 .)
    ,               reduce using rule 178 (arguments -> type_i16 .)
    (               shift and go to state 232


state 311

    (179) arguments -> type_i8 .
    (91) return_val -> type_i8 . ( arguments )

    )               reduce using rule 179 (arguments -> type_i8 .)
    ,               reduce using rule 179 (arguments -> type_i8 .)
    (               shift and go to state 233


state 312

    (180) arguments -> type_f32 .
    (92) return_val -> type_f32 . ( arguments )

    )               reduce using rule 180 (arguments -> type_f32 .)
    ,               reduce using rule 180 (arguments -> type_f32 .)
    (               shift and go to state 234


state 313

    (181) arguments -> type_f64 .
    (93) return_val -> type_f64 . ( arguments )

    )               reduce using rule 181 (arguments -> type_f64 .)
    ,               reduce using rule 181 (arguments -> type_f64 .)
    (               shift and go to state 235


state 314

    (182) arguments -> type_str .
    (94) return_val -> type_str . ( arguments )

    )               reduce using rule 182 (arguments -> type_str .)
    ,               reduce using rule 182 (arguments -> type_str .)
    (               shift and go to state 236


state 315

    (183) arguments -> type_list .
    (95) return_val -> type_list . ( arguments )

    )               reduce using rule 183 (arguments -> type_list .)
    ,               reduce using rule 183 (arguments -> type_list .)
    (               shift and go to state 237


state 316

    (184) arguments -> type_tuple .
    (96) return_val -> type_tuple . ( arguments )

    )               reduce using rule 184 (arguments -> type_tuple .)
    ,               reduce using rule 184 (arguments -> type_tuple .)
    (               shift and go to state 238


state 317

    (185) arguments -> type_array .
    (97) return_val -> type_array . ( arguments )

    )               reduce using rule 185 (arguments -> type_array .)
    ,               reduce using rule 185 (arguments -> type_array .)
    (               shift and go to state 239


state 318

    (186) arguments -> type_vector .
    (98) return_val -> type_vector . ( arguments )

    )               reduce using rule 186 (arguments -> type_vector .)
    ,               reduce using rule 186 (arguments -> type_vector .)
    (               shift and go to state 240


state 319

    (187) arguments -> type_dict .
    (99) return_val -> type_dict . ( arguments )

    )               reduce using rule 187 (arguments -> type_dict .)
    ,               reduce using rule 187 (arguments -> type_dict .)
    (               shift and go to state 241


state 320

    (188) arguments -> type_generator .
    (100) return_val -> type_generator . ( arguments )

    )               reduce using rule 188 (arguments -> type_generator .)
    ,               reduce using rule 188 (arguments -> type_generator .)
    (               shift and go to state 242


state 321

    (189) arguments -> type_linked_list .
    (101) return_val -> type_linked_list . ( arguments )

    )               reduce using rule 189 (arguments -> type_linked_list .)
    ,               reduce using rule 189 (arguments -> type_linked_list .)
    (               shift and go to state 243


state 322

    (190) arguments -> type_doubly_linked_list .
    (102) return_val -> type_doubly_linked_list . ( arguments )

    )               reduce using rule 190 (arguments -> type_doubly_linked_list .)
    ,               reduce using rule 190 (arguments -> type_doubly_linked_list .)
    (               shift and go to state 244


state 323

    (191) arguments -> type_deque .
    (103) return_val -> type_deque . ( arguments )

    )               reduce using rule 191 (arguments -> type_deque .)
    ,               reduce using rule 191 (arguments -> type_deque .)
    (               shift and go to state 245


state 324

    (192) arguments -> type_heap .
    (104) return_val -> type_heap . ( arguments )

    )               reduce using rule 192 (arguments -> type_heap .)
    ,               reduce using rule 192 (arguments -> type_heap .)
    (               shift and go to state 246


state 325

    (193) arguments -> type_fibonacci_heap .
    (105) return_val -> type_fibonacci_heap . ( arguments )

    )               reduce using rule 193 (arguments -> type_fibonacci_heap .)
    ,               reduce using rule 193 (arguments -> type_fibonacci_heap .)
    (               shift and go to state 247


state 326

    (194) arguments -> type_tree .
    (106) return_val -> type_tree . ( arguments )

    )               reduce using rule 194 (arguments -> type_tree .)
    ,               reduce using rule 194 (arguments -> type_tree .)
    (               shift and go to state 248


state 327

    (195) arguments -> type_trie .
    (107) return_val -> type_trie . ( arguments )

    )               reduce using rule 195 (arguments -> type_trie .)
    ,               reduce using rule 195 (arguments -> type_trie .)
    (               shift and go to state 249


state 328

    (196) arguments -> type_stack .
    (108) return_val -> type_stack . ( arguments )

    )               reduce using rule 196 (arguments -> type_stack .)
    ,               reduce using rule 196 (arguments -> type_stack .)
    (               shift and go to state 250


state 329

    (197) arguments -> type_queue .
    (109) return_val -> type_queue . ( arguments )

    )               reduce using rule 197 (arguments -> type_queue .)
    ,               reduce using rule 197 (arguments -> type_queue .)
    (               shift and go to state 251


state 330

    (198) arguments -> type_binary_search_tree .
    (110) return_val -> type_binary_search_tree . ( arguments )

    )               reduce using rule 198 (arguments -> type_binary_search_tree .)
    ,               reduce using rule 198 (arguments -> type_binary_search_tree .)
    (               shift and go to state 252


state 331

    (199) arguments -> type_bitset .
    (111) return_val -> type_bitset . ( arguments )

    )               reduce using rule 199 (arguments -> type_bitset .)
    ,               reduce using rule 199 (arguments -> type_bitset .)
    (               shift and go to state 253


state 332

    (200) arguments -> type_set .
    (112) return_val -> type_set . ( arguments )

    )               reduce using rule 200 (arguments -> type_set .)
    ,               reduce using rule 200 (arguments -> type_set .)
    (               shift and go to state 254


state 333

    (201) arguments -> type_map .
    (113) return_val -> type_map . ( arguments )

    )               reduce using rule 201 (arguments -> type_map .)
    ,               reduce using rule 201 (arguments -> type_map .)
    (               shift and go to state 255


state 334

    (202) arguments -> type_range .
    (114) return_val -> type_range . ( arguments )

    )               reduce using rule 202 (arguments -> type_range .)
    ,               reduce using rule 202 (arguments -> type_range .)
    (               shift and go to state 256


state 335

    (203) arguments -> type_bad_struct .
    (115) return_val -> type_bad_struct . ( arguments )

    )               reduce using rule 203 (arguments -> type_bad_struct .)
    ,               reduce using rule 203 (arguments -> type_bad_struct .)
    (               shift and go to state 257


state 336

    (204) arguments -> type_bad_struct2 .
    (116) return_val -> type_bad_struct2 . ( arguments )

    )               reduce using rule 204 (arguments -> type_bad_struct2 .)
    ,               reduce using rule 204 (arguments -> type_bad_struct2 .)
    (               shift and go to state 258


state 337

    (206) arguments -> empty .

    )               reduce using rule 206 (arguments -> empty .)
    ,               reduce using rule 206 (arguments -> empty .)


state 338

    (63) for_decl -> for comma_separated_names operator_contains . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 385
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 339

    (66) operator_decl -> operator ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 386
    ,               shift and go to state 384


state 340

    (69) func_decl -> func VAR ( . def_arguments )
    (70) def_arguments -> . declaration_stmt
    (71) def_arguments -> . declaration_stmt ; def_arguments
    (51) declaration_stmt -> . TYPE comma_separated_names
    (5) TYPE -> . type_type
    (6) TYPE -> . type_num
    (7) TYPE -> . type_any
    (8) TYPE -> . type_u64
    (9) TYPE -> . type_u32
    (10) TYPE -> . type_u16
    (11) TYPE -> . type_u8
    (12) TYPE -> . type_i64
    (13) TYPE -> . type_i32
    (14) TYPE -> . type_i16
    (15) TYPE -> . type_i8
    (16) TYPE -> . type_f32
    (17) TYPE -> . type_f64
    (18) TYPE -> . type_str
    (19) TYPE -> . type_list
    (20) TYPE -> . type_tuple
    (21) TYPE -> . type_array
    (22) TYPE -> . type_vector
    (23) TYPE -> . type_dict
    (24) TYPE -> . type_generator
    (25) TYPE -> . type_linked_list
    (26) TYPE -> . type_doubly_linked_list
    (27) TYPE -> . type_deque
    (28) TYPE -> . type_heap
    (29) TYPE -> . type_fibonacci_heap
    (30) TYPE -> . type_tree
    (31) TYPE -> . type_trie
    (32) TYPE -> . type_stack
    (33) TYPE -> . type_queue
    (34) TYPE -> . type_binary_search_tree
    (35) TYPE -> . type_bitset
    (36) TYPE -> . type_set
    (37) TYPE -> . type_map
    (38) TYPE -> . type_range
    (39) TYPE -> . type_bad_struct
    (40) TYPE -> . type_bad_struct2

    type_type       shift and go to state 185
    type_num        shift and go to state 186
    type_any        shift and go to state 187
    type_u64        shift and go to state 188
    type_u32        shift and go to state 189
    type_u16        shift and go to state 190
    type_u8         shift and go to state 191
    type_i64        shift and go to state 192
    type_i32        shift and go to state 193
    type_i16        shift and go to state 194
    type_i8         shift and go to state 195
    type_f32        shift and go to state 196
    type_f64        shift and go to state 197
    type_str        shift and go to state 198
    type_list       shift and go to state 199
    type_tuple      shift and go to state 200
    type_array      shift and go to state 201
    type_vector     shift and go to state 202
    type_dict       shift and go to state 203
    type_generator  shift and go to state 204
    type_linked_list shift and go to state 205
    type_doubly_linked_list shift and go to state 206
    type_deque      shift and go to state 207
    type_heap       shift and go to state 208
    type_fibonacci_heap shift and go to state 209
    type_tree       shift and go to state 210
    type_trie       shift and go to state 211
    type_stack      shift and go to state 212
    type_queue      shift and go to state 213
    type_binary_search_tree shift and go to state 214
    type_bitset     shift and go to state 215
    type_set        shift and go to state 216
    type_map        shift and go to state 217
    type_range      shift and go to state 218
    type_bad_struct shift and go to state 219
    type_bad_struct2 shift and go to state 220

    def_arguments                  shift and go to state 387
    declaration_stmt               shift and go to state 388
    TYPE                           shift and go to state 35

state 341

    (81) return_val -> type_type ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 389
    ,               shift and go to state 384


state 342

    (82) return_val -> type_num ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 390
    ,               shift and go to state 384


state 343

    (83) return_val -> type_any ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 391
    ,               shift and go to state 384


state 344

    (84) return_val -> type_u64 ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 392
    ,               shift and go to state 384


state 345

    (85) return_val -> type_u32 ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 393
    ,               shift and go to state 384


state 346

    (86) return_val -> type_u16 ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 394
    ,               shift and go to state 384


state 347

    (87) return_val -> type_u8 ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 395
    ,               shift and go to state 384


state 348

    (88) return_val -> type_i64 ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 396
    ,               shift and go to state 384


state 349

    (89) return_val -> type_i32 ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 397
    ,               shift and go to state 384


state 350

    (90) return_val -> type_i16 ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 398
    ,               shift and go to state 384


state 351

    (91) return_val -> type_i8 ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 399
    ,               shift and go to state 384


state 352

    (92) return_val -> type_f32 ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 400
    ,               shift and go to state 384


state 353

    (93) return_val -> type_f64 ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 401
    ,               shift and go to state 384


state 354

    (94) return_val -> type_str ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 402
    ,               shift and go to state 384


state 355

    (95) return_val -> type_list ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 403
    ,               shift and go to state 384


state 356

    (96) return_val -> type_tuple ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 404
    ,               shift and go to state 384


state 357

    (97) return_val -> type_array ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 405
    ,               shift and go to state 384


state 358

    (98) return_val -> type_vector ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 406
    ,               shift and go to state 384


state 359

    (99) return_val -> type_dict ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 407
    ,               shift and go to state 384


state 360

    (100) return_val -> type_generator ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 408
    ,               shift and go to state 384


state 361

    (101) return_val -> type_linked_list ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 409
    ,               shift and go to state 384


state 362

    (102) return_val -> type_doubly_linked_list ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 410
    ,               shift and go to state 384


state 363

    (103) return_val -> type_deque ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 411
    ,               shift and go to state 384


state 364

    (104) return_val -> type_heap ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 412
    ,               shift and go to state 384


state 365

    (105) return_val -> type_fibonacci_heap ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 413
    ,               shift and go to state 384


state 366

    (106) return_val -> type_tree ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 414
    ,               shift and go to state 384


state 367

    (107) return_val -> type_trie ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 415
    ,               shift and go to state 384


state 368

    (108) return_val -> type_stack ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 416
    ,               shift and go to state 384


state 369

    (109) return_val -> type_queue ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 417
    ,               shift and go to state 384


state 370

    (110) return_val -> type_binary_search_tree ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 418
    ,               shift and go to state 384


state 371

    (111) return_val -> type_bitset ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 419
    ,               shift and go to state 384


state 372

    (112) return_val -> type_set ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 420
    ,               shift and go to state 384


state 373

    (113) return_val -> type_map ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 421
    ,               shift and go to state 384


state 374

    (114) return_val -> type_range ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 422
    ,               shift and go to state 384


state 375

    (115) return_val -> type_bad_struct ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 423
    ,               shift and go to state 384


state 376

    (116) return_val -> type_bad_struct2 ( arguments . )
    (205) arguments -> arguments . , arguments

    )               shift and go to state 424
    ,               shift and go to state 384


state 377

    (47) lambda_decl -> lambda comma_separated_names : . expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 425
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 378

    (54) block_stmt -> block_decl { stmts } .

    pass            reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    else            reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    operator_bitnot reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    operator_not    reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    operator_reverse reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    operator_sorted_incr reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    operator_sorted_decr reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    operator_s_combinator reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    operator_s2_combinator reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    operator_goodname2 reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    VAR             reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    return          reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    del             reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    for             reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    if              reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    elif            reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    operator        reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    struct          reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    while           reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    func            reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    FLOAT           reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    NUM             reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    NULL            reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    STRING_3SQ      reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    STRING_3DQ      reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    STRING_SQ       reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    STRING_DQ       reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    true            reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    false           reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_type       reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_num        reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_any        reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_u64        reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_u32        reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_u16        reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_u8         reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_i64        reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_i32        reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_i16        reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_i8         reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_f32        reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_f64        reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_str        reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_list       reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_tuple      reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_array      reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_vector     reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_dict       reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_generator  reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_linked_list reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_doubly_linked_list reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_deque      reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_heap       reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_fibonacci_heap reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_tree       reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_trie       reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_stack      reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_queue      reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_binary_search_tree reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_bitset     reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_set        reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_map        reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_range      reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_bad_struct reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    type_bad_struct2 reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    lambda          reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    $end            reduce using rule 54 (block_stmt -> block_decl { stmts } .)
    }               reduce using rule 54 (block_stmt -> block_decl { stmts } .)


state 379

    (142) expr -> expr expr operator_inner expr . expr
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 426
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 380

    (141) expr -> expr operator_outer expr expr .
    (142) expr -> expr expr . operator_inner expr expr
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_inner resolved as shift
  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 141 (expr -> expr operator_outer expr expr .)
    else            reduce using rule 141 (expr -> expr operator_outer expr expr .)
    return          reduce using rule 141 (expr -> expr operator_outer expr expr .)
    del             reduce using rule 141 (expr -> expr operator_outer expr expr .)
    for             reduce using rule 141 (expr -> expr operator_outer expr expr .)
    if              reduce using rule 141 (expr -> expr operator_outer expr expr .)
    elif            reduce using rule 141 (expr -> expr operator_outer expr expr .)
    operator        reduce using rule 141 (expr -> expr operator_outer expr expr .)
    struct          reduce using rule 141 (expr -> expr operator_outer expr expr .)
    while           reduce using rule 141 (expr -> expr operator_outer expr expr .)
    func            reduce using rule 141 (expr -> expr operator_outer expr expr .)
    $end            reduce using rule 141 (expr -> expr operator_outer expr expr .)
    }               reduce using rule 141 (expr -> expr operator_outer expr expr .)
    {               reduce using rule 141 (expr -> expr operator_outer expr expr .)
    )               reduce using rule 141 (expr -> expr operator_outer expr expr .)
    ,               reduce using rule 141 (expr -> expr operator_outer expr expr .)
    operator_inner  shift and go to state 261
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_sub    [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_mul    [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_div    [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_trudiv [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_pow    [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_join   [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_split  [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_scan   [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_reduc  [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_bitand [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_bitor  [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_bitxor [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_bitshiftleft [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_bitshiftright [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_and    [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_or     [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_xor    [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_contains [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_incr   [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_decr   [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_outer  [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_rotate [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_apply  [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_compose [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_over   [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_map    [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_less_than [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_less_than_equals [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_greater_than [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_greater_than_equals [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_equals [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_not_equals [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_smallest [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_greatest [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_goodname [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_bitnot [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_not    [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_reverse [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_sorted_incr [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_sorted_decr [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_s_combinator [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_s2_combinator [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_goodname2 [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! VAR             [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! FLOAT           [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! NUM             [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! NULL            [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! STRING_3SQ      [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! STRING_3DQ      [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! STRING_SQ       [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! STRING_DQ       [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! true            [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! false           [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_type       [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_num        [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_any        [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_u64        [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_u32        [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_u16        [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_u8         [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_i64        [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_i32        [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_i16        [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_i8         [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_f32        [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_f64        [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_str        [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_list       [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_tuple      [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_array      [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_vector     [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_dict       [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_generator  [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_linked_list [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_doubly_linked_list [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_deque      [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_heap       [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_fibonacci_heap [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_tree       [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_trie       [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_stack      [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_queue      [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_binary_search_tree [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_bitset     [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_set        [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_map        [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_range      [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_bad_struct [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! type_bad_struct2 [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! lambda          [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]
  ! operator_inner  [ reduce using rule 141 (expr -> expr operator_outer expr expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 381

    (160) expr -> operator_s_combinator expr expr expr .
    (142) expr -> expr expr . operator_inner expr expr
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_inner resolved as shift
  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 160 (expr -> operator_s_combinator expr expr expr .)
    else            reduce using rule 160 (expr -> operator_s_combinator expr expr expr .)
    return          reduce using rule 160 (expr -> operator_s_combinator expr expr expr .)
    del             reduce using rule 160 (expr -> operator_s_combinator expr expr expr .)
    for             reduce using rule 160 (expr -> operator_s_combinator expr expr expr .)
    if              reduce using rule 160 (expr -> operator_s_combinator expr expr expr .)
    elif            reduce using rule 160 (expr -> operator_s_combinator expr expr expr .)
    operator        reduce using rule 160 (expr -> operator_s_combinator expr expr expr .)
    struct          reduce using rule 160 (expr -> operator_s_combinator expr expr expr .)
    while           reduce using rule 160 (expr -> operator_s_combinator expr expr expr .)
    func            reduce using rule 160 (expr -> operator_s_combinator expr expr expr .)
    $end            reduce using rule 160 (expr -> operator_s_combinator expr expr expr .)
    }               reduce using rule 160 (expr -> operator_s_combinator expr expr expr .)
    {               reduce using rule 160 (expr -> operator_s_combinator expr expr expr .)
    )               reduce using rule 160 (expr -> operator_s_combinator expr expr expr .)
    ,               reduce using rule 160 (expr -> operator_s_combinator expr expr expr .)
    operator_inner  shift and go to state 261
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_sub    [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_mul    [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_div    [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_trudiv [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_pow    [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_join   [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_split  [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_scan   [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_reduc  [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_bitand [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_bitor  [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_bitxor [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_bitshiftleft [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_bitshiftright [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_and    [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_or     [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_xor    [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_contains [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_incr   [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_decr   [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_outer  [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_rotate [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_apply  [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_compose [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_over   [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_map    [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_less_than [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_less_than_equals [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_greater_than [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_greater_than_equals [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_equals [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_not_equals [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_smallest [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_greatest [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_goodname [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_bitnot [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_not    [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_reverse [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_sorted_incr [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_sorted_decr [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_s_combinator [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_s2_combinator [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_goodname2 [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! VAR             [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! FLOAT           [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! NUM             [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! NULL            [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! STRING_3SQ      [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! STRING_3DQ      [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! STRING_SQ       [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! STRING_DQ       [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! true            [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! false           [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_type       [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_num        [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_any        [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_u64        [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_u32        [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_u16        [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_u8         [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_i64        [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_i32        [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_i16        [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_i8         [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_f32        [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_f64        [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_str        [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_list       [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_tuple      [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_array      [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_vector     [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_dict       [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_generator  [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_linked_list [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_doubly_linked_list [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_deque      [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_heap       [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_fibonacci_heap [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_tree       [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_trie       [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_stack      [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_queue      [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_binary_search_tree [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_bitset     [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_set        [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_map        [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_range      [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_bad_struct [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! type_bad_struct2 [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! lambda          [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_inner  [ reduce using rule 160 (expr -> operator_s_combinator expr expr expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 382

    (161) expr -> operator_s2_combinator expr expr expr .
    (142) expr -> expr expr . operator_inner expr expr
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_inner resolved as shift
  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .)
    else            reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .)
    return          reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .)
    del             reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .)
    for             reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .)
    if              reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .)
    elif            reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .)
    operator        reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .)
    struct          reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .)
    while           reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .)
    func            reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .)
    $end            reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .)
    }               reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .)
    {               reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .)
    )               reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .)
    ,               reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .)
    operator_inner  shift and go to state 261
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_sub    [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_mul    [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_div    [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_trudiv [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_pow    [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_join   [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_split  [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_scan   [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_reduc  [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_bitand [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_bitor  [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_bitxor [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_bitshiftleft [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_bitshiftright [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_and    [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_or     [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_xor    [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_contains [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_incr   [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_decr   [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_outer  [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_rotate [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_apply  [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_compose [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_over   [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_map    [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_less_than [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_less_than_equals [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_greater_than [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_greater_than_equals [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_equals [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_not_equals [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_smallest [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_greatest [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_goodname [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_bitnot [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_not    [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_reverse [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_sorted_incr [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_sorted_decr [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_s_combinator [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_s2_combinator [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_goodname2 [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! VAR             [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! FLOAT           [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! NUM             [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! NULL            [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! STRING_3SQ      [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! STRING_3DQ      [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! STRING_SQ       [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! STRING_DQ       [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! true            [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! false           [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_type       [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_num        [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_any        [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_u64        [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_u32        [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_u16        [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_u8         [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_i64        [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_i32        [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_i16        [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_i8         [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_f32        [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_f64        [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_str        [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_list       [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_tuple      [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_array      [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_vector     [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_dict       [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_generator  [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_linked_list [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_doubly_linked_list [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_deque      [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_heap       [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_fibonacci_heap [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_tree       [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_trie       [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_stack      [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_queue      [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_binary_search_tree [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_bitset     [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_set        [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_map        [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_range      [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_bad_struct [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! type_bad_struct2 [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! lambda          [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_inner  [ reduce using rule 161 (expr -> operator_s2_combinator expr expr expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 383

    (117) return_val -> VAR ( arguments ) .

    operator_add    reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_sub    reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_mul    reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_div    reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_trudiv reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_pow    reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_join   reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_split  reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_scan   reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_reduc  reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_bitand reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_bitor  reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_bitxor reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_bitshiftleft reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_bitshiftright reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_and    reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_or     reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_xor    reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_contains reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_incr   reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_decr   reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_outer  reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_rotate reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_apply  reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_compose reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_over   reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_map    reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_less_than reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_less_than_equals reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_greater_than reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_greater_than_equals reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_equals reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_not_equals reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_smallest reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_greatest reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_goodname reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_bitnot reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_not    reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_reverse reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_sorted_incr reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_sorted_decr reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_s_combinator reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_s2_combinator reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_goodname2 reduce using rule 117 (return_val -> VAR ( arguments ) .)
    VAR             reduce using rule 117 (return_val -> VAR ( arguments ) .)
    FLOAT           reduce using rule 117 (return_val -> VAR ( arguments ) .)
    NUM             reduce using rule 117 (return_val -> VAR ( arguments ) .)
    NULL            reduce using rule 117 (return_val -> VAR ( arguments ) .)
    STRING_3SQ      reduce using rule 117 (return_val -> VAR ( arguments ) .)
    STRING_3DQ      reduce using rule 117 (return_val -> VAR ( arguments ) .)
    STRING_SQ       reduce using rule 117 (return_val -> VAR ( arguments ) .)
    STRING_DQ       reduce using rule 117 (return_val -> VAR ( arguments ) .)
    true            reduce using rule 117 (return_val -> VAR ( arguments ) .)
    false           reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_type       reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_num        reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_any        reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_u64        reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_u32        reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_u16        reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_u8         reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_i64        reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_i32        reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_i16        reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_i8         reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_f32        reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_f64        reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_str        reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_list       reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_tuple      reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_array      reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_vector     reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_dict       reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_generator  reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_linked_list reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_doubly_linked_list reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_deque      reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_heap       reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_fibonacci_heap reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_tree       reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_trie       reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_stack      reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_queue      reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_binary_search_tree reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_bitset     reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_set        reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_map        reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_range      reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_bad_struct reduce using rule 117 (return_val -> VAR ( arguments ) .)
    type_bad_struct2 reduce using rule 117 (return_val -> VAR ( arguments ) .)
    lambda          reduce using rule 117 (return_val -> VAR ( arguments ) .)
    pass            reduce using rule 117 (return_val -> VAR ( arguments ) .)
    else            reduce using rule 117 (return_val -> VAR ( arguments ) .)
    return          reduce using rule 117 (return_val -> VAR ( arguments ) .)
    del             reduce using rule 117 (return_val -> VAR ( arguments ) .)
    for             reduce using rule 117 (return_val -> VAR ( arguments ) .)
    if              reduce using rule 117 (return_val -> VAR ( arguments ) .)
    elif            reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator        reduce using rule 117 (return_val -> VAR ( arguments ) .)
    struct          reduce using rule 117 (return_val -> VAR ( arguments ) .)
    while           reduce using rule 117 (return_val -> VAR ( arguments ) .)
    func            reduce using rule 117 (return_val -> VAR ( arguments ) .)
    $end            reduce using rule 117 (return_val -> VAR ( arguments ) .)
    }               reduce using rule 117 (return_val -> VAR ( arguments ) .)
    operator_inner  reduce using rule 117 (return_val -> VAR ( arguments ) .)
    {               reduce using rule 117 (return_val -> VAR ( arguments ) .)
    )               reduce using rule 117 (return_val -> VAR ( arguments ) .)
    ,               reduce using rule 117 (return_val -> VAR ( arguments ) .)


state 384

    (205) arguments -> arguments , . arguments
    (168) arguments -> . expr
    (169) arguments -> . type_type
    (170) arguments -> . type_num
    (171) arguments -> . type_any
    (172) arguments -> . type_u64
    (173) arguments -> . type_u32
    (174) arguments -> . type_u16
    (175) arguments -> . type_u8
    (176) arguments -> . type_i64
    (177) arguments -> . type_i32
    (178) arguments -> . type_i16
    (179) arguments -> . type_i8
    (180) arguments -> . type_f32
    (181) arguments -> . type_f64
    (182) arguments -> . type_str
    (183) arguments -> . type_list
    (184) arguments -> . type_tuple
    (185) arguments -> . type_array
    (186) arguments -> . type_vector
    (187) arguments -> . type_dict
    (188) arguments -> . type_generator
    (189) arguments -> . type_linked_list
    (190) arguments -> . type_doubly_linked_list
    (191) arguments -> . type_deque
    (192) arguments -> . type_heap
    (193) arguments -> . type_fibonacci_heap
    (194) arguments -> . type_tree
    (195) arguments -> . type_trie
    (196) arguments -> . type_stack
    (197) arguments -> . type_queue
    (198) arguments -> . type_binary_search_tree
    (199) arguments -> . type_bitset
    (200) arguments -> . type_set
    (201) arguments -> . type_map
    (202) arguments -> . type_range
    (203) arguments -> . type_bad_struct
    (204) arguments -> . type_bad_struct2
    (205) arguments -> . arguments , arguments
    (206) arguments -> . empty
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (167) empty -> .
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    type_type       shift and go to state 301
    type_num        shift and go to state 302
    type_any        shift and go to state 303
    type_u64        shift and go to state 304
    type_u32        shift and go to state 305
    type_u16        shift and go to state 306
    type_u8         shift and go to state 307
    type_i64        shift and go to state 308
    type_i32        shift and go to state 309
    type_i16        shift and go to state 310
    type_i8         shift and go to state 311
    type_f32        shift and go to state 312
    type_f64        shift and go to state 313
    type_str        shift and go to state 314
    type_list       shift and go to state 315
    type_tuple      shift and go to state 316
    type_array      shift and go to state 317
    type_vector     shift and go to state 318
    type_dict       shift and go to state 319
    type_generator  shift and go to state 320
    type_linked_list shift and go to state 321
    type_doubly_linked_list shift and go to state 322
    type_deque      shift and go to state 323
    type_heap       shift and go to state 324
    type_fibonacci_heap shift and go to state 325
    type_tree       shift and go to state 326
    type_trie       shift and go to state 327
    type_stack      shift and go to state 328
    type_queue      shift and go to state 329
    type_binary_search_tree shift and go to state 330
    type_bitset     shift and go to state 331
    type_set        shift and go to state 332
    type_map        shift and go to state 333
    type_range      shift and go to state 334
    type_bad_struct shift and go to state 335
    type_bad_struct2 shift and go to state 336
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    ,               reduce using rule 167 (empty -> .)
    )               reduce using rule 167 (empty -> .)
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    lambda          shift and go to state 88

    arguments                      shift and go to state 427
    expr                           shift and go to state 300
    empty                          shift and go to state 337
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 385

    (63) for_decl -> for comma_separated_names operator_contains expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

    {               reduce using rule 63 (for_decl -> for comma_separated_names operator_contains expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 386

    (66) operator_decl -> operator ( arguments ) .

    {               reduce using rule 66 (operator_decl -> operator ( arguments ) .)


state 387

    (69) func_decl -> func VAR ( def_arguments . )

    )               shift and go to state 428


state 388

    (70) def_arguments -> declaration_stmt .
    (71) def_arguments -> declaration_stmt . ; def_arguments

    )               reduce using rule 70 (def_arguments -> declaration_stmt .)
    ;               shift and go to state 429


state 389

    (81) return_val -> type_type ( arguments ) .

    operator_add    reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_sub    reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_mul    reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_div    reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_trudiv reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_pow    reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_join   reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_split  reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_scan   reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_reduc  reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_bitand reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_bitor  reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_bitxor reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_bitshiftleft reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_bitshiftright reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_and    reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_or     reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_xor    reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_contains reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_incr   reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_decr   reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_outer  reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_rotate reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_apply  reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_compose reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_over   reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_map    reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_less_than reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_less_than_equals reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_greater_than reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_greater_than_equals reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_equals reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_not_equals reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_smallest reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_greatest reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_goodname reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_bitnot reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_not    reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_reverse reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_sorted_incr reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_sorted_decr reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_s_combinator reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_s2_combinator reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_goodname2 reduce using rule 81 (return_val -> type_type ( arguments ) .)
    VAR             reduce using rule 81 (return_val -> type_type ( arguments ) .)
    FLOAT           reduce using rule 81 (return_val -> type_type ( arguments ) .)
    NUM             reduce using rule 81 (return_val -> type_type ( arguments ) .)
    NULL            reduce using rule 81 (return_val -> type_type ( arguments ) .)
    STRING_3SQ      reduce using rule 81 (return_val -> type_type ( arguments ) .)
    STRING_3DQ      reduce using rule 81 (return_val -> type_type ( arguments ) .)
    STRING_SQ       reduce using rule 81 (return_val -> type_type ( arguments ) .)
    STRING_DQ       reduce using rule 81 (return_val -> type_type ( arguments ) .)
    true            reduce using rule 81 (return_val -> type_type ( arguments ) .)
    false           reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_type       reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_num        reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_any        reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_u64        reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_u32        reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_u16        reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_u8         reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_i64        reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_i32        reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_i16        reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_i8         reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_f32        reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_f64        reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_str        reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_list       reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_tuple      reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_array      reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_vector     reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_dict       reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_generator  reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_linked_list reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_doubly_linked_list reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_deque      reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_heap       reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_fibonacci_heap reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_tree       reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_trie       reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_stack      reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_queue      reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_binary_search_tree reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_bitset     reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_set        reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_map        reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_range      reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_bad_struct reduce using rule 81 (return_val -> type_type ( arguments ) .)
    type_bad_struct2 reduce using rule 81 (return_val -> type_type ( arguments ) .)
    lambda          reduce using rule 81 (return_val -> type_type ( arguments ) .)
    pass            reduce using rule 81 (return_val -> type_type ( arguments ) .)
    else            reduce using rule 81 (return_val -> type_type ( arguments ) .)
    return          reduce using rule 81 (return_val -> type_type ( arguments ) .)
    del             reduce using rule 81 (return_val -> type_type ( arguments ) .)
    for             reduce using rule 81 (return_val -> type_type ( arguments ) .)
    if              reduce using rule 81 (return_val -> type_type ( arguments ) .)
    elif            reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator        reduce using rule 81 (return_val -> type_type ( arguments ) .)
    struct          reduce using rule 81 (return_val -> type_type ( arguments ) .)
    while           reduce using rule 81 (return_val -> type_type ( arguments ) .)
    func            reduce using rule 81 (return_val -> type_type ( arguments ) .)
    $end            reduce using rule 81 (return_val -> type_type ( arguments ) .)
    }               reduce using rule 81 (return_val -> type_type ( arguments ) .)
    operator_inner  reduce using rule 81 (return_val -> type_type ( arguments ) .)
    {               reduce using rule 81 (return_val -> type_type ( arguments ) .)
    )               reduce using rule 81 (return_val -> type_type ( arguments ) .)
    ,               reduce using rule 81 (return_val -> type_type ( arguments ) .)


state 390

    (82) return_val -> type_num ( arguments ) .

    operator_add    reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_sub    reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_mul    reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_div    reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_trudiv reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_pow    reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_join   reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_split  reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_scan   reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_reduc  reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_bitand reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_bitor  reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_bitxor reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_bitshiftleft reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_bitshiftright reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_and    reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_or     reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_xor    reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_contains reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_incr   reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_decr   reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_outer  reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_rotate reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_apply  reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_compose reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_over   reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_map    reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_less_than reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_less_than_equals reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_greater_than reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_greater_than_equals reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_equals reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_not_equals reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_smallest reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_greatest reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_goodname reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_bitnot reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_not    reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_reverse reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_sorted_incr reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_sorted_decr reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_s_combinator reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_s2_combinator reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_goodname2 reduce using rule 82 (return_val -> type_num ( arguments ) .)
    VAR             reduce using rule 82 (return_val -> type_num ( arguments ) .)
    FLOAT           reduce using rule 82 (return_val -> type_num ( arguments ) .)
    NUM             reduce using rule 82 (return_val -> type_num ( arguments ) .)
    NULL            reduce using rule 82 (return_val -> type_num ( arguments ) .)
    STRING_3SQ      reduce using rule 82 (return_val -> type_num ( arguments ) .)
    STRING_3DQ      reduce using rule 82 (return_val -> type_num ( arguments ) .)
    STRING_SQ       reduce using rule 82 (return_val -> type_num ( arguments ) .)
    STRING_DQ       reduce using rule 82 (return_val -> type_num ( arguments ) .)
    true            reduce using rule 82 (return_val -> type_num ( arguments ) .)
    false           reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_type       reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_num        reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_any        reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_u64        reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_u32        reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_u16        reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_u8         reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_i64        reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_i32        reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_i16        reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_i8         reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_f32        reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_f64        reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_str        reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_list       reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_tuple      reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_array      reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_vector     reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_dict       reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_generator  reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_linked_list reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_doubly_linked_list reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_deque      reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_heap       reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_fibonacci_heap reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_tree       reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_trie       reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_stack      reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_queue      reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_binary_search_tree reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_bitset     reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_set        reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_map        reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_range      reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_bad_struct reduce using rule 82 (return_val -> type_num ( arguments ) .)
    type_bad_struct2 reduce using rule 82 (return_val -> type_num ( arguments ) .)
    lambda          reduce using rule 82 (return_val -> type_num ( arguments ) .)
    pass            reduce using rule 82 (return_val -> type_num ( arguments ) .)
    else            reduce using rule 82 (return_val -> type_num ( arguments ) .)
    return          reduce using rule 82 (return_val -> type_num ( arguments ) .)
    del             reduce using rule 82 (return_val -> type_num ( arguments ) .)
    for             reduce using rule 82 (return_val -> type_num ( arguments ) .)
    if              reduce using rule 82 (return_val -> type_num ( arguments ) .)
    elif            reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator        reduce using rule 82 (return_val -> type_num ( arguments ) .)
    struct          reduce using rule 82 (return_val -> type_num ( arguments ) .)
    while           reduce using rule 82 (return_val -> type_num ( arguments ) .)
    func            reduce using rule 82 (return_val -> type_num ( arguments ) .)
    $end            reduce using rule 82 (return_val -> type_num ( arguments ) .)
    }               reduce using rule 82 (return_val -> type_num ( arguments ) .)
    operator_inner  reduce using rule 82 (return_val -> type_num ( arguments ) .)
    {               reduce using rule 82 (return_val -> type_num ( arguments ) .)
    )               reduce using rule 82 (return_val -> type_num ( arguments ) .)
    ,               reduce using rule 82 (return_val -> type_num ( arguments ) .)


state 391

    (83) return_val -> type_any ( arguments ) .

    operator_add    reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_sub    reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_mul    reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_div    reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_trudiv reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_pow    reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_join   reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_split  reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_scan   reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_reduc  reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_bitand reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_bitor  reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_bitxor reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_bitshiftleft reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_bitshiftright reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_and    reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_or     reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_xor    reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_contains reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_incr   reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_decr   reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_outer  reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_rotate reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_apply  reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_compose reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_over   reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_map    reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_less_than reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_less_than_equals reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_greater_than reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_greater_than_equals reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_equals reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_not_equals reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_smallest reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_greatest reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_goodname reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_bitnot reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_not    reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_reverse reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_sorted_incr reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_sorted_decr reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_s_combinator reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_s2_combinator reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_goodname2 reduce using rule 83 (return_val -> type_any ( arguments ) .)
    VAR             reduce using rule 83 (return_val -> type_any ( arguments ) .)
    FLOAT           reduce using rule 83 (return_val -> type_any ( arguments ) .)
    NUM             reduce using rule 83 (return_val -> type_any ( arguments ) .)
    NULL            reduce using rule 83 (return_val -> type_any ( arguments ) .)
    STRING_3SQ      reduce using rule 83 (return_val -> type_any ( arguments ) .)
    STRING_3DQ      reduce using rule 83 (return_val -> type_any ( arguments ) .)
    STRING_SQ       reduce using rule 83 (return_val -> type_any ( arguments ) .)
    STRING_DQ       reduce using rule 83 (return_val -> type_any ( arguments ) .)
    true            reduce using rule 83 (return_val -> type_any ( arguments ) .)
    false           reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_type       reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_num        reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_any        reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_u64        reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_u32        reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_u16        reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_u8         reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_i64        reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_i32        reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_i16        reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_i8         reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_f32        reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_f64        reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_str        reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_list       reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_tuple      reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_array      reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_vector     reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_dict       reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_generator  reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_linked_list reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_doubly_linked_list reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_deque      reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_heap       reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_fibonacci_heap reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_tree       reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_trie       reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_stack      reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_queue      reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_binary_search_tree reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_bitset     reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_set        reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_map        reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_range      reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_bad_struct reduce using rule 83 (return_val -> type_any ( arguments ) .)
    type_bad_struct2 reduce using rule 83 (return_val -> type_any ( arguments ) .)
    lambda          reduce using rule 83 (return_val -> type_any ( arguments ) .)
    pass            reduce using rule 83 (return_val -> type_any ( arguments ) .)
    else            reduce using rule 83 (return_val -> type_any ( arguments ) .)
    return          reduce using rule 83 (return_val -> type_any ( arguments ) .)
    del             reduce using rule 83 (return_val -> type_any ( arguments ) .)
    for             reduce using rule 83 (return_val -> type_any ( arguments ) .)
    if              reduce using rule 83 (return_val -> type_any ( arguments ) .)
    elif            reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator        reduce using rule 83 (return_val -> type_any ( arguments ) .)
    struct          reduce using rule 83 (return_val -> type_any ( arguments ) .)
    while           reduce using rule 83 (return_val -> type_any ( arguments ) .)
    func            reduce using rule 83 (return_val -> type_any ( arguments ) .)
    $end            reduce using rule 83 (return_val -> type_any ( arguments ) .)
    }               reduce using rule 83 (return_val -> type_any ( arguments ) .)
    operator_inner  reduce using rule 83 (return_val -> type_any ( arguments ) .)
    {               reduce using rule 83 (return_val -> type_any ( arguments ) .)
    )               reduce using rule 83 (return_val -> type_any ( arguments ) .)
    ,               reduce using rule 83 (return_val -> type_any ( arguments ) .)


state 392

    (84) return_val -> type_u64 ( arguments ) .

    operator_add    reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_sub    reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_mul    reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_div    reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_trudiv reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_pow    reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_join   reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_split  reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_scan   reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_reduc  reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_bitand reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_bitor  reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_bitxor reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_bitshiftleft reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_bitshiftright reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_and    reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_or     reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_xor    reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_contains reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_incr   reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_decr   reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_outer  reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_rotate reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_apply  reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_compose reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_over   reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_map    reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_less_than reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_less_than_equals reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_greater_than reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_greater_than_equals reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_equals reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_not_equals reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_smallest reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_greatest reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_goodname reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_bitnot reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_not    reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_reverse reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_sorted_incr reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_sorted_decr reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_s_combinator reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_s2_combinator reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_goodname2 reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    VAR             reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    FLOAT           reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    NUM             reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    NULL            reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    STRING_3SQ      reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    STRING_3DQ      reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    STRING_SQ       reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    STRING_DQ       reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    true            reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    false           reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_type       reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_num        reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_any        reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_u64        reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_u32        reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_u16        reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_u8         reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_i64        reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_i32        reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_i16        reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_i8         reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_f32        reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_f64        reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_str        reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_list       reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_tuple      reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_array      reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_vector     reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_dict       reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_generator  reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_linked_list reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_doubly_linked_list reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_deque      reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_heap       reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_fibonacci_heap reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_tree       reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_trie       reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_stack      reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_queue      reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_binary_search_tree reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_bitset     reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_set        reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_map        reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_range      reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_bad_struct reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    type_bad_struct2 reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    lambda          reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    pass            reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    else            reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    return          reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    del             reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    for             reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    if              reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    elif            reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator        reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    struct          reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    while           reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    func            reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    $end            reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    }               reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    operator_inner  reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    {               reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    )               reduce using rule 84 (return_val -> type_u64 ( arguments ) .)
    ,               reduce using rule 84 (return_val -> type_u64 ( arguments ) .)


state 393

    (85) return_val -> type_u32 ( arguments ) .

    operator_add    reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_sub    reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_mul    reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_div    reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_trudiv reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_pow    reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_join   reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_split  reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_scan   reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_reduc  reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_bitand reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_bitor  reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_bitxor reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_bitshiftleft reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_bitshiftright reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_and    reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_or     reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_xor    reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_contains reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_incr   reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_decr   reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_outer  reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_rotate reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_apply  reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_compose reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_over   reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_map    reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_less_than reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_less_than_equals reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_greater_than reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_greater_than_equals reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_equals reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_not_equals reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_smallest reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_greatest reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_goodname reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_bitnot reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_not    reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_reverse reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_sorted_incr reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_sorted_decr reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_s_combinator reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_s2_combinator reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_goodname2 reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    VAR             reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    FLOAT           reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    NUM             reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    NULL            reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    STRING_3SQ      reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    STRING_3DQ      reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    STRING_SQ       reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    STRING_DQ       reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    true            reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    false           reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_type       reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_num        reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_any        reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_u64        reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_u32        reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_u16        reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_u8         reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_i64        reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_i32        reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_i16        reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_i8         reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_f32        reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_f64        reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_str        reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_list       reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_tuple      reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_array      reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_vector     reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_dict       reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_generator  reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_linked_list reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_doubly_linked_list reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_deque      reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_heap       reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_fibonacci_heap reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_tree       reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_trie       reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_stack      reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_queue      reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_binary_search_tree reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_bitset     reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_set        reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_map        reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_range      reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_bad_struct reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    type_bad_struct2 reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    lambda          reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    pass            reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    else            reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    return          reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    del             reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    for             reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    if              reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    elif            reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator        reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    struct          reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    while           reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    func            reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    $end            reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    }               reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    operator_inner  reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    {               reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    )               reduce using rule 85 (return_val -> type_u32 ( arguments ) .)
    ,               reduce using rule 85 (return_val -> type_u32 ( arguments ) .)


state 394

    (86) return_val -> type_u16 ( arguments ) .

    operator_add    reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_sub    reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_mul    reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_div    reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_trudiv reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_pow    reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_join   reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_split  reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_scan   reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_reduc  reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_bitand reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_bitor  reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_bitxor reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_bitshiftleft reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_bitshiftright reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_and    reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_or     reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_xor    reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_contains reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_incr   reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_decr   reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_outer  reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_rotate reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_apply  reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_compose reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_over   reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_map    reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_less_than reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_less_than_equals reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_greater_than reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_greater_than_equals reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_equals reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_not_equals reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_smallest reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_greatest reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_goodname reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_bitnot reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_not    reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_reverse reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_sorted_incr reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_sorted_decr reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_s_combinator reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_s2_combinator reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_goodname2 reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    VAR             reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    FLOAT           reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    NUM             reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    NULL            reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    STRING_3SQ      reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    STRING_3DQ      reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    STRING_SQ       reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    STRING_DQ       reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    true            reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    false           reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_type       reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_num        reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_any        reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_u64        reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_u32        reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_u16        reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_u8         reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_i64        reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_i32        reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_i16        reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_i8         reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_f32        reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_f64        reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_str        reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_list       reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_tuple      reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_array      reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_vector     reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_dict       reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_generator  reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_linked_list reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_doubly_linked_list reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_deque      reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_heap       reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_fibonacci_heap reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_tree       reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_trie       reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_stack      reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_queue      reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_binary_search_tree reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_bitset     reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_set        reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_map        reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_range      reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_bad_struct reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    type_bad_struct2 reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    lambda          reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    pass            reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    else            reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    return          reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    del             reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    for             reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    if              reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    elif            reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator        reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    struct          reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    while           reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    func            reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    $end            reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    }               reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    operator_inner  reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    {               reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    )               reduce using rule 86 (return_val -> type_u16 ( arguments ) .)
    ,               reduce using rule 86 (return_val -> type_u16 ( arguments ) .)


state 395

    (87) return_val -> type_u8 ( arguments ) .

    operator_add    reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_sub    reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_mul    reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_div    reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_trudiv reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_pow    reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_join   reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_split  reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_scan   reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_reduc  reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_bitand reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_bitor  reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_bitxor reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_bitshiftleft reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_bitshiftright reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_and    reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_or     reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_xor    reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_contains reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_incr   reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_decr   reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_outer  reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_rotate reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_apply  reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_compose reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_over   reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_map    reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_less_than reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_less_than_equals reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_greater_than reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_greater_than_equals reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_equals reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_not_equals reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_smallest reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_greatest reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_goodname reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_bitnot reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_not    reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_reverse reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_sorted_incr reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_sorted_decr reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_s_combinator reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_s2_combinator reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_goodname2 reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    VAR             reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    FLOAT           reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    NUM             reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    NULL            reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    STRING_3SQ      reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    STRING_3DQ      reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    STRING_SQ       reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    STRING_DQ       reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    true            reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    false           reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_type       reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_num        reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_any        reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_u64        reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_u32        reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_u16        reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_u8         reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_i64        reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_i32        reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_i16        reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_i8         reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_f32        reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_f64        reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_str        reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_list       reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_tuple      reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_array      reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_vector     reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_dict       reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_generator  reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_linked_list reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_doubly_linked_list reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_deque      reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_heap       reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_fibonacci_heap reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_tree       reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_trie       reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_stack      reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_queue      reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_binary_search_tree reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_bitset     reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_set        reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_map        reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_range      reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_bad_struct reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    type_bad_struct2 reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    lambda          reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    pass            reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    else            reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    return          reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    del             reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    for             reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    if              reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    elif            reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator        reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    struct          reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    while           reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    func            reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    $end            reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    }               reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    operator_inner  reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    {               reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    )               reduce using rule 87 (return_val -> type_u8 ( arguments ) .)
    ,               reduce using rule 87 (return_val -> type_u8 ( arguments ) .)


state 396

    (88) return_val -> type_i64 ( arguments ) .

    operator_add    reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_sub    reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_mul    reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_div    reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_trudiv reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_pow    reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_join   reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_split  reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_scan   reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_reduc  reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_bitand reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_bitor  reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_bitxor reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_bitshiftleft reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_bitshiftright reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_and    reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_or     reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_xor    reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_contains reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_incr   reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_decr   reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_outer  reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_rotate reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_apply  reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_compose reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_over   reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_map    reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_less_than reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_less_than_equals reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_greater_than reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_greater_than_equals reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_equals reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_not_equals reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_smallest reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_greatest reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_goodname reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_bitnot reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_not    reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_reverse reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_sorted_incr reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_sorted_decr reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_s_combinator reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_s2_combinator reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_goodname2 reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    VAR             reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    FLOAT           reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    NUM             reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    NULL            reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    STRING_3SQ      reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    STRING_3DQ      reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    STRING_SQ       reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    STRING_DQ       reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    true            reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    false           reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_type       reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_num        reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_any        reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_u64        reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_u32        reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_u16        reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_u8         reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_i64        reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_i32        reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_i16        reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_i8         reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_f32        reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_f64        reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_str        reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_list       reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_tuple      reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_array      reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_vector     reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_dict       reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_generator  reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_linked_list reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_doubly_linked_list reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_deque      reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_heap       reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_fibonacci_heap reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_tree       reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_trie       reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_stack      reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_queue      reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_binary_search_tree reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_bitset     reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_set        reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_map        reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_range      reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_bad_struct reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    type_bad_struct2 reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    lambda          reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    pass            reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    else            reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    return          reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    del             reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    for             reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    if              reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    elif            reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator        reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    struct          reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    while           reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    func            reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    $end            reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    }               reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    operator_inner  reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    {               reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    )               reduce using rule 88 (return_val -> type_i64 ( arguments ) .)
    ,               reduce using rule 88 (return_val -> type_i64 ( arguments ) .)


state 397

    (89) return_val -> type_i32 ( arguments ) .

    operator_add    reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_sub    reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_mul    reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_div    reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_trudiv reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_pow    reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_join   reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_split  reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_scan   reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_reduc  reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_bitand reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_bitor  reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_bitxor reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_bitshiftleft reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_bitshiftright reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_and    reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_or     reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_xor    reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_contains reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_incr   reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_decr   reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_outer  reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_rotate reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_apply  reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_compose reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_over   reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_map    reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_less_than reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_less_than_equals reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_greater_than reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_greater_than_equals reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_equals reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_not_equals reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_smallest reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_greatest reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_goodname reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_bitnot reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_not    reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_reverse reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_sorted_incr reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_sorted_decr reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_s_combinator reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_s2_combinator reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_goodname2 reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    VAR             reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    FLOAT           reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    NUM             reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    NULL            reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    STRING_3SQ      reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    STRING_3DQ      reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    STRING_SQ       reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    STRING_DQ       reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    true            reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    false           reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_type       reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_num        reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_any        reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_u64        reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_u32        reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_u16        reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_u8         reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_i64        reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_i32        reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_i16        reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_i8         reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_f32        reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_f64        reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_str        reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_list       reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_tuple      reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_array      reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_vector     reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_dict       reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_generator  reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_linked_list reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_doubly_linked_list reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_deque      reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_heap       reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_fibonacci_heap reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_tree       reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_trie       reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_stack      reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_queue      reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_binary_search_tree reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_bitset     reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_set        reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_map        reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_range      reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_bad_struct reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    type_bad_struct2 reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    lambda          reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    pass            reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    else            reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    return          reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    del             reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    for             reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    if              reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    elif            reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator        reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    struct          reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    while           reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    func            reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    $end            reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    }               reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    operator_inner  reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    {               reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    )               reduce using rule 89 (return_val -> type_i32 ( arguments ) .)
    ,               reduce using rule 89 (return_val -> type_i32 ( arguments ) .)


state 398

    (90) return_val -> type_i16 ( arguments ) .

    operator_add    reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_sub    reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_mul    reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_div    reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_trudiv reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_pow    reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_join   reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_split  reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_scan   reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_reduc  reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_bitand reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_bitor  reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_bitxor reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_bitshiftleft reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_bitshiftright reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_and    reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_or     reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_xor    reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_contains reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_incr   reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_decr   reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_outer  reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_rotate reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_apply  reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_compose reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_over   reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_map    reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_less_than reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_less_than_equals reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_greater_than reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_greater_than_equals reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_equals reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_not_equals reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_smallest reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_greatest reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_goodname reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_bitnot reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_not    reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_reverse reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_sorted_incr reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_sorted_decr reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_s_combinator reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_s2_combinator reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_goodname2 reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    VAR             reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    FLOAT           reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    NUM             reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    NULL            reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    STRING_3SQ      reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    STRING_3DQ      reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    STRING_SQ       reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    STRING_DQ       reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    true            reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    false           reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_type       reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_num        reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_any        reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_u64        reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_u32        reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_u16        reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_u8         reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_i64        reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_i32        reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_i16        reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_i8         reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_f32        reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_f64        reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_str        reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_list       reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_tuple      reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_array      reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_vector     reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_dict       reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_generator  reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_linked_list reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_doubly_linked_list reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_deque      reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_heap       reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_fibonacci_heap reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_tree       reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_trie       reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_stack      reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_queue      reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_binary_search_tree reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_bitset     reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_set        reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_map        reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_range      reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_bad_struct reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    type_bad_struct2 reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    lambda          reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    pass            reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    else            reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    return          reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    del             reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    for             reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    if              reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    elif            reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator        reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    struct          reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    while           reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    func            reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    $end            reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    }               reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    operator_inner  reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    {               reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    )               reduce using rule 90 (return_val -> type_i16 ( arguments ) .)
    ,               reduce using rule 90 (return_val -> type_i16 ( arguments ) .)


state 399

    (91) return_val -> type_i8 ( arguments ) .

    operator_add    reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_sub    reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_mul    reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_div    reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_trudiv reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_pow    reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_join   reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_split  reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_scan   reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_reduc  reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_bitand reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_bitor  reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_bitxor reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_bitshiftleft reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_bitshiftright reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_and    reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_or     reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_xor    reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_contains reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_incr   reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_decr   reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_outer  reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_rotate reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_apply  reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_compose reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_over   reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_map    reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_less_than reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_less_than_equals reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_greater_than reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_greater_than_equals reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_equals reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_not_equals reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_smallest reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_greatest reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_goodname reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_bitnot reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_not    reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_reverse reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_sorted_incr reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_sorted_decr reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_s_combinator reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_s2_combinator reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_goodname2 reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    VAR             reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    FLOAT           reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    NUM             reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    NULL            reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    STRING_3SQ      reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    STRING_3DQ      reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    STRING_SQ       reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    STRING_DQ       reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    true            reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    false           reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_type       reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_num        reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_any        reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_u64        reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_u32        reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_u16        reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_u8         reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_i64        reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_i32        reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_i16        reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_i8         reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_f32        reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_f64        reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_str        reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_list       reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_tuple      reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_array      reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_vector     reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_dict       reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_generator  reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_linked_list reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_doubly_linked_list reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_deque      reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_heap       reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_fibonacci_heap reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_tree       reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_trie       reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_stack      reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_queue      reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_binary_search_tree reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_bitset     reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_set        reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_map        reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_range      reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_bad_struct reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    type_bad_struct2 reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    lambda          reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    pass            reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    else            reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    return          reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    del             reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    for             reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    if              reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    elif            reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator        reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    struct          reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    while           reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    func            reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    $end            reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    }               reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    operator_inner  reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    {               reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    )               reduce using rule 91 (return_val -> type_i8 ( arguments ) .)
    ,               reduce using rule 91 (return_val -> type_i8 ( arguments ) .)


state 400

    (92) return_val -> type_f32 ( arguments ) .

    operator_add    reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_sub    reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_mul    reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_div    reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_trudiv reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_pow    reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_join   reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_split  reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_scan   reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_reduc  reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_bitand reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_bitor  reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_bitxor reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_bitshiftleft reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_bitshiftright reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_and    reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_or     reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_xor    reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_contains reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_incr   reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_decr   reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_outer  reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_rotate reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_apply  reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_compose reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_over   reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_map    reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_less_than reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_less_than_equals reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_greater_than reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_greater_than_equals reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_equals reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_not_equals reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_smallest reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_greatest reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_goodname reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_bitnot reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_not    reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_reverse reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_sorted_incr reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_sorted_decr reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_s_combinator reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_s2_combinator reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_goodname2 reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    VAR             reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    FLOAT           reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    NUM             reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    NULL            reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    STRING_3SQ      reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    STRING_3DQ      reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    STRING_SQ       reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    STRING_DQ       reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    true            reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    false           reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_type       reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_num        reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_any        reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_u64        reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_u32        reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_u16        reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_u8         reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_i64        reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_i32        reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_i16        reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_i8         reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_f32        reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_f64        reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_str        reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_list       reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_tuple      reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_array      reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_vector     reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_dict       reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_generator  reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_linked_list reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_doubly_linked_list reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_deque      reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_heap       reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_fibonacci_heap reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_tree       reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_trie       reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_stack      reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_queue      reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_binary_search_tree reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_bitset     reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_set        reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_map        reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_range      reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_bad_struct reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    type_bad_struct2 reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    lambda          reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    pass            reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    else            reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    return          reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    del             reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    for             reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    if              reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    elif            reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator        reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    struct          reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    while           reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    func            reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    $end            reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    }               reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    operator_inner  reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    {               reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    )               reduce using rule 92 (return_val -> type_f32 ( arguments ) .)
    ,               reduce using rule 92 (return_val -> type_f32 ( arguments ) .)


state 401

    (93) return_val -> type_f64 ( arguments ) .

    operator_add    reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_sub    reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_mul    reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_div    reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_trudiv reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_pow    reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_join   reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_split  reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_scan   reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_reduc  reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_bitand reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_bitor  reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_bitxor reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_bitshiftleft reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_bitshiftright reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_and    reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_or     reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_xor    reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_contains reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_incr   reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_decr   reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_outer  reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_rotate reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_apply  reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_compose reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_over   reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_map    reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_less_than reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_less_than_equals reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_greater_than reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_greater_than_equals reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_equals reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_not_equals reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_smallest reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_greatest reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_goodname reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_bitnot reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_not    reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_reverse reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_sorted_incr reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_sorted_decr reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_s_combinator reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_s2_combinator reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_goodname2 reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    VAR             reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    FLOAT           reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    NUM             reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    NULL            reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    STRING_3SQ      reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    STRING_3DQ      reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    STRING_SQ       reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    STRING_DQ       reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    true            reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    false           reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_type       reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_num        reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_any        reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_u64        reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_u32        reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_u16        reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_u8         reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_i64        reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_i32        reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_i16        reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_i8         reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_f32        reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_f64        reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_str        reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_list       reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_tuple      reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_array      reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_vector     reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_dict       reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_generator  reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_linked_list reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_doubly_linked_list reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_deque      reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_heap       reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_fibonacci_heap reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_tree       reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_trie       reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_stack      reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_queue      reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_binary_search_tree reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_bitset     reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_set        reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_map        reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_range      reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_bad_struct reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    type_bad_struct2 reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    lambda          reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    pass            reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    else            reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    return          reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    del             reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    for             reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    if              reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    elif            reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator        reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    struct          reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    while           reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    func            reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    $end            reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    }               reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    operator_inner  reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    {               reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    )               reduce using rule 93 (return_val -> type_f64 ( arguments ) .)
    ,               reduce using rule 93 (return_val -> type_f64 ( arguments ) .)


state 402

    (94) return_val -> type_str ( arguments ) .

    operator_add    reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_sub    reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_mul    reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_div    reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_trudiv reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_pow    reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_join   reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_split  reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_scan   reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_reduc  reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_bitand reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_bitor  reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_bitxor reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_bitshiftleft reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_bitshiftright reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_and    reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_or     reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_xor    reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_contains reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_incr   reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_decr   reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_outer  reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_rotate reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_apply  reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_compose reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_over   reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_map    reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_less_than reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_less_than_equals reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_greater_than reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_greater_than_equals reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_equals reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_not_equals reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_smallest reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_greatest reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_goodname reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_bitnot reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_not    reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_reverse reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_sorted_incr reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_sorted_decr reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_s_combinator reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_s2_combinator reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_goodname2 reduce using rule 94 (return_val -> type_str ( arguments ) .)
    VAR             reduce using rule 94 (return_val -> type_str ( arguments ) .)
    FLOAT           reduce using rule 94 (return_val -> type_str ( arguments ) .)
    NUM             reduce using rule 94 (return_val -> type_str ( arguments ) .)
    NULL            reduce using rule 94 (return_val -> type_str ( arguments ) .)
    STRING_3SQ      reduce using rule 94 (return_val -> type_str ( arguments ) .)
    STRING_3DQ      reduce using rule 94 (return_val -> type_str ( arguments ) .)
    STRING_SQ       reduce using rule 94 (return_val -> type_str ( arguments ) .)
    STRING_DQ       reduce using rule 94 (return_val -> type_str ( arguments ) .)
    true            reduce using rule 94 (return_val -> type_str ( arguments ) .)
    false           reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_type       reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_num        reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_any        reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_u64        reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_u32        reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_u16        reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_u8         reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_i64        reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_i32        reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_i16        reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_i8         reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_f32        reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_f64        reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_str        reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_list       reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_tuple      reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_array      reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_vector     reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_dict       reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_generator  reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_linked_list reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_doubly_linked_list reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_deque      reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_heap       reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_fibonacci_heap reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_tree       reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_trie       reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_stack      reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_queue      reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_binary_search_tree reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_bitset     reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_set        reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_map        reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_range      reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_bad_struct reduce using rule 94 (return_val -> type_str ( arguments ) .)
    type_bad_struct2 reduce using rule 94 (return_val -> type_str ( arguments ) .)
    lambda          reduce using rule 94 (return_val -> type_str ( arguments ) .)
    pass            reduce using rule 94 (return_val -> type_str ( arguments ) .)
    else            reduce using rule 94 (return_val -> type_str ( arguments ) .)
    return          reduce using rule 94 (return_val -> type_str ( arguments ) .)
    del             reduce using rule 94 (return_val -> type_str ( arguments ) .)
    for             reduce using rule 94 (return_val -> type_str ( arguments ) .)
    if              reduce using rule 94 (return_val -> type_str ( arguments ) .)
    elif            reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator        reduce using rule 94 (return_val -> type_str ( arguments ) .)
    struct          reduce using rule 94 (return_val -> type_str ( arguments ) .)
    while           reduce using rule 94 (return_val -> type_str ( arguments ) .)
    func            reduce using rule 94 (return_val -> type_str ( arguments ) .)
    $end            reduce using rule 94 (return_val -> type_str ( arguments ) .)
    }               reduce using rule 94 (return_val -> type_str ( arguments ) .)
    operator_inner  reduce using rule 94 (return_val -> type_str ( arguments ) .)
    {               reduce using rule 94 (return_val -> type_str ( arguments ) .)
    )               reduce using rule 94 (return_val -> type_str ( arguments ) .)
    ,               reduce using rule 94 (return_val -> type_str ( arguments ) .)


state 403

    (95) return_val -> type_list ( arguments ) .

    operator_add    reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_sub    reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_mul    reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_div    reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_trudiv reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_pow    reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_join   reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_split  reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_scan   reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_reduc  reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_bitand reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_bitor  reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_bitxor reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_bitshiftleft reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_bitshiftright reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_and    reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_or     reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_xor    reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_contains reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_incr   reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_decr   reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_outer  reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_rotate reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_apply  reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_compose reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_over   reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_map    reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_less_than reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_less_than_equals reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_greater_than reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_greater_than_equals reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_equals reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_not_equals reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_smallest reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_greatest reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_goodname reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_bitnot reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_not    reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_reverse reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_sorted_incr reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_sorted_decr reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_s_combinator reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_s2_combinator reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_goodname2 reduce using rule 95 (return_val -> type_list ( arguments ) .)
    VAR             reduce using rule 95 (return_val -> type_list ( arguments ) .)
    FLOAT           reduce using rule 95 (return_val -> type_list ( arguments ) .)
    NUM             reduce using rule 95 (return_val -> type_list ( arguments ) .)
    NULL            reduce using rule 95 (return_val -> type_list ( arguments ) .)
    STRING_3SQ      reduce using rule 95 (return_val -> type_list ( arguments ) .)
    STRING_3DQ      reduce using rule 95 (return_val -> type_list ( arguments ) .)
    STRING_SQ       reduce using rule 95 (return_val -> type_list ( arguments ) .)
    STRING_DQ       reduce using rule 95 (return_val -> type_list ( arguments ) .)
    true            reduce using rule 95 (return_val -> type_list ( arguments ) .)
    false           reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_type       reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_num        reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_any        reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_u64        reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_u32        reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_u16        reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_u8         reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_i64        reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_i32        reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_i16        reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_i8         reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_f32        reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_f64        reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_str        reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_list       reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_tuple      reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_array      reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_vector     reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_dict       reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_generator  reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_linked_list reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_doubly_linked_list reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_deque      reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_heap       reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_fibonacci_heap reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_tree       reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_trie       reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_stack      reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_queue      reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_binary_search_tree reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_bitset     reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_set        reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_map        reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_range      reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_bad_struct reduce using rule 95 (return_val -> type_list ( arguments ) .)
    type_bad_struct2 reduce using rule 95 (return_val -> type_list ( arguments ) .)
    lambda          reduce using rule 95 (return_val -> type_list ( arguments ) .)
    pass            reduce using rule 95 (return_val -> type_list ( arguments ) .)
    else            reduce using rule 95 (return_val -> type_list ( arguments ) .)
    return          reduce using rule 95 (return_val -> type_list ( arguments ) .)
    del             reduce using rule 95 (return_val -> type_list ( arguments ) .)
    for             reduce using rule 95 (return_val -> type_list ( arguments ) .)
    if              reduce using rule 95 (return_val -> type_list ( arguments ) .)
    elif            reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator        reduce using rule 95 (return_val -> type_list ( arguments ) .)
    struct          reduce using rule 95 (return_val -> type_list ( arguments ) .)
    while           reduce using rule 95 (return_val -> type_list ( arguments ) .)
    func            reduce using rule 95 (return_val -> type_list ( arguments ) .)
    $end            reduce using rule 95 (return_val -> type_list ( arguments ) .)
    }               reduce using rule 95 (return_val -> type_list ( arguments ) .)
    operator_inner  reduce using rule 95 (return_val -> type_list ( arguments ) .)
    {               reduce using rule 95 (return_val -> type_list ( arguments ) .)
    )               reduce using rule 95 (return_val -> type_list ( arguments ) .)
    ,               reduce using rule 95 (return_val -> type_list ( arguments ) .)


state 404

    (96) return_val -> type_tuple ( arguments ) .

    operator_add    reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_sub    reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_mul    reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_div    reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_trudiv reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_pow    reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_join   reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_split  reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_scan   reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_reduc  reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_bitand reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_bitor  reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_bitxor reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_bitshiftleft reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_bitshiftright reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_and    reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_or     reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_xor    reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_contains reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_incr   reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_decr   reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_outer  reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_rotate reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_apply  reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_compose reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_over   reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_map    reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_less_than reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_less_than_equals reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_greater_than reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_greater_than_equals reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_equals reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_not_equals reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_smallest reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_greatest reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_goodname reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_bitnot reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_not    reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_reverse reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_sorted_incr reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_sorted_decr reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_s_combinator reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_s2_combinator reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_goodname2 reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    VAR             reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    FLOAT           reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    NUM             reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    NULL            reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    STRING_3SQ      reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    STRING_3DQ      reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    STRING_SQ       reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    STRING_DQ       reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    true            reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    false           reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_type       reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_num        reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_any        reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_u64        reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_u32        reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_u16        reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_u8         reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_i64        reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_i32        reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_i16        reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_i8         reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_f32        reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_f64        reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_str        reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_list       reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_tuple      reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_array      reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_vector     reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_dict       reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_generator  reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_linked_list reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_doubly_linked_list reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_deque      reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_heap       reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_fibonacci_heap reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_tree       reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_trie       reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_stack      reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_queue      reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_binary_search_tree reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_bitset     reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_set        reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_map        reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_range      reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_bad_struct reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    type_bad_struct2 reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    lambda          reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    pass            reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    else            reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    return          reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    del             reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    for             reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    if              reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    elif            reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator        reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    struct          reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    while           reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    func            reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    $end            reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    }               reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    operator_inner  reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    {               reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    )               reduce using rule 96 (return_val -> type_tuple ( arguments ) .)
    ,               reduce using rule 96 (return_val -> type_tuple ( arguments ) .)


state 405

    (97) return_val -> type_array ( arguments ) .

    operator_add    reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_sub    reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_mul    reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_div    reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_trudiv reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_pow    reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_join   reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_split  reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_scan   reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_reduc  reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_bitand reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_bitor  reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_bitxor reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_bitshiftleft reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_bitshiftright reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_and    reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_or     reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_xor    reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_contains reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_incr   reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_decr   reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_outer  reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_rotate reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_apply  reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_compose reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_over   reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_map    reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_less_than reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_less_than_equals reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_greater_than reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_greater_than_equals reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_equals reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_not_equals reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_smallest reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_greatest reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_goodname reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_bitnot reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_not    reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_reverse reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_sorted_incr reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_sorted_decr reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_s_combinator reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_s2_combinator reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_goodname2 reduce using rule 97 (return_val -> type_array ( arguments ) .)
    VAR             reduce using rule 97 (return_val -> type_array ( arguments ) .)
    FLOAT           reduce using rule 97 (return_val -> type_array ( arguments ) .)
    NUM             reduce using rule 97 (return_val -> type_array ( arguments ) .)
    NULL            reduce using rule 97 (return_val -> type_array ( arguments ) .)
    STRING_3SQ      reduce using rule 97 (return_val -> type_array ( arguments ) .)
    STRING_3DQ      reduce using rule 97 (return_val -> type_array ( arguments ) .)
    STRING_SQ       reduce using rule 97 (return_val -> type_array ( arguments ) .)
    STRING_DQ       reduce using rule 97 (return_val -> type_array ( arguments ) .)
    true            reduce using rule 97 (return_val -> type_array ( arguments ) .)
    false           reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_type       reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_num        reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_any        reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_u64        reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_u32        reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_u16        reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_u8         reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_i64        reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_i32        reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_i16        reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_i8         reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_f32        reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_f64        reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_str        reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_list       reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_tuple      reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_array      reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_vector     reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_dict       reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_generator  reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_linked_list reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_doubly_linked_list reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_deque      reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_heap       reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_fibonacci_heap reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_tree       reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_trie       reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_stack      reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_queue      reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_binary_search_tree reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_bitset     reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_set        reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_map        reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_range      reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_bad_struct reduce using rule 97 (return_val -> type_array ( arguments ) .)
    type_bad_struct2 reduce using rule 97 (return_val -> type_array ( arguments ) .)
    lambda          reduce using rule 97 (return_val -> type_array ( arguments ) .)
    pass            reduce using rule 97 (return_val -> type_array ( arguments ) .)
    else            reduce using rule 97 (return_val -> type_array ( arguments ) .)
    return          reduce using rule 97 (return_val -> type_array ( arguments ) .)
    del             reduce using rule 97 (return_val -> type_array ( arguments ) .)
    for             reduce using rule 97 (return_val -> type_array ( arguments ) .)
    if              reduce using rule 97 (return_val -> type_array ( arguments ) .)
    elif            reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator        reduce using rule 97 (return_val -> type_array ( arguments ) .)
    struct          reduce using rule 97 (return_val -> type_array ( arguments ) .)
    while           reduce using rule 97 (return_val -> type_array ( arguments ) .)
    func            reduce using rule 97 (return_val -> type_array ( arguments ) .)
    $end            reduce using rule 97 (return_val -> type_array ( arguments ) .)
    }               reduce using rule 97 (return_val -> type_array ( arguments ) .)
    operator_inner  reduce using rule 97 (return_val -> type_array ( arguments ) .)
    {               reduce using rule 97 (return_val -> type_array ( arguments ) .)
    )               reduce using rule 97 (return_val -> type_array ( arguments ) .)
    ,               reduce using rule 97 (return_val -> type_array ( arguments ) .)


state 406

    (98) return_val -> type_vector ( arguments ) .

    operator_add    reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_sub    reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_mul    reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_div    reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_trudiv reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_pow    reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_join   reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_split  reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_scan   reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_reduc  reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_bitand reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_bitor  reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_bitxor reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_bitshiftleft reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_bitshiftright reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_and    reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_or     reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_xor    reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_contains reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_incr   reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_decr   reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_outer  reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_rotate reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_apply  reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_compose reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_over   reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_map    reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_less_than reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_less_than_equals reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_greater_than reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_greater_than_equals reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_equals reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_not_equals reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_smallest reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_greatest reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_goodname reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_bitnot reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_not    reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_reverse reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_sorted_incr reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_sorted_decr reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_s_combinator reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_s2_combinator reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_goodname2 reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    VAR             reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    FLOAT           reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    NUM             reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    NULL            reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    STRING_3SQ      reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    STRING_3DQ      reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    STRING_SQ       reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    STRING_DQ       reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    true            reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    false           reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_type       reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_num        reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_any        reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_u64        reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_u32        reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_u16        reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_u8         reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_i64        reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_i32        reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_i16        reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_i8         reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_f32        reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_f64        reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_str        reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_list       reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_tuple      reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_array      reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_vector     reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_dict       reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_generator  reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_linked_list reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_doubly_linked_list reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_deque      reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_heap       reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_fibonacci_heap reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_tree       reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_trie       reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_stack      reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_queue      reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_binary_search_tree reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_bitset     reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_set        reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_map        reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_range      reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_bad_struct reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    type_bad_struct2 reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    lambda          reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    pass            reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    else            reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    return          reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    del             reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    for             reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    if              reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    elif            reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator        reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    struct          reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    while           reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    func            reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    $end            reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    }               reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    operator_inner  reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    {               reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    )               reduce using rule 98 (return_val -> type_vector ( arguments ) .)
    ,               reduce using rule 98 (return_val -> type_vector ( arguments ) .)


state 407

    (99) return_val -> type_dict ( arguments ) .

    operator_add    reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_sub    reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_mul    reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_div    reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_trudiv reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_pow    reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_join   reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_split  reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_scan   reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_reduc  reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_bitand reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_bitor  reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_bitxor reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_bitshiftleft reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_bitshiftright reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_and    reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_or     reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_xor    reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_contains reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_incr   reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_decr   reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_outer  reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_rotate reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_apply  reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_compose reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_over   reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_map    reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_less_than reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_less_than_equals reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_greater_than reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_greater_than_equals reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_equals reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_not_equals reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_smallest reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_greatest reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_goodname reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_bitnot reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_not    reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_reverse reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_sorted_incr reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_sorted_decr reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_s_combinator reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_s2_combinator reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_goodname2 reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    VAR             reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    FLOAT           reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    NUM             reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    NULL            reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    STRING_3SQ      reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    STRING_3DQ      reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    STRING_SQ       reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    STRING_DQ       reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    true            reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    false           reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_type       reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_num        reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_any        reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_u64        reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_u32        reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_u16        reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_u8         reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_i64        reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_i32        reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_i16        reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_i8         reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_f32        reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_f64        reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_str        reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_list       reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_tuple      reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_array      reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_vector     reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_dict       reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_generator  reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_linked_list reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_doubly_linked_list reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_deque      reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_heap       reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_fibonacci_heap reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_tree       reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_trie       reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_stack      reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_queue      reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_binary_search_tree reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_bitset     reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_set        reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_map        reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_range      reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_bad_struct reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    type_bad_struct2 reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    lambda          reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    pass            reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    else            reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    return          reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    del             reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    for             reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    if              reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    elif            reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator        reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    struct          reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    while           reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    func            reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    $end            reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    }               reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    operator_inner  reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    {               reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    )               reduce using rule 99 (return_val -> type_dict ( arguments ) .)
    ,               reduce using rule 99 (return_val -> type_dict ( arguments ) .)


state 408

    (100) return_val -> type_generator ( arguments ) .

    operator_add    reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_sub    reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_mul    reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_div    reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_trudiv reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_pow    reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_join   reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_split  reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_scan   reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_reduc  reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_bitand reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_bitor  reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_bitxor reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_bitshiftleft reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_bitshiftright reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_and    reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_or     reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_xor    reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_contains reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_incr   reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_decr   reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_outer  reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_rotate reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_apply  reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_compose reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_over   reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_map    reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_less_than reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_less_than_equals reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_greater_than reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_greater_than_equals reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_equals reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_not_equals reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_smallest reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_greatest reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_goodname reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_bitnot reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_not    reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_reverse reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_sorted_incr reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_sorted_decr reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_s_combinator reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_s2_combinator reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_goodname2 reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    VAR             reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    FLOAT           reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    NUM             reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    NULL            reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    STRING_3SQ      reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    STRING_3DQ      reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    STRING_SQ       reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    STRING_DQ       reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    true            reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    false           reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_type       reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_num        reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_any        reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_u64        reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_u32        reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_u16        reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_u8         reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_i64        reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_i32        reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_i16        reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_i8         reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_f32        reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_f64        reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_str        reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_list       reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_tuple      reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_array      reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_vector     reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_dict       reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_generator  reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_linked_list reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_doubly_linked_list reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_deque      reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_heap       reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_fibonacci_heap reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_tree       reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_trie       reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_stack      reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_queue      reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_binary_search_tree reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_bitset     reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_set        reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_map        reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_range      reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_bad_struct reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    type_bad_struct2 reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    lambda          reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    pass            reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    else            reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    return          reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    del             reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    for             reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    if              reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    elif            reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator        reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    struct          reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    while           reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    func            reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    $end            reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    }               reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    operator_inner  reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    {               reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    )               reduce using rule 100 (return_val -> type_generator ( arguments ) .)
    ,               reduce using rule 100 (return_val -> type_generator ( arguments ) .)


state 409

    (101) return_val -> type_linked_list ( arguments ) .

    operator_add    reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_sub    reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_mul    reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_div    reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_trudiv reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_pow    reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_join   reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_split  reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_scan   reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_reduc  reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_bitand reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_bitor  reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_bitxor reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_bitshiftleft reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_bitshiftright reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_and    reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_or     reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_xor    reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_contains reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_incr   reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_decr   reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_outer  reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_rotate reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_apply  reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_compose reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_over   reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_map    reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_less_than reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_less_than_equals reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_greater_than reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_greater_than_equals reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_equals reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_not_equals reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_smallest reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_greatest reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_goodname reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_bitnot reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_not    reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_reverse reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_sorted_incr reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_sorted_decr reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_s_combinator reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_s2_combinator reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_goodname2 reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    VAR             reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    FLOAT           reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    NUM             reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    NULL            reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    STRING_3SQ      reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    STRING_3DQ      reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    STRING_SQ       reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    STRING_DQ       reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    true            reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    false           reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_type       reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_num        reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_any        reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_u64        reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_u32        reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_u16        reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_u8         reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_i64        reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_i32        reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_i16        reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_i8         reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_f32        reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_f64        reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_str        reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_list       reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_tuple      reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_array      reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_vector     reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_dict       reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_generator  reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_linked_list reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_doubly_linked_list reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_deque      reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_heap       reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_fibonacci_heap reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_tree       reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_trie       reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_stack      reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_queue      reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_binary_search_tree reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_bitset     reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_set        reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_map        reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_range      reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_bad_struct reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    type_bad_struct2 reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    lambda          reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    pass            reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    else            reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    return          reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    del             reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    for             reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    if              reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    elif            reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator        reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    struct          reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    while           reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    func            reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    $end            reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    }               reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    operator_inner  reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    {               reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    )               reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)
    ,               reduce using rule 101 (return_val -> type_linked_list ( arguments ) .)


state 410

    (102) return_val -> type_doubly_linked_list ( arguments ) .

    operator_add    reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_sub    reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_mul    reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_div    reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_trudiv reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_pow    reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_join   reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_split  reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_scan   reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_reduc  reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitand reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitor  reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitxor reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitshiftleft reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitshiftright reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_and    reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_or     reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_xor    reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_contains reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_incr   reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_decr   reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_outer  reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_rotate reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_apply  reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_compose reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_over   reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_map    reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_less_than reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_less_than_equals reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_greater_than reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_greater_than_equals reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_equals reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_not_equals reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_smallest reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_greatest reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_goodname reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitnot reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_not    reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_reverse reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_sorted_incr reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_sorted_decr reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_s_combinator reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_s2_combinator reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_goodname2 reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    VAR             reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    FLOAT           reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    NUM             reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    NULL            reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    STRING_3SQ      reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    STRING_3DQ      reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    STRING_SQ       reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    STRING_DQ       reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    true            reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    false           reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_type       reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_num        reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_any        reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_u64        reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_u32        reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_u16        reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_u8         reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_i64        reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_i32        reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_i16        reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_i8         reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_f32        reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_f64        reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_str        reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_list       reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_tuple      reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_array      reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_vector     reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_dict       reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_generator  reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_linked_list reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_doubly_linked_list reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_deque      reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_heap       reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_fibonacci_heap reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_tree       reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_trie       reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_stack      reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_queue      reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_binary_search_tree reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_bitset     reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_set        reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_map        reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_range      reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_bad_struct reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_bad_struct2 reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    lambda          reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    pass            reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    else            reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    return          reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    del             reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    for             reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    if              reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    elif            reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator        reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    struct          reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    while           reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    func            reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    $end            reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    }               reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_inner  reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    {               reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    )               reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)
    ,               reduce using rule 102 (return_val -> type_doubly_linked_list ( arguments ) .)


state 411

    (103) return_val -> type_deque ( arguments ) .

    operator_add    reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_sub    reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_mul    reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_div    reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_trudiv reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_pow    reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_join   reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_split  reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_scan   reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_reduc  reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_bitand reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_bitor  reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_bitxor reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_bitshiftleft reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_bitshiftright reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_and    reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_or     reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_xor    reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_contains reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_incr   reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_decr   reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_outer  reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_rotate reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_apply  reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_compose reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_over   reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_map    reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_less_than reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_less_than_equals reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_greater_than reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_greater_than_equals reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_equals reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_not_equals reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_smallest reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_greatest reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_goodname reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_bitnot reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_not    reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_reverse reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_sorted_incr reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_sorted_decr reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_s_combinator reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_s2_combinator reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_goodname2 reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    VAR             reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    FLOAT           reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    NUM             reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    NULL            reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    STRING_3SQ      reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    STRING_3DQ      reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    STRING_SQ       reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    STRING_DQ       reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    true            reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    false           reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_type       reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_num        reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_any        reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_u64        reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_u32        reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_u16        reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_u8         reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_i64        reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_i32        reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_i16        reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_i8         reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_f32        reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_f64        reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_str        reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_list       reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_tuple      reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_array      reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_vector     reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_dict       reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_generator  reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_linked_list reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_doubly_linked_list reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_deque      reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_heap       reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_fibonacci_heap reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_tree       reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_trie       reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_stack      reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_queue      reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_binary_search_tree reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_bitset     reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_set        reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_map        reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_range      reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_bad_struct reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    type_bad_struct2 reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    lambda          reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    pass            reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    else            reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    return          reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    del             reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    for             reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    if              reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    elif            reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator        reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    struct          reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    while           reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    func            reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    $end            reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    }               reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    operator_inner  reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    {               reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    )               reduce using rule 103 (return_val -> type_deque ( arguments ) .)
    ,               reduce using rule 103 (return_val -> type_deque ( arguments ) .)


state 412

    (104) return_val -> type_heap ( arguments ) .

    operator_add    reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_sub    reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_mul    reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_div    reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_trudiv reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_pow    reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_join   reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_split  reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_scan   reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_reduc  reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_bitand reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_bitor  reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_bitxor reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_bitshiftleft reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_bitshiftright reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_and    reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_or     reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_xor    reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_contains reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_incr   reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_decr   reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_outer  reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_rotate reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_apply  reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_compose reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_over   reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_map    reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_less_than reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_less_than_equals reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_greater_than reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_greater_than_equals reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_equals reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_not_equals reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_smallest reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_greatest reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_goodname reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_bitnot reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_not    reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_reverse reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_sorted_incr reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_sorted_decr reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_s_combinator reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_s2_combinator reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_goodname2 reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    VAR             reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    FLOAT           reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    NUM             reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    NULL            reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    STRING_3SQ      reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    STRING_3DQ      reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    STRING_SQ       reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    STRING_DQ       reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    true            reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    false           reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_type       reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_num        reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_any        reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_u64        reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_u32        reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_u16        reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_u8         reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_i64        reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_i32        reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_i16        reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_i8         reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_f32        reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_f64        reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_str        reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_list       reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_tuple      reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_array      reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_vector     reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_dict       reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_generator  reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_linked_list reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_doubly_linked_list reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_deque      reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_heap       reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_fibonacci_heap reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_tree       reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_trie       reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_stack      reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_queue      reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_binary_search_tree reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_bitset     reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_set        reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_map        reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_range      reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_bad_struct reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    type_bad_struct2 reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    lambda          reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    pass            reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    else            reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    return          reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    del             reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    for             reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    if              reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    elif            reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator        reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    struct          reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    while           reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    func            reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    $end            reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    }               reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    operator_inner  reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    {               reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    )               reduce using rule 104 (return_val -> type_heap ( arguments ) .)
    ,               reduce using rule 104 (return_val -> type_heap ( arguments ) .)


state 413

    (105) return_val -> type_fibonacci_heap ( arguments ) .

    operator_add    reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_sub    reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_mul    reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_div    reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_trudiv reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_pow    reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_join   reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_split  reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_scan   reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_reduc  reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitand reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitor  reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitxor reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitshiftleft reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitshiftright reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_and    reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_or     reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_xor    reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_contains reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_incr   reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_decr   reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_outer  reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_rotate reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_apply  reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_compose reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_over   reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_map    reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_less_than reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_less_than_equals reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_greater_than reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_greater_than_equals reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_equals reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_not_equals reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_smallest reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_greatest reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_goodname reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitnot reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_not    reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_reverse reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_sorted_incr reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_sorted_decr reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_s_combinator reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_s2_combinator reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_goodname2 reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    VAR             reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    FLOAT           reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    NUM             reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    NULL            reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    STRING_3SQ      reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    STRING_3DQ      reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    STRING_SQ       reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    STRING_DQ       reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    true            reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    false           reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_type       reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_num        reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_any        reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_u64        reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_u32        reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_u16        reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_u8         reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_i64        reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_i32        reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_i16        reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_i8         reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_f32        reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_f64        reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_str        reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_list       reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_tuple      reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_array      reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_vector     reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_dict       reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_generator  reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_linked_list reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_doubly_linked_list reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_deque      reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_heap       reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_fibonacci_heap reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_tree       reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_trie       reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_stack      reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_queue      reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_binary_search_tree reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_bitset     reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_set        reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_map        reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_range      reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_bad_struct reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_bad_struct2 reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    lambda          reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    pass            reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    else            reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    return          reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    del             reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    for             reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    if              reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    elif            reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator        reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    struct          reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    while           reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    func            reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    $end            reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    }               reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_inner  reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    {               reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    )               reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)
    ,               reduce using rule 105 (return_val -> type_fibonacci_heap ( arguments ) .)


state 414

    (106) return_val -> type_tree ( arguments ) .

    operator_add    reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_sub    reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_mul    reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_div    reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_trudiv reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_pow    reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_join   reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_split  reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_scan   reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_reduc  reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_bitand reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_bitor  reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_bitxor reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_bitshiftleft reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_bitshiftright reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_and    reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_or     reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_xor    reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_contains reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_incr   reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_decr   reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_outer  reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_rotate reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_apply  reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_compose reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_over   reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_map    reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_less_than reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_less_than_equals reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_greater_than reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_greater_than_equals reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_equals reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_not_equals reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_smallest reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_greatest reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_goodname reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_bitnot reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_not    reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_reverse reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_sorted_incr reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_sorted_decr reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_s_combinator reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_s2_combinator reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_goodname2 reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    VAR             reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    FLOAT           reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    NUM             reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    NULL            reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    STRING_3SQ      reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    STRING_3DQ      reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    STRING_SQ       reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    STRING_DQ       reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    true            reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    false           reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_type       reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_num        reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_any        reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_u64        reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_u32        reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_u16        reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_u8         reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_i64        reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_i32        reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_i16        reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_i8         reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_f32        reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_f64        reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_str        reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_list       reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_tuple      reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_array      reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_vector     reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_dict       reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_generator  reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_linked_list reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_doubly_linked_list reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_deque      reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_heap       reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_fibonacci_heap reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_tree       reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_trie       reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_stack      reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_queue      reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_binary_search_tree reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_bitset     reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_set        reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_map        reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_range      reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_bad_struct reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    type_bad_struct2 reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    lambda          reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    pass            reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    else            reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    return          reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    del             reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    for             reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    if              reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    elif            reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator        reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    struct          reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    while           reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    func            reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    $end            reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    }               reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    operator_inner  reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    {               reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    )               reduce using rule 106 (return_val -> type_tree ( arguments ) .)
    ,               reduce using rule 106 (return_val -> type_tree ( arguments ) .)


state 415

    (107) return_val -> type_trie ( arguments ) .

    operator_add    reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_sub    reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_mul    reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_div    reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_trudiv reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_pow    reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_join   reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_split  reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_scan   reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_reduc  reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_bitand reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_bitor  reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_bitxor reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_bitshiftleft reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_bitshiftright reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_and    reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_or     reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_xor    reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_contains reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_incr   reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_decr   reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_outer  reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_rotate reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_apply  reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_compose reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_over   reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_map    reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_less_than reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_less_than_equals reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_greater_than reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_greater_than_equals reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_equals reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_not_equals reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_smallest reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_greatest reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_goodname reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_bitnot reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_not    reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_reverse reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_sorted_incr reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_sorted_decr reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_s_combinator reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_s2_combinator reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_goodname2 reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    VAR             reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    FLOAT           reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    NUM             reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    NULL            reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    STRING_3SQ      reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    STRING_3DQ      reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    STRING_SQ       reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    STRING_DQ       reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    true            reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    false           reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_type       reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_num        reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_any        reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_u64        reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_u32        reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_u16        reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_u8         reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_i64        reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_i32        reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_i16        reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_i8         reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_f32        reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_f64        reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_str        reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_list       reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_tuple      reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_array      reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_vector     reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_dict       reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_generator  reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_linked_list reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_doubly_linked_list reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_deque      reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_heap       reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_fibonacci_heap reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_tree       reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_trie       reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_stack      reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_queue      reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_binary_search_tree reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_bitset     reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_set        reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_map        reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_range      reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_bad_struct reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    type_bad_struct2 reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    lambda          reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    pass            reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    else            reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    return          reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    del             reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    for             reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    if              reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    elif            reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator        reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    struct          reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    while           reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    func            reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    $end            reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    }               reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    operator_inner  reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    {               reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    )               reduce using rule 107 (return_val -> type_trie ( arguments ) .)
    ,               reduce using rule 107 (return_val -> type_trie ( arguments ) .)


state 416

    (108) return_val -> type_stack ( arguments ) .

    operator_add    reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_sub    reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_mul    reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_div    reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_trudiv reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_pow    reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_join   reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_split  reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_scan   reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_reduc  reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_bitand reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_bitor  reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_bitxor reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_bitshiftleft reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_bitshiftright reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_and    reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_or     reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_xor    reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_contains reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_incr   reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_decr   reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_outer  reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_rotate reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_apply  reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_compose reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_over   reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_map    reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_less_than reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_less_than_equals reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_greater_than reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_greater_than_equals reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_equals reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_not_equals reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_smallest reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_greatest reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_goodname reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_bitnot reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_not    reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_reverse reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_sorted_incr reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_sorted_decr reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_s_combinator reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_s2_combinator reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_goodname2 reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    VAR             reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    FLOAT           reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    NUM             reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    NULL            reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    STRING_3SQ      reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    STRING_3DQ      reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    STRING_SQ       reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    STRING_DQ       reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    true            reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    false           reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_type       reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_num        reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_any        reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_u64        reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_u32        reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_u16        reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_u8         reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_i64        reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_i32        reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_i16        reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_i8         reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_f32        reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_f64        reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_str        reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_list       reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_tuple      reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_array      reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_vector     reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_dict       reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_generator  reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_linked_list reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_doubly_linked_list reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_deque      reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_heap       reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_fibonacci_heap reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_tree       reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_trie       reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_stack      reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_queue      reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_binary_search_tree reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_bitset     reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_set        reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_map        reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_range      reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_bad_struct reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    type_bad_struct2 reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    lambda          reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    pass            reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    else            reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    return          reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    del             reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    for             reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    if              reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    elif            reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator        reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    struct          reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    while           reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    func            reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    $end            reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    }               reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    operator_inner  reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    {               reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    )               reduce using rule 108 (return_val -> type_stack ( arguments ) .)
    ,               reduce using rule 108 (return_val -> type_stack ( arguments ) .)


state 417

    (109) return_val -> type_queue ( arguments ) .

    operator_add    reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_sub    reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_mul    reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_div    reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_trudiv reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_pow    reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_join   reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_split  reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_scan   reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_reduc  reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_bitand reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_bitor  reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_bitxor reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_bitshiftleft reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_bitshiftright reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_and    reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_or     reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_xor    reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_contains reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_incr   reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_decr   reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_outer  reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_rotate reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_apply  reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_compose reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_over   reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_map    reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_less_than reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_less_than_equals reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_greater_than reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_greater_than_equals reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_equals reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_not_equals reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_smallest reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_greatest reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_goodname reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_bitnot reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_not    reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_reverse reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_sorted_incr reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_sorted_decr reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_s_combinator reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_s2_combinator reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_goodname2 reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    VAR             reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    FLOAT           reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    NUM             reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    NULL            reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    STRING_3SQ      reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    STRING_3DQ      reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    STRING_SQ       reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    STRING_DQ       reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    true            reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    false           reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_type       reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_num        reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_any        reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_u64        reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_u32        reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_u16        reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_u8         reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_i64        reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_i32        reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_i16        reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_i8         reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_f32        reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_f64        reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_str        reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_list       reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_tuple      reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_array      reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_vector     reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_dict       reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_generator  reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_linked_list reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_doubly_linked_list reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_deque      reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_heap       reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_fibonacci_heap reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_tree       reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_trie       reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_stack      reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_queue      reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_binary_search_tree reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_bitset     reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_set        reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_map        reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_range      reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_bad_struct reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    type_bad_struct2 reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    lambda          reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    pass            reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    else            reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    return          reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    del             reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    for             reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    if              reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    elif            reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator        reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    struct          reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    while           reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    func            reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    $end            reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    }               reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    operator_inner  reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    {               reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    )               reduce using rule 109 (return_val -> type_queue ( arguments ) .)
    ,               reduce using rule 109 (return_val -> type_queue ( arguments ) .)


state 418

    (110) return_val -> type_binary_search_tree ( arguments ) .

    operator_add    reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_sub    reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_mul    reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_div    reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_trudiv reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_pow    reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_join   reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_split  reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_scan   reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_reduc  reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitand reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitor  reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitxor reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitshiftleft reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitshiftright reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_and    reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_or     reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_xor    reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_contains reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_incr   reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_decr   reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_outer  reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_rotate reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_apply  reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_compose reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_over   reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_map    reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_less_than reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_less_than_equals reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_greater_than reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_greater_than_equals reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_equals reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_not_equals reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_smallest reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_greatest reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_goodname reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitnot reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_not    reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_reverse reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_sorted_incr reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_sorted_decr reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_s_combinator reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_s2_combinator reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_goodname2 reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    VAR             reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    FLOAT           reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    NUM             reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    NULL            reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    STRING_3SQ      reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    STRING_3DQ      reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    STRING_SQ       reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    STRING_DQ       reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    true            reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    false           reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_type       reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_num        reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_any        reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_u64        reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_u32        reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_u16        reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_u8         reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_i64        reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_i32        reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_i16        reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_i8         reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_f32        reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_f64        reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_str        reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_list       reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_tuple      reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_array      reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_vector     reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_dict       reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_generator  reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_linked_list reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_doubly_linked_list reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_deque      reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_heap       reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_fibonacci_heap reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_tree       reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_trie       reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_stack      reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_queue      reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_binary_search_tree reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_bitset     reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_set        reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_map        reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_range      reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_bad_struct reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    type_bad_struct2 reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    lambda          reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    pass            reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    else            reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    return          reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    del             reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    for             reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    if              reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    elif            reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator        reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    struct          reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    while           reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    func            reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    $end            reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    }               reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_inner  reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    {               reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    )               reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)
    ,               reduce using rule 110 (return_val -> type_binary_search_tree ( arguments ) .)


state 419

    (111) return_val -> type_bitset ( arguments ) .

    operator_add    reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_sub    reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_mul    reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_div    reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_trudiv reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_pow    reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_join   reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_split  reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_scan   reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_reduc  reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_bitand reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_bitor  reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_bitxor reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_bitshiftleft reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_bitshiftright reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_and    reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_or     reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_xor    reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_contains reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_incr   reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_decr   reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_outer  reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_rotate reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_apply  reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_compose reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_over   reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_map    reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_less_than reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_less_than_equals reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_greater_than reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_greater_than_equals reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_equals reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_not_equals reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_smallest reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_greatest reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_goodname reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_bitnot reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_not    reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_reverse reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_sorted_incr reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_sorted_decr reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_s_combinator reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_s2_combinator reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_goodname2 reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    VAR             reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    FLOAT           reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    NUM             reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    NULL            reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    STRING_3SQ      reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    STRING_3DQ      reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    STRING_SQ       reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    STRING_DQ       reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    true            reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    false           reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_type       reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_num        reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_any        reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_u64        reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_u32        reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_u16        reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_u8         reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_i64        reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_i32        reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_i16        reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_i8         reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_f32        reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_f64        reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_str        reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_list       reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_tuple      reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_array      reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_vector     reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_dict       reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_generator  reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_linked_list reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_doubly_linked_list reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_deque      reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_heap       reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_fibonacci_heap reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_tree       reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_trie       reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_stack      reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_queue      reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_binary_search_tree reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_bitset     reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_set        reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_map        reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_range      reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_bad_struct reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    type_bad_struct2 reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    lambda          reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    pass            reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    else            reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    return          reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    del             reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    for             reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    if              reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    elif            reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator        reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    struct          reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    while           reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    func            reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    $end            reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    }               reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    operator_inner  reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    {               reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    )               reduce using rule 111 (return_val -> type_bitset ( arguments ) .)
    ,               reduce using rule 111 (return_val -> type_bitset ( arguments ) .)


state 420

    (112) return_val -> type_set ( arguments ) .

    operator_add    reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_sub    reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_mul    reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_div    reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_trudiv reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_pow    reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_join   reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_split  reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_scan   reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_reduc  reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_bitand reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_bitor  reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_bitxor reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_bitshiftleft reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_bitshiftright reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_and    reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_or     reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_xor    reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_contains reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_incr   reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_decr   reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_outer  reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_rotate reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_apply  reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_compose reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_over   reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_map    reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_less_than reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_less_than_equals reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_greater_than reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_greater_than_equals reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_equals reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_not_equals reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_smallest reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_greatest reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_goodname reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_bitnot reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_not    reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_reverse reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_sorted_incr reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_sorted_decr reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_s_combinator reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_s2_combinator reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_goodname2 reduce using rule 112 (return_val -> type_set ( arguments ) .)
    VAR             reduce using rule 112 (return_val -> type_set ( arguments ) .)
    FLOAT           reduce using rule 112 (return_val -> type_set ( arguments ) .)
    NUM             reduce using rule 112 (return_val -> type_set ( arguments ) .)
    NULL            reduce using rule 112 (return_val -> type_set ( arguments ) .)
    STRING_3SQ      reduce using rule 112 (return_val -> type_set ( arguments ) .)
    STRING_3DQ      reduce using rule 112 (return_val -> type_set ( arguments ) .)
    STRING_SQ       reduce using rule 112 (return_val -> type_set ( arguments ) .)
    STRING_DQ       reduce using rule 112 (return_val -> type_set ( arguments ) .)
    true            reduce using rule 112 (return_val -> type_set ( arguments ) .)
    false           reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_type       reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_num        reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_any        reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_u64        reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_u32        reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_u16        reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_u8         reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_i64        reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_i32        reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_i16        reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_i8         reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_f32        reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_f64        reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_str        reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_list       reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_tuple      reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_array      reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_vector     reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_dict       reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_generator  reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_linked_list reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_doubly_linked_list reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_deque      reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_heap       reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_fibonacci_heap reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_tree       reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_trie       reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_stack      reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_queue      reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_binary_search_tree reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_bitset     reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_set        reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_map        reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_range      reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_bad_struct reduce using rule 112 (return_val -> type_set ( arguments ) .)
    type_bad_struct2 reduce using rule 112 (return_val -> type_set ( arguments ) .)
    lambda          reduce using rule 112 (return_val -> type_set ( arguments ) .)
    pass            reduce using rule 112 (return_val -> type_set ( arguments ) .)
    else            reduce using rule 112 (return_val -> type_set ( arguments ) .)
    return          reduce using rule 112 (return_val -> type_set ( arguments ) .)
    del             reduce using rule 112 (return_val -> type_set ( arguments ) .)
    for             reduce using rule 112 (return_val -> type_set ( arguments ) .)
    if              reduce using rule 112 (return_val -> type_set ( arguments ) .)
    elif            reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator        reduce using rule 112 (return_val -> type_set ( arguments ) .)
    struct          reduce using rule 112 (return_val -> type_set ( arguments ) .)
    while           reduce using rule 112 (return_val -> type_set ( arguments ) .)
    func            reduce using rule 112 (return_val -> type_set ( arguments ) .)
    $end            reduce using rule 112 (return_val -> type_set ( arguments ) .)
    }               reduce using rule 112 (return_val -> type_set ( arguments ) .)
    operator_inner  reduce using rule 112 (return_val -> type_set ( arguments ) .)
    {               reduce using rule 112 (return_val -> type_set ( arguments ) .)
    )               reduce using rule 112 (return_val -> type_set ( arguments ) .)
    ,               reduce using rule 112 (return_val -> type_set ( arguments ) .)


state 421

    (113) return_val -> type_map ( arguments ) .

    operator_add    reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_sub    reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_mul    reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_div    reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_trudiv reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_pow    reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_join   reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_split  reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_scan   reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_reduc  reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_bitand reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_bitor  reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_bitxor reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_bitshiftleft reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_bitshiftright reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_and    reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_or     reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_xor    reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_contains reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_incr   reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_decr   reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_outer  reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_rotate reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_apply  reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_compose reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_over   reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_map    reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_less_than reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_less_than_equals reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_greater_than reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_greater_than_equals reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_equals reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_not_equals reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_smallest reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_greatest reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_goodname reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_bitnot reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_not    reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_reverse reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_sorted_incr reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_sorted_decr reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_s_combinator reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_s2_combinator reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_goodname2 reduce using rule 113 (return_val -> type_map ( arguments ) .)
    VAR             reduce using rule 113 (return_val -> type_map ( arguments ) .)
    FLOAT           reduce using rule 113 (return_val -> type_map ( arguments ) .)
    NUM             reduce using rule 113 (return_val -> type_map ( arguments ) .)
    NULL            reduce using rule 113 (return_val -> type_map ( arguments ) .)
    STRING_3SQ      reduce using rule 113 (return_val -> type_map ( arguments ) .)
    STRING_3DQ      reduce using rule 113 (return_val -> type_map ( arguments ) .)
    STRING_SQ       reduce using rule 113 (return_val -> type_map ( arguments ) .)
    STRING_DQ       reduce using rule 113 (return_val -> type_map ( arguments ) .)
    true            reduce using rule 113 (return_val -> type_map ( arguments ) .)
    false           reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_type       reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_num        reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_any        reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_u64        reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_u32        reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_u16        reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_u8         reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_i64        reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_i32        reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_i16        reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_i8         reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_f32        reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_f64        reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_str        reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_list       reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_tuple      reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_array      reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_vector     reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_dict       reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_generator  reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_linked_list reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_doubly_linked_list reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_deque      reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_heap       reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_fibonacci_heap reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_tree       reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_trie       reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_stack      reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_queue      reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_binary_search_tree reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_bitset     reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_set        reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_map        reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_range      reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_bad_struct reduce using rule 113 (return_val -> type_map ( arguments ) .)
    type_bad_struct2 reduce using rule 113 (return_val -> type_map ( arguments ) .)
    lambda          reduce using rule 113 (return_val -> type_map ( arguments ) .)
    pass            reduce using rule 113 (return_val -> type_map ( arguments ) .)
    else            reduce using rule 113 (return_val -> type_map ( arguments ) .)
    return          reduce using rule 113 (return_val -> type_map ( arguments ) .)
    del             reduce using rule 113 (return_val -> type_map ( arguments ) .)
    for             reduce using rule 113 (return_val -> type_map ( arguments ) .)
    if              reduce using rule 113 (return_val -> type_map ( arguments ) .)
    elif            reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator        reduce using rule 113 (return_val -> type_map ( arguments ) .)
    struct          reduce using rule 113 (return_val -> type_map ( arguments ) .)
    while           reduce using rule 113 (return_val -> type_map ( arguments ) .)
    func            reduce using rule 113 (return_val -> type_map ( arguments ) .)
    $end            reduce using rule 113 (return_val -> type_map ( arguments ) .)
    }               reduce using rule 113 (return_val -> type_map ( arguments ) .)
    operator_inner  reduce using rule 113 (return_val -> type_map ( arguments ) .)
    {               reduce using rule 113 (return_val -> type_map ( arguments ) .)
    )               reduce using rule 113 (return_val -> type_map ( arguments ) .)
    ,               reduce using rule 113 (return_val -> type_map ( arguments ) .)


state 422

    (114) return_val -> type_range ( arguments ) .

    operator_add    reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_sub    reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_mul    reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_div    reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_trudiv reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_pow    reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_join   reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_split  reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_scan   reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_reduc  reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_bitand reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_bitor  reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_bitxor reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_bitshiftleft reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_bitshiftright reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_and    reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_or     reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_xor    reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_contains reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_incr   reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_decr   reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_outer  reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_rotate reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_apply  reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_compose reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_over   reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_map    reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_less_than reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_less_than_equals reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_greater_than reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_greater_than_equals reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_equals reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_not_equals reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_smallest reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_greatest reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_goodname reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_bitnot reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_not    reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_reverse reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_sorted_incr reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_sorted_decr reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_s_combinator reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_s2_combinator reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_goodname2 reduce using rule 114 (return_val -> type_range ( arguments ) .)
    VAR             reduce using rule 114 (return_val -> type_range ( arguments ) .)
    FLOAT           reduce using rule 114 (return_val -> type_range ( arguments ) .)
    NUM             reduce using rule 114 (return_val -> type_range ( arguments ) .)
    NULL            reduce using rule 114 (return_val -> type_range ( arguments ) .)
    STRING_3SQ      reduce using rule 114 (return_val -> type_range ( arguments ) .)
    STRING_3DQ      reduce using rule 114 (return_val -> type_range ( arguments ) .)
    STRING_SQ       reduce using rule 114 (return_val -> type_range ( arguments ) .)
    STRING_DQ       reduce using rule 114 (return_val -> type_range ( arguments ) .)
    true            reduce using rule 114 (return_val -> type_range ( arguments ) .)
    false           reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_type       reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_num        reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_any        reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_u64        reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_u32        reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_u16        reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_u8         reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_i64        reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_i32        reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_i16        reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_i8         reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_f32        reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_f64        reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_str        reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_list       reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_tuple      reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_array      reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_vector     reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_dict       reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_generator  reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_linked_list reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_doubly_linked_list reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_deque      reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_heap       reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_fibonacci_heap reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_tree       reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_trie       reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_stack      reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_queue      reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_binary_search_tree reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_bitset     reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_set        reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_map        reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_range      reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_bad_struct reduce using rule 114 (return_val -> type_range ( arguments ) .)
    type_bad_struct2 reduce using rule 114 (return_val -> type_range ( arguments ) .)
    lambda          reduce using rule 114 (return_val -> type_range ( arguments ) .)
    pass            reduce using rule 114 (return_val -> type_range ( arguments ) .)
    else            reduce using rule 114 (return_val -> type_range ( arguments ) .)
    return          reduce using rule 114 (return_val -> type_range ( arguments ) .)
    del             reduce using rule 114 (return_val -> type_range ( arguments ) .)
    for             reduce using rule 114 (return_val -> type_range ( arguments ) .)
    if              reduce using rule 114 (return_val -> type_range ( arguments ) .)
    elif            reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator        reduce using rule 114 (return_val -> type_range ( arguments ) .)
    struct          reduce using rule 114 (return_val -> type_range ( arguments ) .)
    while           reduce using rule 114 (return_val -> type_range ( arguments ) .)
    func            reduce using rule 114 (return_val -> type_range ( arguments ) .)
    $end            reduce using rule 114 (return_val -> type_range ( arguments ) .)
    }               reduce using rule 114 (return_val -> type_range ( arguments ) .)
    operator_inner  reduce using rule 114 (return_val -> type_range ( arguments ) .)
    {               reduce using rule 114 (return_val -> type_range ( arguments ) .)
    )               reduce using rule 114 (return_val -> type_range ( arguments ) .)
    ,               reduce using rule 114 (return_val -> type_range ( arguments ) .)


state 423

    (115) return_val -> type_bad_struct ( arguments ) .

    operator_add    reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_sub    reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_mul    reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_div    reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_trudiv reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_pow    reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_join   reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_split  reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_scan   reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_reduc  reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_bitand reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_bitor  reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_bitxor reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_bitshiftleft reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_bitshiftright reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_and    reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_or     reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_xor    reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_contains reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_incr   reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_decr   reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_outer  reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_rotate reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_apply  reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_compose reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_over   reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_map    reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_less_than reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_less_than_equals reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_greater_than reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_greater_than_equals reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_equals reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_not_equals reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_smallest reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_greatest reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_goodname reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_bitnot reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_not    reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_reverse reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_sorted_incr reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_sorted_decr reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_s_combinator reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_s2_combinator reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_goodname2 reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    VAR             reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    FLOAT           reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    NUM             reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    NULL            reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    STRING_3SQ      reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    STRING_3DQ      reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    STRING_SQ       reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    STRING_DQ       reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    true            reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    false           reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_type       reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_num        reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_any        reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_u64        reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_u32        reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_u16        reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_u8         reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_i64        reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_i32        reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_i16        reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_i8         reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_f32        reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_f64        reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_str        reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_list       reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_tuple      reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_array      reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_vector     reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_dict       reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_generator  reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_linked_list reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_doubly_linked_list reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_deque      reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_heap       reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_fibonacci_heap reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_tree       reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_trie       reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_stack      reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_queue      reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_binary_search_tree reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_bitset     reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_set        reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_map        reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_range      reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_bad_struct reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    type_bad_struct2 reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    lambda          reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    pass            reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    else            reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    return          reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    del             reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    for             reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    if              reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    elif            reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator        reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    struct          reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    while           reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    func            reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    $end            reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    }               reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    operator_inner  reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    {               reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    )               reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)
    ,               reduce using rule 115 (return_val -> type_bad_struct ( arguments ) .)


state 424

    (116) return_val -> type_bad_struct2 ( arguments ) .

    operator_add    reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_sub    reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_mul    reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_div    reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_trudiv reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_pow    reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_join   reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_split  reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_scan   reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_reduc  reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_bitand reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_bitor  reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_bitxor reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_bitshiftleft reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_bitshiftright reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_and    reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_or     reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_xor    reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_contains reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_incr   reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_decr   reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_outer  reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_rotate reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_apply  reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_compose reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_over   reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_map    reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_less_than reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_less_than_equals reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_greater_than reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_greater_than_equals reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_equals reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_not_equals reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_smallest reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_greatest reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_goodname reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_bitnot reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_not    reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_reverse reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_sorted_incr reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_sorted_decr reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_s_combinator reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_s2_combinator reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_goodname2 reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    VAR             reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    FLOAT           reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    NUM             reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    NULL            reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    STRING_3SQ      reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    STRING_3DQ      reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    STRING_SQ       reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    STRING_DQ       reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    true            reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    false           reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_type       reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_num        reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_any        reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_u64        reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_u32        reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_u16        reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_u8         reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_i64        reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_i32        reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_i16        reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_i8         reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_f32        reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_f64        reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_str        reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_list       reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_tuple      reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_array      reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_vector     reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_dict       reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_generator  reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_linked_list reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_doubly_linked_list reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_deque      reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_heap       reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_fibonacci_heap reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_tree       reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_trie       reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_stack      reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_queue      reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_binary_search_tree reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_bitset     reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_set        reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_map        reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_range      reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_bad_struct reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    type_bad_struct2 reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    lambda          reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    pass            reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    else            reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    return          reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    del             reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    for             reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    if              reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    elif            reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator        reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    struct          reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    while           reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    func            reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    $end            reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    }               reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_inner  reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    {               reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    )               reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)
    ,               reduce using rule 116 (return_val -> type_bad_struct2 ( arguments ) .)


state 425

    (47) lambda_decl -> lambda comma_separated_names : expr .
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .)
    else            reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .)
    return          reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .)
    del             reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .)
    for             reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .)
    if              reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .)
    elif            reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .)
    operator        reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .)
    struct          reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .)
    while           reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .)
    func            reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .)
    $end            reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .)
    }               reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .)
    operator_inner  reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .)
    {               reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .)
    )               reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .)
    ,               reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .)
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_sub    [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_mul    [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_div    [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_trudiv [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_pow    [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_join   [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_split  [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_scan   [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_reduc  [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitand [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitor  [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitxor [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitshiftleft [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitshiftright [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_and    [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_or     [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_xor    [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_contains [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_incr   [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_decr   [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_outer  [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_rotate [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_apply  [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_compose [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_over   [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_map    [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_less_than [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_less_than_equals [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_greater_than [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_greater_than_equals [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_equals [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_not_equals [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_smallest [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_greatest [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_goodname [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitnot [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_not    [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_reverse [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_sorted_incr [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_sorted_decr [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_s_combinator [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_s2_combinator [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_goodname2 [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! VAR             [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! FLOAT           [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! NUM             [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! NULL            [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! STRING_3SQ      [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! STRING_3DQ      [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! STRING_SQ       [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! STRING_DQ       [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! true            [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! false           [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_type       [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_num        [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_any        [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_u64        [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_u32        [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_u16        [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_u8         [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_i64        [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_i32        [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_i16        [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_i8         [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_f32        [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_f64        [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_str        [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_list       [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_tuple      [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_array      [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_vector     [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_dict       [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_generator  [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_linked_list [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_doubly_linked_list [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_deque      [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_heap       [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_fibonacci_heap [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_tree       [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_trie       [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_stack      [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_queue      [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_binary_search_tree [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_bitset     [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_set        [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_map        [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_range      [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_bad_struct [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_bad_struct2 [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! lambda          [ reduce using rule 47 (lambda_decl -> lambda comma_separated_names : expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 426

    (142) expr -> expr expr operator_inner expr expr .
    (142) expr -> expr expr . operator_inner expr expr
    (118) expr -> expr . operator_add expr
    (119) expr -> expr . operator_sub expr
    (120) expr -> expr . operator_mul expr
    (121) expr -> expr . operator_div expr
    (122) expr -> expr . operator_trudiv expr
    (123) expr -> expr . operator_pow expr
    (124) expr -> expr . operator_join expr
    (125) expr -> expr . operator_split expr
    (126) expr -> expr . operator_scan expr
    (127) expr -> expr . operator_reduc expr
    (128) expr -> expr . operator_bitand expr
    (129) expr -> expr . operator_bitor expr
    (130) expr -> expr . operator_bitxor expr
    (131) expr -> expr . operator_bitshiftleft expr
    (132) expr -> expr . operator_bitshiftright expr
    (133) expr -> expr . operator_and expr
    (134) expr -> expr . operator_or expr
    (135) expr -> expr . operator_xor expr
    (136) expr -> expr . operator_contains expr
    (139) expr -> expr . operator_incr
    (140) expr -> expr . operator_decr
    (141) expr -> expr . operator_outer expr expr
    (142) expr -> expr . expr operator_inner expr expr
    (144) expr -> expr . operator_rotate expr
    (145) expr -> expr . operator_apply expr
    (146) expr -> expr . operator_compose expr
    (147) expr -> expr . operator_over expr
    (148) expr -> expr . operator_map
    (151) expr -> expr . operator_less_than expr
    (152) expr -> expr . operator_less_than_equals expr
    (153) expr -> expr . operator_greater_than expr
    (154) expr -> expr . operator_greater_than_equals expr
    (155) expr -> expr . operator_equals expr
    (156) expr -> expr . operator_not_equals expr
    (157) expr -> expr . operator_smallest expr
    (158) expr -> expr . operator_greatest expr
    (159) expr -> expr . operator_goodname expr
    (118) expr -> . expr operator_add expr
    (119) expr -> . expr operator_sub expr
    (120) expr -> . expr operator_mul expr
    (121) expr -> . expr operator_div expr
    (122) expr -> . expr operator_trudiv expr
    (123) expr -> . expr operator_pow expr
    (124) expr -> . expr operator_join expr
    (125) expr -> . expr operator_split expr
    (126) expr -> . expr operator_scan expr
    (127) expr -> . expr operator_reduc expr
    (128) expr -> . expr operator_bitand expr
    (129) expr -> . expr operator_bitor expr
    (130) expr -> . expr operator_bitxor expr
    (131) expr -> . expr operator_bitshiftleft expr
    (132) expr -> . expr operator_bitshiftright expr
    (133) expr -> . expr operator_and expr
    (134) expr -> . expr operator_or expr
    (135) expr -> . expr operator_xor expr
    (136) expr -> . expr operator_contains expr
    (137) expr -> . operator_bitnot expr
    (138) expr -> . operator_not expr
    (139) expr -> . expr operator_incr
    (140) expr -> . expr operator_decr
    (141) expr -> . expr operator_outer expr expr
    (142) expr -> . expr expr operator_inner expr expr
    (143) expr -> . operator_reverse expr
    (144) expr -> . expr operator_rotate expr
    (145) expr -> . expr operator_apply expr
    (146) expr -> . expr operator_compose expr
    (147) expr -> . expr operator_over expr
    (148) expr -> . expr operator_map
    (149) expr -> . operator_sorted_incr expr
    (150) expr -> . operator_sorted_decr expr
    (151) expr -> . expr operator_less_than expr
    (152) expr -> . expr operator_less_than_equals expr
    (153) expr -> . expr operator_greater_than expr
    (154) expr -> . expr operator_greater_than_equals expr
    (155) expr -> . expr operator_equals expr
    (156) expr -> . expr operator_not_equals expr
    (157) expr -> . expr operator_smallest expr
    (158) expr -> . expr operator_greatest expr
    (159) expr -> . expr operator_goodname expr
    (160) expr -> . operator_s_combinator expr expr expr
    (161) expr -> . operator_s2_combinator expr expr expr
    (162) expr -> . operator_goodname2 expr
    (163) expr -> . const_val
    (164) expr -> . VAR
    (165) expr -> . return_val
    (166) expr -> . lambda_decl
    (72) const_val -> . FLOAT
    (73) const_val -> . NUM
    (74) const_val -> . NULL
    (75) const_val -> . STRING_3SQ
    (76) const_val -> . STRING_3DQ
    (77) const_val -> . STRING_SQ
    (78) const_val -> . STRING_DQ
    (79) const_val -> . true
    (80) const_val -> . false
    (81) return_val -> . type_type ( arguments )
    (82) return_val -> . type_num ( arguments )
    (83) return_val -> . type_any ( arguments )
    (84) return_val -> . type_u64 ( arguments )
    (85) return_val -> . type_u32 ( arguments )
    (86) return_val -> . type_u16 ( arguments )
    (87) return_val -> . type_u8 ( arguments )
    (88) return_val -> . type_i64 ( arguments )
    (89) return_val -> . type_i32 ( arguments )
    (90) return_val -> . type_i16 ( arguments )
    (91) return_val -> . type_i8 ( arguments )
    (92) return_val -> . type_f32 ( arguments )
    (93) return_val -> . type_f64 ( arguments )
    (94) return_val -> . type_str ( arguments )
    (95) return_val -> . type_list ( arguments )
    (96) return_val -> . type_tuple ( arguments )
    (97) return_val -> . type_array ( arguments )
    (98) return_val -> . type_vector ( arguments )
    (99) return_val -> . type_dict ( arguments )
    (100) return_val -> . type_generator ( arguments )
    (101) return_val -> . type_linked_list ( arguments )
    (102) return_val -> . type_doubly_linked_list ( arguments )
    (103) return_val -> . type_deque ( arguments )
    (104) return_val -> . type_heap ( arguments )
    (105) return_val -> . type_fibonacci_heap ( arguments )
    (106) return_val -> . type_tree ( arguments )
    (107) return_val -> . type_trie ( arguments )
    (108) return_val -> . type_stack ( arguments )
    (109) return_val -> . type_queue ( arguments )
    (110) return_val -> . type_binary_search_tree ( arguments )
    (111) return_val -> . type_bitset ( arguments )
    (112) return_val -> . type_set ( arguments )
    (113) return_val -> . type_map ( arguments )
    (114) return_val -> . type_range ( arguments )
    (115) return_val -> . type_bad_struct ( arguments )
    (116) return_val -> . type_bad_struct2 ( arguments )
    (117) return_val -> . VAR ( arguments )
    (47) lambda_decl -> . lambda comma_separated_names : expr

  ! shift/reduce conflict for operator_inner resolved as shift
  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    pass            reduce using rule 142 (expr -> expr expr operator_inner expr expr .)
    else            reduce using rule 142 (expr -> expr expr operator_inner expr expr .)
    return          reduce using rule 142 (expr -> expr expr operator_inner expr expr .)
    del             reduce using rule 142 (expr -> expr expr operator_inner expr expr .)
    for             reduce using rule 142 (expr -> expr expr operator_inner expr expr .)
    if              reduce using rule 142 (expr -> expr expr operator_inner expr expr .)
    elif            reduce using rule 142 (expr -> expr expr operator_inner expr expr .)
    operator        reduce using rule 142 (expr -> expr expr operator_inner expr expr .)
    struct          reduce using rule 142 (expr -> expr expr operator_inner expr expr .)
    while           reduce using rule 142 (expr -> expr expr operator_inner expr expr .)
    func            reduce using rule 142 (expr -> expr expr operator_inner expr expr .)
    $end            reduce using rule 142 (expr -> expr expr operator_inner expr expr .)
    }               reduce using rule 142 (expr -> expr expr operator_inner expr expr .)
    {               reduce using rule 142 (expr -> expr expr operator_inner expr expr .)
    )               reduce using rule 142 (expr -> expr expr operator_inner expr expr .)
    ,               reduce using rule 142 (expr -> expr expr operator_inner expr expr .)
    operator_inner  shift and go to state 261
    operator_add    shift and go to state 92
    operator_sub    shift and go to state 93
    operator_mul    shift and go to state 94
    operator_div    shift and go to state 95
    operator_trudiv shift and go to state 96
    operator_pow    shift and go to state 97
    operator_join   shift and go to state 98
    operator_split  shift and go to state 99
    operator_scan   shift and go to state 100
    operator_reduc  shift and go to state 101
    operator_bitand shift and go to state 102
    operator_bitor  shift and go to state 103
    operator_bitxor shift and go to state 104
    operator_bitshiftleft shift and go to state 105
    operator_bitshiftright shift and go to state 106
    operator_and    shift and go to state 107
    operator_or     shift and go to state 108
    operator_xor    shift and go to state 109
    operator_contains shift and go to state 110
    operator_incr   shift and go to state 111
    operator_decr   shift and go to state 112
    operator_outer  shift and go to state 113
    operator_rotate shift and go to state 114
    operator_apply  shift and go to state 115
    operator_compose shift and go to state 116
    operator_over   shift and go to state 117
    operator_map    shift and go to state 118
    operator_less_than shift and go to state 119
    operator_less_than_equals shift and go to state 120
    operator_greater_than shift and go to state 121
    operator_greater_than_equals shift and go to state 122
    operator_equals shift and go to state 123
    operator_not_equals shift and go to state 124
    operator_smallest shift and go to state 125
    operator_greatest shift and go to state 126
    operator_goodname shift and go to state 127
    operator_bitnot shift and go to state 21
    operator_not    shift and go to state 22
    operator_reverse shift and go to state 23
    operator_sorted_incr shift and go to state 24
    operator_sorted_decr shift and go to state 25
    operator_s_combinator shift and go to state 26
    operator_s2_combinator shift and go to state 27
    operator_goodname2 shift and go to state 28
    VAR             shift and go to state 128
    FLOAT           shift and go to state 43
    NUM             shift and go to state 44
    NULL            shift and go to state 45
    STRING_3SQ      shift and go to state 46
    STRING_3DQ      shift and go to state 47
    STRING_SQ       shift and go to state 48
    STRING_DQ       shift and go to state 49
    true            shift and go to state 50
    false           shift and go to state 51
    type_type       shift and go to state 129
    type_num        shift and go to state 130
    type_any        shift and go to state 131
    type_u64        shift and go to state 132
    type_u32        shift and go to state 133
    type_u16        shift and go to state 134
    type_u8         shift and go to state 135
    type_i64        shift and go to state 136
    type_i32        shift and go to state 137
    type_i16        shift and go to state 138
    type_i8         shift and go to state 139
    type_f32        shift and go to state 140
    type_f64        shift and go to state 141
    type_str        shift and go to state 142
    type_list       shift and go to state 143
    type_tuple      shift and go to state 144
    type_array      shift and go to state 145
    type_vector     shift and go to state 146
    type_dict       shift and go to state 147
    type_generator  shift and go to state 148
    type_linked_list shift and go to state 149
    type_doubly_linked_list shift and go to state 150
    type_deque      shift and go to state 151
    type_heap       shift and go to state 152
    type_fibonacci_heap shift and go to state 153
    type_tree       shift and go to state 154
    type_trie       shift and go to state 155
    type_stack      shift and go to state 156
    type_queue      shift and go to state 157
    type_binary_search_tree shift and go to state 158
    type_bitset     shift and go to state 159
    type_set        shift and go to state 160
    type_map        shift and go to state 161
    type_range      shift and go to state 162
    type_bad_struct shift and go to state 163
    type_bad_struct2 shift and go to state 164
    lambda          shift and go to state 88

  ! operator_add    [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_sub    [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_mul    [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_div    [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_trudiv [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_pow    [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_join   [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_split  [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_scan   [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_reduc  [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_bitand [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_bitor  [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_bitxor [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_bitshiftleft [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_bitshiftright [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_and    [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_or     [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_xor    [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_contains [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_incr   [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_decr   [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_outer  [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_rotate [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_apply  [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_compose [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_over   [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_map    [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_less_than [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_less_than_equals [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_greater_than [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_greater_than_equals [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_equals [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_not_equals [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_smallest [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_greatest [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_goodname [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_bitnot [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_not    [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_reverse [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_sorted_incr [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_sorted_decr [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_s_combinator [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_s2_combinator [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_goodname2 [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! VAR             [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! FLOAT           [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! NUM             [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! NULL            [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! STRING_3SQ      [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! STRING_3DQ      [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! STRING_SQ       [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! STRING_DQ       [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! true            [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! false           [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_type       [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_num        [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_any        [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_u64        [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_u32        [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_u16        [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_u8         [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_i64        [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_i32        [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_i16        [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_i8         [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_f32        [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_f64        [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_str        [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_list       [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_tuple      [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_array      [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_vector     [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_dict       [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_generator  [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_linked_list [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_doubly_linked_list [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_deque      [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_heap       [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_fibonacci_heap [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_tree       [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_trie       [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_stack      [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_queue      [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_binary_search_tree [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_bitset     [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_set        [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_map        [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_range      [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_bad_struct [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! type_bad_struct2 [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! lambda          [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_inner  [ reduce using rule 142 (expr -> expr expr operator_inner expr expr .) ]

    expr                           shift and go to state 91
    const_val                      shift and go to state 29
    return_val                     shift and go to state 31
    lambda_decl                    shift and go to state 32

state 427

    (205) arguments -> arguments , arguments .
    (205) arguments -> arguments . , arguments

  ! shift/reduce conflict for , resolved as shift
    )               reduce using rule 205 (arguments -> arguments , arguments .)
    ,               shift and go to state 384

  ! ,               [ reduce using rule 205 (arguments -> arguments , arguments .) ]


state 428

    (69) func_decl -> func VAR ( def_arguments ) .

    {               reduce using rule 69 (func_decl -> func VAR ( def_arguments ) .)


state 429

    (71) def_arguments -> declaration_stmt ; . def_arguments
    (70) def_arguments -> . declaration_stmt
    (71) def_arguments -> . declaration_stmt ; def_arguments
    (51) declaration_stmt -> . TYPE comma_separated_names
    (5) TYPE -> . type_type
    (6) TYPE -> . type_num
    (7) TYPE -> . type_any
    (8) TYPE -> . type_u64
    (9) TYPE -> . type_u32
    (10) TYPE -> . type_u16
    (11) TYPE -> . type_u8
    (12) TYPE -> . type_i64
    (13) TYPE -> . type_i32
    (14) TYPE -> . type_i16
    (15) TYPE -> . type_i8
    (16) TYPE -> . type_f32
    (17) TYPE -> . type_f64
    (18) TYPE -> . type_str
    (19) TYPE -> . type_list
    (20) TYPE -> . type_tuple
    (21) TYPE -> . type_array
    (22) TYPE -> . type_vector
    (23) TYPE -> . type_dict
    (24) TYPE -> . type_generator
    (25) TYPE -> . type_linked_list
    (26) TYPE -> . type_doubly_linked_list
    (27) TYPE -> . type_deque
    (28) TYPE -> . type_heap
    (29) TYPE -> . type_fibonacci_heap
    (30) TYPE -> . type_tree
    (31) TYPE -> . type_trie
    (32) TYPE -> . type_stack
    (33) TYPE -> . type_queue
    (34) TYPE -> . type_binary_search_tree
    (35) TYPE -> . type_bitset
    (36) TYPE -> . type_set
    (37) TYPE -> . type_map
    (38) TYPE -> . type_range
    (39) TYPE -> . type_bad_struct
    (40) TYPE -> . type_bad_struct2

    type_type       shift and go to state 185
    type_num        shift and go to state 186
    type_any        shift and go to state 187
    type_u64        shift and go to state 188
    type_u32        shift and go to state 189
    type_u16        shift and go to state 190
    type_u8         shift and go to state 191
    type_i64        shift and go to state 192
    type_i32        shift and go to state 193
    type_i16        shift and go to state 194
    type_i8         shift and go to state 195
    type_f32        shift and go to state 196
    type_f64        shift and go to state 197
    type_str        shift and go to state 198
    type_list       shift and go to state 199
    type_tuple      shift and go to state 200
    type_array      shift and go to state 201
    type_vector     shift and go to state 202
    type_dict       shift and go to state 203
    type_generator  shift and go to state 204
    type_linked_list shift and go to state 205
    type_doubly_linked_list shift and go to state 206
    type_deque      shift and go to state 207
    type_heap       shift and go to state 208
    type_fibonacci_heap shift and go to state 209
    type_tree       shift and go to state 210
    type_trie       shift and go to state 211
    type_stack      shift and go to state 212
    type_queue      shift and go to state 213
    type_binary_search_tree shift and go to state 214
    type_bitset     shift and go to state 215
    type_set        shift and go to state 216
    type_map        shift and go to state 217
    type_range      shift and go to state 218
    type_bad_struct shift and go to state 219
    type_bad_struct2 shift and go to state 220

    declaration_stmt               shift and go to state 388
    def_arguments                  shift and go to state 430
    TYPE                           shift and go to state 35

state 430

    (71) def_arguments -> declaration_stmt ; def_arguments .

    )               reduce using rule 71 (def_arguments -> declaration_stmt ; def_arguments .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for operator_bitnot in state 7 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 7 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 7 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 7 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 7 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 7 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 7 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 7 resolved as shift
WARNING: shift/reduce conflict for VAR in state 7 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 7 resolved as shift
WARNING: shift/reduce conflict for NUM in state 7 resolved as shift
WARNING: shift/reduce conflict for NULL in state 7 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 7 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 7 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 7 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 7 resolved as shift
WARNING: shift/reduce conflict for true in state 7 resolved as shift
WARNING: shift/reduce conflict for false in state 7 resolved as shift
WARNING: shift/reduce conflict for type_type in state 7 resolved as shift
WARNING: shift/reduce conflict for type_num in state 7 resolved as shift
WARNING: shift/reduce conflict for type_any in state 7 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 7 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 7 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 7 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 7 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 7 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 7 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 7 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 7 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 7 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 7 resolved as shift
WARNING: shift/reduce conflict for type_str in state 7 resolved as shift
WARNING: shift/reduce conflict for type_list in state 7 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 7 resolved as shift
WARNING: shift/reduce conflict for type_array in state 7 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 7 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 7 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 7 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 7 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 7 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 7 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 7 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 7 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 7 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 7 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 7 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 7 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 7 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 7 resolved as shift
WARNING: shift/reduce conflict for type_set in state 7 resolved as shift
WARNING: shift/reduce conflict for type_map in state 7 resolved as shift
WARNING: shift/reduce conflict for type_range in state 7 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 7 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 7 resolved as shift
WARNING: shift/reduce conflict for lambda in state 7 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 166 resolved as shift
WARNING: shift/reduce conflict for VAR in state 166 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 166 resolved as shift
WARNING: shift/reduce conflict for NUM in state 166 resolved as shift
WARNING: shift/reduce conflict for NULL in state 166 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 166 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 166 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 166 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 166 resolved as shift
WARNING: shift/reduce conflict for true in state 166 resolved as shift
WARNING: shift/reduce conflict for false in state 166 resolved as shift
WARNING: shift/reduce conflict for type_type in state 166 resolved as shift
WARNING: shift/reduce conflict for type_num in state 166 resolved as shift
WARNING: shift/reduce conflict for type_any in state 166 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 166 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 166 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 166 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 166 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 166 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 166 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 166 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 166 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 166 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 166 resolved as shift
WARNING: shift/reduce conflict for type_str in state 166 resolved as shift
WARNING: shift/reduce conflict for type_list in state 166 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 166 resolved as shift
WARNING: shift/reduce conflict for type_array in state 166 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 166 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 166 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 166 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 166 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 166 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 166 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 166 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 166 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 166 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 166 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 166 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 166 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 166 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 166 resolved as shift
WARNING: shift/reduce conflict for type_set in state 166 resolved as shift
WARNING: shift/reduce conflict for type_map in state 166 resolved as shift
WARNING: shift/reduce conflict for type_range in state 166 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 166 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 166 resolved as shift
WARNING: shift/reduce conflict for lambda in state 166 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 167 resolved as shift
WARNING: shift/reduce conflict for VAR in state 167 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 167 resolved as shift
WARNING: shift/reduce conflict for NUM in state 167 resolved as shift
WARNING: shift/reduce conflict for NULL in state 167 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 167 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 167 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 167 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 167 resolved as shift
WARNING: shift/reduce conflict for true in state 167 resolved as shift
WARNING: shift/reduce conflict for false in state 167 resolved as shift
WARNING: shift/reduce conflict for type_type in state 167 resolved as shift
WARNING: shift/reduce conflict for type_num in state 167 resolved as shift
WARNING: shift/reduce conflict for type_any in state 167 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 167 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 167 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 167 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 167 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 167 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 167 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 167 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 167 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 167 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 167 resolved as shift
WARNING: shift/reduce conflict for type_str in state 167 resolved as shift
WARNING: shift/reduce conflict for type_list in state 167 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 167 resolved as shift
WARNING: shift/reduce conflict for type_array in state 167 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 167 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 167 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 167 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 167 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 167 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 167 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 167 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 167 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 167 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 167 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 167 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 167 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 167 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 167 resolved as shift
WARNING: shift/reduce conflict for type_set in state 167 resolved as shift
WARNING: shift/reduce conflict for type_map in state 167 resolved as shift
WARNING: shift/reduce conflict for type_range in state 167 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 167 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 167 resolved as shift
WARNING: shift/reduce conflict for lambda in state 167 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 168 resolved as shift
WARNING: shift/reduce conflict for VAR in state 168 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 168 resolved as shift
WARNING: shift/reduce conflict for NUM in state 168 resolved as shift
WARNING: shift/reduce conflict for NULL in state 168 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 168 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 168 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 168 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 168 resolved as shift
WARNING: shift/reduce conflict for true in state 168 resolved as shift
WARNING: shift/reduce conflict for false in state 168 resolved as shift
WARNING: shift/reduce conflict for type_type in state 168 resolved as shift
WARNING: shift/reduce conflict for type_num in state 168 resolved as shift
WARNING: shift/reduce conflict for type_any in state 168 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 168 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 168 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 168 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 168 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 168 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 168 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 168 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 168 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 168 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 168 resolved as shift
WARNING: shift/reduce conflict for type_str in state 168 resolved as shift
WARNING: shift/reduce conflict for type_list in state 168 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 168 resolved as shift
WARNING: shift/reduce conflict for type_array in state 168 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 168 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 168 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 168 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 168 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 168 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 168 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 168 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 168 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 168 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 168 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 168 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 168 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 168 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 168 resolved as shift
WARNING: shift/reduce conflict for type_set in state 168 resolved as shift
WARNING: shift/reduce conflict for type_map in state 168 resolved as shift
WARNING: shift/reduce conflict for type_range in state 168 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 168 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 168 resolved as shift
WARNING: shift/reduce conflict for lambda in state 168 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 169 resolved as shift
WARNING: shift/reduce conflict for VAR in state 169 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 169 resolved as shift
WARNING: shift/reduce conflict for NUM in state 169 resolved as shift
WARNING: shift/reduce conflict for NULL in state 169 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 169 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 169 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 169 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 169 resolved as shift
WARNING: shift/reduce conflict for true in state 169 resolved as shift
WARNING: shift/reduce conflict for false in state 169 resolved as shift
WARNING: shift/reduce conflict for type_type in state 169 resolved as shift
WARNING: shift/reduce conflict for type_num in state 169 resolved as shift
WARNING: shift/reduce conflict for type_any in state 169 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 169 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 169 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 169 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 169 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 169 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 169 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 169 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 169 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 169 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 169 resolved as shift
WARNING: shift/reduce conflict for type_str in state 169 resolved as shift
WARNING: shift/reduce conflict for type_list in state 169 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 169 resolved as shift
WARNING: shift/reduce conflict for type_array in state 169 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 169 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 169 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 169 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 169 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 169 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 169 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 169 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 169 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 169 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 169 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 169 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 169 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 169 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 169 resolved as shift
WARNING: shift/reduce conflict for type_set in state 169 resolved as shift
WARNING: shift/reduce conflict for type_map in state 169 resolved as shift
WARNING: shift/reduce conflict for type_range in state 169 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 169 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 169 resolved as shift
WARNING: shift/reduce conflict for lambda in state 169 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 170 resolved as shift
WARNING: shift/reduce conflict for VAR in state 170 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 170 resolved as shift
WARNING: shift/reduce conflict for NUM in state 170 resolved as shift
WARNING: shift/reduce conflict for NULL in state 170 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 170 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 170 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 170 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 170 resolved as shift
WARNING: shift/reduce conflict for true in state 170 resolved as shift
WARNING: shift/reduce conflict for false in state 170 resolved as shift
WARNING: shift/reduce conflict for type_type in state 170 resolved as shift
WARNING: shift/reduce conflict for type_num in state 170 resolved as shift
WARNING: shift/reduce conflict for type_any in state 170 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 170 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 170 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 170 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 170 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 170 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 170 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 170 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 170 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 170 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 170 resolved as shift
WARNING: shift/reduce conflict for type_str in state 170 resolved as shift
WARNING: shift/reduce conflict for type_list in state 170 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 170 resolved as shift
WARNING: shift/reduce conflict for type_array in state 170 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 170 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 170 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 170 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 170 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 170 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 170 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 170 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 170 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 170 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 170 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 170 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 170 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 170 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 170 resolved as shift
WARNING: shift/reduce conflict for type_set in state 170 resolved as shift
WARNING: shift/reduce conflict for type_map in state 170 resolved as shift
WARNING: shift/reduce conflict for type_range in state 170 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 170 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 170 resolved as shift
WARNING: shift/reduce conflict for lambda in state 170 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 173 resolved as shift
WARNING: shift/reduce conflict for VAR in state 173 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 173 resolved as shift
WARNING: shift/reduce conflict for NUM in state 173 resolved as shift
WARNING: shift/reduce conflict for NULL in state 173 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 173 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 173 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 173 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 173 resolved as shift
WARNING: shift/reduce conflict for true in state 173 resolved as shift
WARNING: shift/reduce conflict for false in state 173 resolved as shift
WARNING: shift/reduce conflict for type_type in state 173 resolved as shift
WARNING: shift/reduce conflict for type_num in state 173 resolved as shift
WARNING: shift/reduce conflict for type_any in state 173 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 173 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 173 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 173 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 173 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 173 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 173 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 173 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 173 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 173 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 173 resolved as shift
WARNING: shift/reduce conflict for type_str in state 173 resolved as shift
WARNING: shift/reduce conflict for type_list in state 173 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 173 resolved as shift
WARNING: shift/reduce conflict for type_array in state 173 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 173 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 173 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 173 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 173 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 173 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 173 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 173 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 173 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 173 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 173 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 173 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 173 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 173 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 173 resolved as shift
WARNING: shift/reduce conflict for type_set in state 173 resolved as shift
WARNING: shift/reduce conflict for type_map in state 173 resolved as shift
WARNING: shift/reduce conflict for type_range in state 173 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 173 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 173 resolved as shift
WARNING: shift/reduce conflict for lambda in state 173 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 176 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 176 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 176 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 176 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 176 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 176 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 176 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 176 resolved as shift
WARNING: shift/reduce conflict for VAR in state 176 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 176 resolved as shift
WARNING: shift/reduce conflict for NUM in state 176 resolved as shift
WARNING: shift/reduce conflict for NULL in state 176 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 176 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 176 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 176 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 176 resolved as shift
WARNING: shift/reduce conflict for true in state 176 resolved as shift
WARNING: shift/reduce conflict for false in state 176 resolved as shift
WARNING: shift/reduce conflict for type_type in state 176 resolved as shift
WARNING: shift/reduce conflict for type_num in state 176 resolved as shift
WARNING: shift/reduce conflict for type_any in state 176 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 176 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 176 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 176 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 176 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 176 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 176 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 176 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 176 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 176 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 176 resolved as shift
WARNING: shift/reduce conflict for type_str in state 176 resolved as shift
WARNING: shift/reduce conflict for type_list in state 176 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 176 resolved as shift
WARNING: shift/reduce conflict for type_array in state 176 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 176 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 176 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 176 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 176 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 176 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 176 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 176 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 176 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 176 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 176 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 176 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 176 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 176 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 176 resolved as shift
WARNING: shift/reduce conflict for type_set in state 176 resolved as shift
WARNING: shift/reduce conflict for type_map in state 176 resolved as shift
WARNING: shift/reduce conflict for type_range in state 176 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 176 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 176 resolved as shift
WARNING: shift/reduce conflict for lambda in state 176 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 177 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 177 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 177 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 177 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 177 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 177 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 177 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 177 resolved as shift
WARNING: shift/reduce conflict for VAR in state 177 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 177 resolved as shift
WARNING: shift/reduce conflict for NUM in state 177 resolved as shift
WARNING: shift/reduce conflict for NULL in state 177 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 177 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 177 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 177 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 177 resolved as shift
WARNING: shift/reduce conflict for true in state 177 resolved as shift
WARNING: shift/reduce conflict for false in state 177 resolved as shift
WARNING: shift/reduce conflict for type_type in state 177 resolved as shift
WARNING: shift/reduce conflict for type_num in state 177 resolved as shift
WARNING: shift/reduce conflict for type_any in state 177 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 177 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 177 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 177 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 177 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 177 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 177 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 177 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 177 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 177 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 177 resolved as shift
WARNING: shift/reduce conflict for type_str in state 177 resolved as shift
WARNING: shift/reduce conflict for type_list in state 177 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 177 resolved as shift
WARNING: shift/reduce conflict for type_array in state 177 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 177 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 177 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 177 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 177 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 177 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 177 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 177 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 177 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 177 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 177 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 177 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 177 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 177 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 177 resolved as shift
WARNING: shift/reduce conflict for type_set in state 177 resolved as shift
WARNING: shift/reduce conflict for type_map in state 177 resolved as shift
WARNING: shift/reduce conflict for type_range in state 177 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 177 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 177 resolved as shift
WARNING: shift/reduce conflict for lambda in state 177 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 262 resolved as shift
WARNING: shift/reduce conflict for VAR in state 262 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 262 resolved as shift
WARNING: shift/reduce conflict for NUM in state 262 resolved as shift
WARNING: shift/reduce conflict for NULL in state 262 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 262 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 262 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 262 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 262 resolved as shift
WARNING: shift/reduce conflict for true in state 262 resolved as shift
WARNING: shift/reduce conflict for false in state 262 resolved as shift
WARNING: shift/reduce conflict for type_type in state 262 resolved as shift
WARNING: shift/reduce conflict for type_num in state 262 resolved as shift
WARNING: shift/reduce conflict for type_any in state 262 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 262 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 262 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 262 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 262 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 262 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 262 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 262 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 262 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 262 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 262 resolved as shift
WARNING: shift/reduce conflict for type_str in state 262 resolved as shift
WARNING: shift/reduce conflict for type_list in state 262 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 262 resolved as shift
WARNING: shift/reduce conflict for type_array in state 262 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 262 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 262 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 262 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 262 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 262 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 262 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 262 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 262 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 262 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 262 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 262 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 262 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 262 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 262 resolved as shift
WARNING: shift/reduce conflict for type_set in state 262 resolved as shift
WARNING: shift/reduce conflict for type_map in state 262 resolved as shift
WARNING: shift/reduce conflict for type_range in state 262 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 262 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 262 resolved as shift
WARNING: shift/reduce conflict for lambda in state 262 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 263 resolved as shift
WARNING: shift/reduce conflict for VAR in state 263 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 263 resolved as shift
WARNING: shift/reduce conflict for NUM in state 263 resolved as shift
WARNING: shift/reduce conflict for NULL in state 263 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 263 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 263 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 263 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 263 resolved as shift
WARNING: shift/reduce conflict for true in state 263 resolved as shift
WARNING: shift/reduce conflict for false in state 263 resolved as shift
WARNING: shift/reduce conflict for type_type in state 263 resolved as shift
WARNING: shift/reduce conflict for type_num in state 263 resolved as shift
WARNING: shift/reduce conflict for type_any in state 263 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 263 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 263 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 263 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 263 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 263 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 263 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 263 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 263 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 263 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 263 resolved as shift
WARNING: shift/reduce conflict for type_str in state 263 resolved as shift
WARNING: shift/reduce conflict for type_list in state 263 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 263 resolved as shift
WARNING: shift/reduce conflict for type_array in state 263 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 263 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 263 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 263 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 263 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 263 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 263 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 263 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 263 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 263 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 263 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 263 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 263 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 263 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 263 resolved as shift
WARNING: shift/reduce conflict for type_set in state 263 resolved as shift
WARNING: shift/reduce conflict for type_map in state 263 resolved as shift
WARNING: shift/reduce conflict for type_range in state 263 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 263 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 263 resolved as shift
WARNING: shift/reduce conflict for lambda in state 263 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 264 resolved as shift
WARNING: shift/reduce conflict for VAR in state 264 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 264 resolved as shift
WARNING: shift/reduce conflict for NUM in state 264 resolved as shift
WARNING: shift/reduce conflict for NULL in state 264 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 264 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 264 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 264 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 264 resolved as shift
WARNING: shift/reduce conflict for true in state 264 resolved as shift
WARNING: shift/reduce conflict for false in state 264 resolved as shift
WARNING: shift/reduce conflict for type_type in state 264 resolved as shift
WARNING: shift/reduce conflict for type_num in state 264 resolved as shift
WARNING: shift/reduce conflict for type_any in state 264 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 264 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 264 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 264 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 264 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 264 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 264 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 264 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 264 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 264 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 264 resolved as shift
WARNING: shift/reduce conflict for type_str in state 264 resolved as shift
WARNING: shift/reduce conflict for type_list in state 264 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 264 resolved as shift
WARNING: shift/reduce conflict for type_array in state 264 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 264 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 264 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 264 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 264 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 264 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 264 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 264 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 264 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 264 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 264 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 264 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 264 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 264 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 264 resolved as shift
WARNING: shift/reduce conflict for type_set in state 264 resolved as shift
WARNING: shift/reduce conflict for type_map in state 264 resolved as shift
WARNING: shift/reduce conflict for type_range in state 264 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 264 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 264 resolved as shift
WARNING: shift/reduce conflict for lambda in state 264 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 265 resolved as shift
WARNING: shift/reduce conflict for VAR in state 265 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 265 resolved as shift
WARNING: shift/reduce conflict for NUM in state 265 resolved as shift
WARNING: shift/reduce conflict for NULL in state 265 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 265 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 265 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 265 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 265 resolved as shift
WARNING: shift/reduce conflict for true in state 265 resolved as shift
WARNING: shift/reduce conflict for false in state 265 resolved as shift
WARNING: shift/reduce conflict for type_type in state 265 resolved as shift
WARNING: shift/reduce conflict for type_num in state 265 resolved as shift
WARNING: shift/reduce conflict for type_any in state 265 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 265 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 265 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 265 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 265 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 265 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 265 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 265 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 265 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 265 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 265 resolved as shift
WARNING: shift/reduce conflict for type_str in state 265 resolved as shift
WARNING: shift/reduce conflict for type_list in state 265 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 265 resolved as shift
WARNING: shift/reduce conflict for type_array in state 265 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 265 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 265 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 265 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 265 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 265 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 265 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 265 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 265 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 265 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 265 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 265 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 265 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 265 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 265 resolved as shift
WARNING: shift/reduce conflict for type_set in state 265 resolved as shift
WARNING: shift/reduce conflict for type_map in state 265 resolved as shift
WARNING: shift/reduce conflict for type_range in state 265 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 265 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 265 resolved as shift
WARNING: shift/reduce conflict for lambda in state 265 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 266 resolved as shift
WARNING: shift/reduce conflict for VAR in state 266 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 266 resolved as shift
WARNING: shift/reduce conflict for NUM in state 266 resolved as shift
WARNING: shift/reduce conflict for NULL in state 266 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 266 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 266 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 266 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 266 resolved as shift
WARNING: shift/reduce conflict for true in state 266 resolved as shift
WARNING: shift/reduce conflict for false in state 266 resolved as shift
WARNING: shift/reduce conflict for type_type in state 266 resolved as shift
WARNING: shift/reduce conflict for type_num in state 266 resolved as shift
WARNING: shift/reduce conflict for type_any in state 266 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 266 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 266 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 266 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 266 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 266 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 266 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 266 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 266 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 266 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 266 resolved as shift
WARNING: shift/reduce conflict for type_str in state 266 resolved as shift
WARNING: shift/reduce conflict for type_list in state 266 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 266 resolved as shift
WARNING: shift/reduce conflict for type_array in state 266 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 266 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 266 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 266 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 266 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 266 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 266 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 266 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 266 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 266 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 266 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 266 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 266 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 266 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 266 resolved as shift
WARNING: shift/reduce conflict for type_set in state 266 resolved as shift
WARNING: shift/reduce conflict for type_map in state 266 resolved as shift
WARNING: shift/reduce conflict for type_range in state 266 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 266 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 266 resolved as shift
WARNING: shift/reduce conflict for lambda in state 266 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 267 resolved as shift
WARNING: shift/reduce conflict for VAR in state 267 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 267 resolved as shift
WARNING: shift/reduce conflict for NUM in state 267 resolved as shift
WARNING: shift/reduce conflict for NULL in state 267 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 267 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 267 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 267 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 267 resolved as shift
WARNING: shift/reduce conflict for true in state 267 resolved as shift
WARNING: shift/reduce conflict for false in state 267 resolved as shift
WARNING: shift/reduce conflict for type_type in state 267 resolved as shift
WARNING: shift/reduce conflict for type_num in state 267 resolved as shift
WARNING: shift/reduce conflict for type_any in state 267 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 267 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 267 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 267 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 267 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 267 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 267 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 267 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 267 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 267 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 267 resolved as shift
WARNING: shift/reduce conflict for type_str in state 267 resolved as shift
WARNING: shift/reduce conflict for type_list in state 267 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 267 resolved as shift
WARNING: shift/reduce conflict for type_array in state 267 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 267 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 267 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 267 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 267 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 267 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 267 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 267 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 267 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 267 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 267 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 267 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 267 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 267 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 267 resolved as shift
WARNING: shift/reduce conflict for type_set in state 267 resolved as shift
WARNING: shift/reduce conflict for type_map in state 267 resolved as shift
WARNING: shift/reduce conflict for type_range in state 267 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 267 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 267 resolved as shift
WARNING: shift/reduce conflict for lambda in state 267 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 268 resolved as shift
WARNING: shift/reduce conflict for VAR in state 268 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 268 resolved as shift
WARNING: shift/reduce conflict for NUM in state 268 resolved as shift
WARNING: shift/reduce conflict for NULL in state 268 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 268 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 268 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 268 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 268 resolved as shift
WARNING: shift/reduce conflict for true in state 268 resolved as shift
WARNING: shift/reduce conflict for false in state 268 resolved as shift
WARNING: shift/reduce conflict for type_type in state 268 resolved as shift
WARNING: shift/reduce conflict for type_num in state 268 resolved as shift
WARNING: shift/reduce conflict for type_any in state 268 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 268 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 268 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 268 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 268 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 268 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 268 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 268 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 268 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 268 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 268 resolved as shift
WARNING: shift/reduce conflict for type_str in state 268 resolved as shift
WARNING: shift/reduce conflict for type_list in state 268 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 268 resolved as shift
WARNING: shift/reduce conflict for type_array in state 268 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 268 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 268 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 268 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 268 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 268 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 268 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 268 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 268 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 268 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 268 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 268 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 268 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 268 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 268 resolved as shift
WARNING: shift/reduce conflict for type_set in state 268 resolved as shift
WARNING: shift/reduce conflict for type_map in state 268 resolved as shift
WARNING: shift/reduce conflict for type_range in state 268 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 268 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 268 resolved as shift
WARNING: shift/reduce conflict for lambda in state 268 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 269 resolved as shift
WARNING: shift/reduce conflict for VAR in state 269 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 269 resolved as shift
WARNING: shift/reduce conflict for NUM in state 269 resolved as shift
WARNING: shift/reduce conflict for NULL in state 269 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 269 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 269 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 269 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 269 resolved as shift
WARNING: shift/reduce conflict for true in state 269 resolved as shift
WARNING: shift/reduce conflict for false in state 269 resolved as shift
WARNING: shift/reduce conflict for type_type in state 269 resolved as shift
WARNING: shift/reduce conflict for type_num in state 269 resolved as shift
WARNING: shift/reduce conflict for type_any in state 269 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 269 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 269 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 269 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 269 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 269 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 269 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 269 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 269 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 269 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 269 resolved as shift
WARNING: shift/reduce conflict for type_str in state 269 resolved as shift
WARNING: shift/reduce conflict for type_list in state 269 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 269 resolved as shift
WARNING: shift/reduce conflict for type_array in state 269 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 269 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 269 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 269 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 269 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 269 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 269 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 269 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 269 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 269 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 269 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 269 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 269 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 269 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 269 resolved as shift
WARNING: shift/reduce conflict for type_set in state 269 resolved as shift
WARNING: shift/reduce conflict for type_map in state 269 resolved as shift
WARNING: shift/reduce conflict for type_range in state 269 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 269 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 269 resolved as shift
WARNING: shift/reduce conflict for lambda in state 269 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 270 resolved as shift
WARNING: shift/reduce conflict for VAR in state 270 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 270 resolved as shift
WARNING: shift/reduce conflict for NUM in state 270 resolved as shift
WARNING: shift/reduce conflict for NULL in state 270 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 270 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 270 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 270 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 270 resolved as shift
WARNING: shift/reduce conflict for true in state 270 resolved as shift
WARNING: shift/reduce conflict for false in state 270 resolved as shift
WARNING: shift/reduce conflict for type_type in state 270 resolved as shift
WARNING: shift/reduce conflict for type_num in state 270 resolved as shift
WARNING: shift/reduce conflict for type_any in state 270 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 270 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 270 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 270 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 270 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 270 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 270 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 270 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 270 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 270 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 270 resolved as shift
WARNING: shift/reduce conflict for type_str in state 270 resolved as shift
WARNING: shift/reduce conflict for type_list in state 270 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 270 resolved as shift
WARNING: shift/reduce conflict for type_array in state 270 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 270 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 270 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 270 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 270 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 270 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 270 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 270 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 270 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 270 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 270 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 270 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 270 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 270 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 270 resolved as shift
WARNING: shift/reduce conflict for type_set in state 270 resolved as shift
WARNING: shift/reduce conflict for type_map in state 270 resolved as shift
WARNING: shift/reduce conflict for type_range in state 270 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 270 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 270 resolved as shift
WARNING: shift/reduce conflict for lambda in state 270 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 271 resolved as shift
WARNING: shift/reduce conflict for VAR in state 271 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 271 resolved as shift
WARNING: shift/reduce conflict for NUM in state 271 resolved as shift
WARNING: shift/reduce conflict for NULL in state 271 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 271 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 271 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 271 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 271 resolved as shift
WARNING: shift/reduce conflict for true in state 271 resolved as shift
WARNING: shift/reduce conflict for false in state 271 resolved as shift
WARNING: shift/reduce conflict for type_type in state 271 resolved as shift
WARNING: shift/reduce conflict for type_num in state 271 resolved as shift
WARNING: shift/reduce conflict for type_any in state 271 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 271 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 271 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 271 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 271 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 271 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 271 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 271 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 271 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 271 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 271 resolved as shift
WARNING: shift/reduce conflict for type_str in state 271 resolved as shift
WARNING: shift/reduce conflict for type_list in state 271 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 271 resolved as shift
WARNING: shift/reduce conflict for type_array in state 271 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 271 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 271 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 271 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 271 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 271 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 271 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 271 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 271 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 271 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 271 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 271 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 271 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 271 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 271 resolved as shift
WARNING: shift/reduce conflict for type_set in state 271 resolved as shift
WARNING: shift/reduce conflict for type_map in state 271 resolved as shift
WARNING: shift/reduce conflict for type_range in state 271 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 271 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 271 resolved as shift
WARNING: shift/reduce conflict for lambda in state 271 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 272 resolved as shift
WARNING: shift/reduce conflict for VAR in state 272 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 272 resolved as shift
WARNING: shift/reduce conflict for NUM in state 272 resolved as shift
WARNING: shift/reduce conflict for NULL in state 272 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 272 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 272 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 272 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 272 resolved as shift
WARNING: shift/reduce conflict for true in state 272 resolved as shift
WARNING: shift/reduce conflict for false in state 272 resolved as shift
WARNING: shift/reduce conflict for type_type in state 272 resolved as shift
WARNING: shift/reduce conflict for type_num in state 272 resolved as shift
WARNING: shift/reduce conflict for type_any in state 272 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 272 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 272 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 272 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 272 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 272 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 272 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 272 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 272 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 272 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 272 resolved as shift
WARNING: shift/reduce conflict for type_str in state 272 resolved as shift
WARNING: shift/reduce conflict for type_list in state 272 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 272 resolved as shift
WARNING: shift/reduce conflict for type_array in state 272 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 272 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 272 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 272 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 272 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 272 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 272 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 272 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 272 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 272 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 272 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 272 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 272 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 272 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 272 resolved as shift
WARNING: shift/reduce conflict for type_set in state 272 resolved as shift
WARNING: shift/reduce conflict for type_map in state 272 resolved as shift
WARNING: shift/reduce conflict for type_range in state 272 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 272 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 272 resolved as shift
WARNING: shift/reduce conflict for lambda in state 272 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 273 resolved as shift
WARNING: shift/reduce conflict for VAR in state 273 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 273 resolved as shift
WARNING: shift/reduce conflict for NUM in state 273 resolved as shift
WARNING: shift/reduce conflict for NULL in state 273 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 273 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 273 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 273 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 273 resolved as shift
WARNING: shift/reduce conflict for true in state 273 resolved as shift
WARNING: shift/reduce conflict for false in state 273 resolved as shift
WARNING: shift/reduce conflict for type_type in state 273 resolved as shift
WARNING: shift/reduce conflict for type_num in state 273 resolved as shift
WARNING: shift/reduce conflict for type_any in state 273 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 273 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 273 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 273 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 273 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 273 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 273 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 273 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 273 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 273 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 273 resolved as shift
WARNING: shift/reduce conflict for type_str in state 273 resolved as shift
WARNING: shift/reduce conflict for type_list in state 273 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 273 resolved as shift
WARNING: shift/reduce conflict for type_array in state 273 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 273 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 273 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 273 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 273 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 273 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 273 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 273 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 273 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 273 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 273 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 273 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 273 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 273 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 273 resolved as shift
WARNING: shift/reduce conflict for type_set in state 273 resolved as shift
WARNING: shift/reduce conflict for type_map in state 273 resolved as shift
WARNING: shift/reduce conflict for type_range in state 273 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 273 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 273 resolved as shift
WARNING: shift/reduce conflict for lambda in state 273 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 274 resolved as shift
WARNING: shift/reduce conflict for VAR in state 274 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 274 resolved as shift
WARNING: shift/reduce conflict for NUM in state 274 resolved as shift
WARNING: shift/reduce conflict for NULL in state 274 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 274 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 274 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 274 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 274 resolved as shift
WARNING: shift/reduce conflict for true in state 274 resolved as shift
WARNING: shift/reduce conflict for false in state 274 resolved as shift
WARNING: shift/reduce conflict for type_type in state 274 resolved as shift
WARNING: shift/reduce conflict for type_num in state 274 resolved as shift
WARNING: shift/reduce conflict for type_any in state 274 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 274 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 274 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 274 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 274 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 274 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 274 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 274 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 274 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 274 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 274 resolved as shift
WARNING: shift/reduce conflict for type_str in state 274 resolved as shift
WARNING: shift/reduce conflict for type_list in state 274 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 274 resolved as shift
WARNING: shift/reduce conflict for type_array in state 274 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 274 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 274 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 274 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 274 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 274 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 274 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 274 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 274 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 274 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 274 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 274 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 274 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 274 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 274 resolved as shift
WARNING: shift/reduce conflict for type_set in state 274 resolved as shift
WARNING: shift/reduce conflict for type_map in state 274 resolved as shift
WARNING: shift/reduce conflict for type_range in state 274 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 274 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 274 resolved as shift
WARNING: shift/reduce conflict for lambda in state 274 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 275 resolved as shift
WARNING: shift/reduce conflict for VAR in state 275 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 275 resolved as shift
WARNING: shift/reduce conflict for NUM in state 275 resolved as shift
WARNING: shift/reduce conflict for NULL in state 275 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 275 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 275 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 275 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 275 resolved as shift
WARNING: shift/reduce conflict for true in state 275 resolved as shift
WARNING: shift/reduce conflict for false in state 275 resolved as shift
WARNING: shift/reduce conflict for type_type in state 275 resolved as shift
WARNING: shift/reduce conflict for type_num in state 275 resolved as shift
WARNING: shift/reduce conflict for type_any in state 275 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 275 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 275 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 275 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 275 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 275 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 275 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 275 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 275 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 275 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 275 resolved as shift
WARNING: shift/reduce conflict for type_str in state 275 resolved as shift
WARNING: shift/reduce conflict for type_list in state 275 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 275 resolved as shift
WARNING: shift/reduce conflict for type_array in state 275 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 275 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 275 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 275 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 275 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 275 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 275 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 275 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 275 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 275 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 275 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 275 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 275 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 275 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 275 resolved as shift
WARNING: shift/reduce conflict for type_set in state 275 resolved as shift
WARNING: shift/reduce conflict for type_map in state 275 resolved as shift
WARNING: shift/reduce conflict for type_range in state 275 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 275 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 275 resolved as shift
WARNING: shift/reduce conflict for lambda in state 275 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 276 resolved as shift
WARNING: shift/reduce conflict for VAR in state 276 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 276 resolved as shift
WARNING: shift/reduce conflict for NUM in state 276 resolved as shift
WARNING: shift/reduce conflict for NULL in state 276 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 276 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 276 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 276 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 276 resolved as shift
WARNING: shift/reduce conflict for true in state 276 resolved as shift
WARNING: shift/reduce conflict for false in state 276 resolved as shift
WARNING: shift/reduce conflict for type_type in state 276 resolved as shift
WARNING: shift/reduce conflict for type_num in state 276 resolved as shift
WARNING: shift/reduce conflict for type_any in state 276 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 276 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 276 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 276 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 276 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 276 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 276 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 276 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 276 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 276 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 276 resolved as shift
WARNING: shift/reduce conflict for type_str in state 276 resolved as shift
WARNING: shift/reduce conflict for type_list in state 276 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 276 resolved as shift
WARNING: shift/reduce conflict for type_array in state 276 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 276 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 276 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 276 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 276 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 276 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 276 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 276 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 276 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 276 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 276 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 276 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 276 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 276 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 276 resolved as shift
WARNING: shift/reduce conflict for type_set in state 276 resolved as shift
WARNING: shift/reduce conflict for type_map in state 276 resolved as shift
WARNING: shift/reduce conflict for type_range in state 276 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 276 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 276 resolved as shift
WARNING: shift/reduce conflict for lambda in state 276 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 277 resolved as shift
WARNING: shift/reduce conflict for VAR in state 277 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 277 resolved as shift
WARNING: shift/reduce conflict for NUM in state 277 resolved as shift
WARNING: shift/reduce conflict for NULL in state 277 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 277 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 277 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 277 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 277 resolved as shift
WARNING: shift/reduce conflict for true in state 277 resolved as shift
WARNING: shift/reduce conflict for false in state 277 resolved as shift
WARNING: shift/reduce conflict for type_type in state 277 resolved as shift
WARNING: shift/reduce conflict for type_num in state 277 resolved as shift
WARNING: shift/reduce conflict for type_any in state 277 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 277 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 277 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 277 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 277 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 277 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 277 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 277 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 277 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 277 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 277 resolved as shift
WARNING: shift/reduce conflict for type_str in state 277 resolved as shift
WARNING: shift/reduce conflict for type_list in state 277 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 277 resolved as shift
WARNING: shift/reduce conflict for type_array in state 277 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 277 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 277 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 277 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 277 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 277 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 277 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 277 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 277 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 277 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 277 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 277 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 277 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 277 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 277 resolved as shift
WARNING: shift/reduce conflict for type_set in state 277 resolved as shift
WARNING: shift/reduce conflict for type_map in state 277 resolved as shift
WARNING: shift/reduce conflict for type_range in state 277 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 277 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 277 resolved as shift
WARNING: shift/reduce conflict for lambda in state 277 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 278 resolved as shift
WARNING: shift/reduce conflict for VAR in state 278 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 278 resolved as shift
WARNING: shift/reduce conflict for NUM in state 278 resolved as shift
WARNING: shift/reduce conflict for NULL in state 278 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 278 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 278 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 278 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 278 resolved as shift
WARNING: shift/reduce conflict for true in state 278 resolved as shift
WARNING: shift/reduce conflict for false in state 278 resolved as shift
WARNING: shift/reduce conflict for type_type in state 278 resolved as shift
WARNING: shift/reduce conflict for type_num in state 278 resolved as shift
WARNING: shift/reduce conflict for type_any in state 278 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 278 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 278 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 278 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 278 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 278 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 278 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 278 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 278 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 278 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 278 resolved as shift
WARNING: shift/reduce conflict for type_str in state 278 resolved as shift
WARNING: shift/reduce conflict for type_list in state 278 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 278 resolved as shift
WARNING: shift/reduce conflict for type_array in state 278 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 278 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 278 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 278 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 278 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 278 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 278 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 278 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 278 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 278 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 278 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 278 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 278 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 278 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 278 resolved as shift
WARNING: shift/reduce conflict for type_set in state 278 resolved as shift
WARNING: shift/reduce conflict for type_map in state 278 resolved as shift
WARNING: shift/reduce conflict for type_range in state 278 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 278 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 278 resolved as shift
WARNING: shift/reduce conflict for lambda in state 278 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 279 resolved as shift
WARNING: shift/reduce conflict for VAR in state 279 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 279 resolved as shift
WARNING: shift/reduce conflict for NUM in state 279 resolved as shift
WARNING: shift/reduce conflict for NULL in state 279 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 279 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 279 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 279 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 279 resolved as shift
WARNING: shift/reduce conflict for true in state 279 resolved as shift
WARNING: shift/reduce conflict for false in state 279 resolved as shift
WARNING: shift/reduce conflict for type_type in state 279 resolved as shift
WARNING: shift/reduce conflict for type_num in state 279 resolved as shift
WARNING: shift/reduce conflict for type_any in state 279 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 279 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 279 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 279 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 279 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 279 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 279 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 279 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 279 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 279 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 279 resolved as shift
WARNING: shift/reduce conflict for type_str in state 279 resolved as shift
WARNING: shift/reduce conflict for type_list in state 279 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 279 resolved as shift
WARNING: shift/reduce conflict for type_array in state 279 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 279 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 279 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 279 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 279 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 279 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 279 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 279 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 279 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 279 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 279 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 279 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 279 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 279 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 279 resolved as shift
WARNING: shift/reduce conflict for type_set in state 279 resolved as shift
WARNING: shift/reduce conflict for type_map in state 279 resolved as shift
WARNING: shift/reduce conflict for type_range in state 279 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 279 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 279 resolved as shift
WARNING: shift/reduce conflict for lambda in state 279 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 280 resolved as shift
WARNING: shift/reduce conflict for VAR in state 280 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 280 resolved as shift
WARNING: shift/reduce conflict for NUM in state 280 resolved as shift
WARNING: shift/reduce conflict for NULL in state 280 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 280 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 280 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 280 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 280 resolved as shift
WARNING: shift/reduce conflict for true in state 280 resolved as shift
WARNING: shift/reduce conflict for false in state 280 resolved as shift
WARNING: shift/reduce conflict for type_type in state 280 resolved as shift
WARNING: shift/reduce conflict for type_num in state 280 resolved as shift
WARNING: shift/reduce conflict for type_any in state 280 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 280 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 280 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 280 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 280 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 280 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 280 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 280 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 280 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 280 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 280 resolved as shift
WARNING: shift/reduce conflict for type_str in state 280 resolved as shift
WARNING: shift/reduce conflict for type_list in state 280 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 280 resolved as shift
WARNING: shift/reduce conflict for type_array in state 280 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 280 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 280 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 280 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 280 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 280 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 280 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 280 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 280 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 280 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 280 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 280 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 280 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 280 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 280 resolved as shift
WARNING: shift/reduce conflict for type_set in state 280 resolved as shift
WARNING: shift/reduce conflict for type_map in state 280 resolved as shift
WARNING: shift/reduce conflict for type_range in state 280 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 280 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 280 resolved as shift
WARNING: shift/reduce conflict for lambda in state 280 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 282 resolved as shift
WARNING: shift/reduce conflict for VAR in state 282 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 282 resolved as shift
WARNING: shift/reduce conflict for NUM in state 282 resolved as shift
WARNING: shift/reduce conflict for NULL in state 282 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 282 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 282 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 282 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 282 resolved as shift
WARNING: shift/reduce conflict for true in state 282 resolved as shift
WARNING: shift/reduce conflict for false in state 282 resolved as shift
WARNING: shift/reduce conflict for type_type in state 282 resolved as shift
WARNING: shift/reduce conflict for type_num in state 282 resolved as shift
WARNING: shift/reduce conflict for type_any in state 282 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 282 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 282 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 282 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 282 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 282 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 282 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 282 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 282 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 282 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 282 resolved as shift
WARNING: shift/reduce conflict for type_str in state 282 resolved as shift
WARNING: shift/reduce conflict for type_list in state 282 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 282 resolved as shift
WARNING: shift/reduce conflict for type_array in state 282 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 282 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 282 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 282 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 282 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 282 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 282 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 282 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 282 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 282 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 282 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 282 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 282 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 282 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 282 resolved as shift
WARNING: shift/reduce conflict for type_set in state 282 resolved as shift
WARNING: shift/reduce conflict for type_map in state 282 resolved as shift
WARNING: shift/reduce conflict for type_range in state 282 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 282 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 282 resolved as shift
WARNING: shift/reduce conflict for lambda in state 282 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 283 resolved as shift
WARNING: shift/reduce conflict for VAR in state 283 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 283 resolved as shift
WARNING: shift/reduce conflict for NUM in state 283 resolved as shift
WARNING: shift/reduce conflict for NULL in state 283 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 283 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 283 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 283 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 283 resolved as shift
WARNING: shift/reduce conflict for true in state 283 resolved as shift
WARNING: shift/reduce conflict for false in state 283 resolved as shift
WARNING: shift/reduce conflict for type_type in state 283 resolved as shift
WARNING: shift/reduce conflict for type_num in state 283 resolved as shift
WARNING: shift/reduce conflict for type_any in state 283 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 283 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 283 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 283 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 283 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 283 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 283 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 283 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 283 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 283 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 283 resolved as shift
WARNING: shift/reduce conflict for type_str in state 283 resolved as shift
WARNING: shift/reduce conflict for type_list in state 283 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 283 resolved as shift
WARNING: shift/reduce conflict for type_array in state 283 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 283 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 283 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 283 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 283 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 283 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 283 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 283 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 283 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 283 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 283 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 283 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 283 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 283 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 283 resolved as shift
WARNING: shift/reduce conflict for type_set in state 283 resolved as shift
WARNING: shift/reduce conflict for type_map in state 283 resolved as shift
WARNING: shift/reduce conflict for type_range in state 283 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 283 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 283 resolved as shift
WARNING: shift/reduce conflict for lambda in state 283 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 284 resolved as shift
WARNING: shift/reduce conflict for VAR in state 284 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 284 resolved as shift
WARNING: shift/reduce conflict for NUM in state 284 resolved as shift
WARNING: shift/reduce conflict for NULL in state 284 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 284 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 284 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 284 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 284 resolved as shift
WARNING: shift/reduce conflict for true in state 284 resolved as shift
WARNING: shift/reduce conflict for false in state 284 resolved as shift
WARNING: shift/reduce conflict for type_type in state 284 resolved as shift
WARNING: shift/reduce conflict for type_num in state 284 resolved as shift
WARNING: shift/reduce conflict for type_any in state 284 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 284 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 284 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 284 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 284 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 284 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 284 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 284 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 284 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 284 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 284 resolved as shift
WARNING: shift/reduce conflict for type_str in state 284 resolved as shift
WARNING: shift/reduce conflict for type_list in state 284 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 284 resolved as shift
WARNING: shift/reduce conflict for type_array in state 284 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 284 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 284 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 284 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 284 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 284 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 284 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 284 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 284 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 284 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 284 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 284 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 284 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 284 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 284 resolved as shift
WARNING: shift/reduce conflict for type_set in state 284 resolved as shift
WARNING: shift/reduce conflict for type_map in state 284 resolved as shift
WARNING: shift/reduce conflict for type_range in state 284 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 284 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 284 resolved as shift
WARNING: shift/reduce conflict for lambda in state 284 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 285 resolved as shift
WARNING: shift/reduce conflict for VAR in state 285 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 285 resolved as shift
WARNING: shift/reduce conflict for NUM in state 285 resolved as shift
WARNING: shift/reduce conflict for NULL in state 285 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 285 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 285 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 285 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 285 resolved as shift
WARNING: shift/reduce conflict for true in state 285 resolved as shift
WARNING: shift/reduce conflict for false in state 285 resolved as shift
WARNING: shift/reduce conflict for type_type in state 285 resolved as shift
WARNING: shift/reduce conflict for type_num in state 285 resolved as shift
WARNING: shift/reduce conflict for type_any in state 285 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 285 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 285 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 285 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 285 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 285 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 285 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 285 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 285 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 285 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 285 resolved as shift
WARNING: shift/reduce conflict for type_str in state 285 resolved as shift
WARNING: shift/reduce conflict for type_list in state 285 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 285 resolved as shift
WARNING: shift/reduce conflict for type_array in state 285 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 285 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 285 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 285 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 285 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 285 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 285 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 285 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 285 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 285 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 285 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 285 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 285 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 285 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 285 resolved as shift
WARNING: shift/reduce conflict for type_set in state 285 resolved as shift
WARNING: shift/reduce conflict for type_map in state 285 resolved as shift
WARNING: shift/reduce conflict for type_range in state 285 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 285 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 285 resolved as shift
WARNING: shift/reduce conflict for lambda in state 285 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 286 resolved as shift
WARNING: shift/reduce conflict for VAR in state 286 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 286 resolved as shift
WARNING: shift/reduce conflict for NUM in state 286 resolved as shift
WARNING: shift/reduce conflict for NULL in state 286 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 286 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 286 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 286 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 286 resolved as shift
WARNING: shift/reduce conflict for true in state 286 resolved as shift
WARNING: shift/reduce conflict for false in state 286 resolved as shift
WARNING: shift/reduce conflict for type_type in state 286 resolved as shift
WARNING: shift/reduce conflict for type_num in state 286 resolved as shift
WARNING: shift/reduce conflict for type_any in state 286 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 286 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 286 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 286 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 286 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 286 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 286 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 286 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 286 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 286 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 286 resolved as shift
WARNING: shift/reduce conflict for type_str in state 286 resolved as shift
WARNING: shift/reduce conflict for type_list in state 286 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 286 resolved as shift
WARNING: shift/reduce conflict for type_array in state 286 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 286 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 286 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 286 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 286 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 286 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 286 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 286 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 286 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 286 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 286 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 286 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 286 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 286 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 286 resolved as shift
WARNING: shift/reduce conflict for type_set in state 286 resolved as shift
WARNING: shift/reduce conflict for type_map in state 286 resolved as shift
WARNING: shift/reduce conflict for type_range in state 286 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 286 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 286 resolved as shift
WARNING: shift/reduce conflict for lambda in state 286 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 287 resolved as shift
WARNING: shift/reduce conflict for VAR in state 287 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 287 resolved as shift
WARNING: shift/reduce conflict for NUM in state 287 resolved as shift
WARNING: shift/reduce conflict for NULL in state 287 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 287 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 287 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 287 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 287 resolved as shift
WARNING: shift/reduce conflict for true in state 287 resolved as shift
WARNING: shift/reduce conflict for false in state 287 resolved as shift
WARNING: shift/reduce conflict for type_type in state 287 resolved as shift
WARNING: shift/reduce conflict for type_num in state 287 resolved as shift
WARNING: shift/reduce conflict for type_any in state 287 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 287 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 287 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 287 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 287 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 287 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 287 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 287 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 287 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 287 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 287 resolved as shift
WARNING: shift/reduce conflict for type_str in state 287 resolved as shift
WARNING: shift/reduce conflict for type_list in state 287 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 287 resolved as shift
WARNING: shift/reduce conflict for type_array in state 287 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 287 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 287 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 287 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 287 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 287 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 287 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 287 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 287 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 287 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 287 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 287 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 287 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 287 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 287 resolved as shift
WARNING: shift/reduce conflict for type_set in state 287 resolved as shift
WARNING: shift/reduce conflict for type_map in state 287 resolved as shift
WARNING: shift/reduce conflict for type_range in state 287 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 287 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 287 resolved as shift
WARNING: shift/reduce conflict for lambda in state 287 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 288 resolved as shift
WARNING: shift/reduce conflict for VAR in state 288 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 288 resolved as shift
WARNING: shift/reduce conflict for NUM in state 288 resolved as shift
WARNING: shift/reduce conflict for NULL in state 288 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 288 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 288 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 288 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 288 resolved as shift
WARNING: shift/reduce conflict for true in state 288 resolved as shift
WARNING: shift/reduce conflict for false in state 288 resolved as shift
WARNING: shift/reduce conflict for type_type in state 288 resolved as shift
WARNING: shift/reduce conflict for type_num in state 288 resolved as shift
WARNING: shift/reduce conflict for type_any in state 288 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 288 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 288 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 288 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 288 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 288 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 288 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 288 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 288 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 288 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 288 resolved as shift
WARNING: shift/reduce conflict for type_str in state 288 resolved as shift
WARNING: shift/reduce conflict for type_list in state 288 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 288 resolved as shift
WARNING: shift/reduce conflict for type_array in state 288 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 288 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 288 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 288 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 288 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 288 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 288 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 288 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 288 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 288 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 288 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 288 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 288 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 288 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 288 resolved as shift
WARNING: shift/reduce conflict for type_set in state 288 resolved as shift
WARNING: shift/reduce conflict for type_map in state 288 resolved as shift
WARNING: shift/reduce conflict for type_range in state 288 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 288 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 288 resolved as shift
WARNING: shift/reduce conflict for lambda in state 288 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 289 resolved as shift
WARNING: shift/reduce conflict for VAR in state 289 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 289 resolved as shift
WARNING: shift/reduce conflict for NUM in state 289 resolved as shift
WARNING: shift/reduce conflict for NULL in state 289 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 289 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 289 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 289 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 289 resolved as shift
WARNING: shift/reduce conflict for true in state 289 resolved as shift
WARNING: shift/reduce conflict for false in state 289 resolved as shift
WARNING: shift/reduce conflict for type_type in state 289 resolved as shift
WARNING: shift/reduce conflict for type_num in state 289 resolved as shift
WARNING: shift/reduce conflict for type_any in state 289 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 289 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 289 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 289 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 289 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 289 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 289 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 289 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 289 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 289 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 289 resolved as shift
WARNING: shift/reduce conflict for type_str in state 289 resolved as shift
WARNING: shift/reduce conflict for type_list in state 289 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 289 resolved as shift
WARNING: shift/reduce conflict for type_array in state 289 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 289 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 289 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 289 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 289 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 289 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 289 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 289 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 289 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 289 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 289 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 289 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 289 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 289 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 289 resolved as shift
WARNING: shift/reduce conflict for type_set in state 289 resolved as shift
WARNING: shift/reduce conflict for type_map in state 289 resolved as shift
WARNING: shift/reduce conflict for type_range in state 289 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 289 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 289 resolved as shift
WARNING: shift/reduce conflict for lambda in state 289 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 290 resolved as shift
WARNING: shift/reduce conflict for VAR in state 290 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 290 resolved as shift
WARNING: shift/reduce conflict for NUM in state 290 resolved as shift
WARNING: shift/reduce conflict for NULL in state 290 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 290 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 290 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 290 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 290 resolved as shift
WARNING: shift/reduce conflict for true in state 290 resolved as shift
WARNING: shift/reduce conflict for false in state 290 resolved as shift
WARNING: shift/reduce conflict for type_type in state 290 resolved as shift
WARNING: shift/reduce conflict for type_num in state 290 resolved as shift
WARNING: shift/reduce conflict for type_any in state 290 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 290 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 290 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 290 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 290 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 290 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 290 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 290 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 290 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 290 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 290 resolved as shift
WARNING: shift/reduce conflict for type_str in state 290 resolved as shift
WARNING: shift/reduce conflict for type_list in state 290 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 290 resolved as shift
WARNING: shift/reduce conflict for type_array in state 290 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 290 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 290 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 290 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 290 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 290 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 290 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 290 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 290 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 290 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 290 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 290 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 290 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 290 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 290 resolved as shift
WARNING: shift/reduce conflict for type_set in state 290 resolved as shift
WARNING: shift/reduce conflict for type_map in state 290 resolved as shift
WARNING: shift/reduce conflict for type_range in state 290 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 290 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 290 resolved as shift
WARNING: shift/reduce conflict for lambda in state 290 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 291 resolved as shift
WARNING: shift/reduce conflict for VAR in state 291 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 291 resolved as shift
WARNING: shift/reduce conflict for NUM in state 291 resolved as shift
WARNING: shift/reduce conflict for NULL in state 291 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 291 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 291 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 291 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 291 resolved as shift
WARNING: shift/reduce conflict for true in state 291 resolved as shift
WARNING: shift/reduce conflict for false in state 291 resolved as shift
WARNING: shift/reduce conflict for type_type in state 291 resolved as shift
WARNING: shift/reduce conflict for type_num in state 291 resolved as shift
WARNING: shift/reduce conflict for type_any in state 291 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 291 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 291 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 291 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 291 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 291 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 291 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 291 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 291 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 291 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 291 resolved as shift
WARNING: shift/reduce conflict for type_str in state 291 resolved as shift
WARNING: shift/reduce conflict for type_list in state 291 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 291 resolved as shift
WARNING: shift/reduce conflict for type_array in state 291 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 291 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 291 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 291 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 291 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 291 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 291 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 291 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 291 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 291 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 291 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 291 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 291 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 291 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 291 resolved as shift
WARNING: shift/reduce conflict for type_set in state 291 resolved as shift
WARNING: shift/reduce conflict for type_map in state 291 resolved as shift
WARNING: shift/reduce conflict for type_range in state 291 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 291 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 291 resolved as shift
WARNING: shift/reduce conflict for lambda in state 291 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 292 resolved as shift
WARNING: shift/reduce conflict for VAR in state 292 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 292 resolved as shift
WARNING: shift/reduce conflict for NUM in state 292 resolved as shift
WARNING: shift/reduce conflict for NULL in state 292 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 292 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 292 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 292 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 292 resolved as shift
WARNING: shift/reduce conflict for true in state 292 resolved as shift
WARNING: shift/reduce conflict for false in state 292 resolved as shift
WARNING: shift/reduce conflict for type_type in state 292 resolved as shift
WARNING: shift/reduce conflict for type_num in state 292 resolved as shift
WARNING: shift/reduce conflict for type_any in state 292 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 292 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 292 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 292 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 292 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 292 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 292 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 292 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 292 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 292 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 292 resolved as shift
WARNING: shift/reduce conflict for type_str in state 292 resolved as shift
WARNING: shift/reduce conflict for type_list in state 292 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 292 resolved as shift
WARNING: shift/reduce conflict for type_array in state 292 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 292 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 292 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 292 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 292 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 292 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 292 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 292 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 292 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 292 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 292 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 292 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 292 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 292 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 292 resolved as shift
WARNING: shift/reduce conflict for type_set in state 292 resolved as shift
WARNING: shift/reduce conflict for type_map in state 292 resolved as shift
WARNING: shift/reduce conflict for type_range in state 292 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 292 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 292 resolved as shift
WARNING: shift/reduce conflict for lambda in state 292 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 293 resolved as shift
WARNING: shift/reduce conflict for VAR in state 293 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 293 resolved as shift
WARNING: shift/reduce conflict for NUM in state 293 resolved as shift
WARNING: shift/reduce conflict for NULL in state 293 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 293 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 293 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 293 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 293 resolved as shift
WARNING: shift/reduce conflict for true in state 293 resolved as shift
WARNING: shift/reduce conflict for false in state 293 resolved as shift
WARNING: shift/reduce conflict for type_type in state 293 resolved as shift
WARNING: shift/reduce conflict for type_num in state 293 resolved as shift
WARNING: shift/reduce conflict for type_any in state 293 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 293 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 293 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 293 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 293 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 293 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 293 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 293 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 293 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 293 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 293 resolved as shift
WARNING: shift/reduce conflict for type_str in state 293 resolved as shift
WARNING: shift/reduce conflict for type_list in state 293 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 293 resolved as shift
WARNING: shift/reduce conflict for type_array in state 293 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 293 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 293 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 293 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 293 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 293 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 293 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 293 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 293 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 293 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 293 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 293 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 293 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 293 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 293 resolved as shift
WARNING: shift/reduce conflict for type_set in state 293 resolved as shift
WARNING: shift/reduce conflict for type_map in state 293 resolved as shift
WARNING: shift/reduce conflict for type_range in state 293 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 293 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 293 resolved as shift
WARNING: shift/reduce conflict for lambda in state 293 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 294 resolved as shift
WARNING: shift/reduce conflict for VAR in state 294 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 294 resolved as shift
WARNING: shift/reduce conflict for NUM in state 294 resolved as shift
WARNING: shift/reduce conflict for NULL in state 294 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 294 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 294 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 294 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 294 resolved as shift
WARNING: shift/reduce conflict for true in state 294 resolved as shift
WARNING: shift/reduce conflict for false in state 294 resolved as shift
WARNING: shift/reduce conflict for type_type in state 294 resolved as shift
WARNING: shift/reduce conflict for type_num in state 294 resolved as shift
WARNING: shift/reduce conflict for type_any in state 294 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 294 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 294 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 294 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 294 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 294 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 294 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 294 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 294 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 294 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 294 resolved as shift
WARNING: shift/reduce conflict for type_str in state 294 resolved as shift
WARNING: shift/reduce conflict for type_list in state 294 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 294 resolved as shift
WARNING: shift/reduce conflict for type_array in state 294 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 294 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 294 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 294 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 294 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 294 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 294 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 294 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 294 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 294 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 294 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 294 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 294 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 294 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 294 resolved as shift
WARNING: shift/reduce conflict for type_set in state 294 resolved as shift
WARNING: shift/reduce conflict for type_map in state 294 resolved as shift
WARNING: shift/reduce conflict for type_range in state 294 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 294 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 294 resolved as shift
WARNING: shift/reduce conflict for lambda in state 294 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 295 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 295 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 295 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 295 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 295 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 295 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 295 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 295 resolved as shift
WARNING: shift/reduce conflict for VAR in state 295 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 295 resolved as shift
WARNING: shift/reduce conflict for NUM in state 295 resolved as shift
WARNING: shift/reduce conflict for NULL in state 295 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 295 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 295 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 295 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 295 resolved as shift
WARNING: shift/reduce conflict for true in state 295 resolved as shift
WARNING: shift/reduce conflict for false in state 295 resolved as shift
WARNING: shift/reduce conflict for type_type in state 295 resolved as shift
WARNING: shift/reduce conflict for type_num in state 295 resolved as shift
WARNING: shift/reduce conflict for type_any in state 295 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 295 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 295 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 295 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 295 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 295 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 295 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 295 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 295 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 295 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 295 resolved as shift
WARNING: shift/reduce conflict for type_str in state 295 resolved as shift
WARNING: shift/reduce conflict for type_list in state 295 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 295 resolved as shift
WARNING: shift/reduce conflict for type_array in state 295 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 295 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 295 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 295 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 295 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 295 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 295 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 295 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 295 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 295 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 295 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 295 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 295 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 295 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 295 resolved as shift
WARNING: shift/reduce conflict for type_set in state 295 resolved as shift
WARNING: shift/reduce conflict for type_map in state 295 resolved as shift
WARNING: shift/reduce conflict for type_range in state 295 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 295 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 295 resolved as shift
WARNING: shift/reduce conflict for lambda in state 295 resolved as shift
WARNING: shift/reduce conflict for operator_inner in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 380 resolved as shift
WARNING: shift/reduce conflict for VAR in state 380 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 380 resolved as shift
WARNING: shift/reduce conflict for NUM in state 380 resolved as shift
WARNING: shift/reduce conflict for NULL in state 380 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 380 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 380 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 380 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 380 resolved as shift
WARNING: shift/reduce conflict for true in state 380 resolved as shift
WARNING: shift/reduce conflict for false in state 380 resolved as shift
WARNING: shift/reduce conflict for type_type in state 380 resolved as shift
WARNING: shift/reduce conflict for type_num in state 380 resolved as shift
WARNING: shift/reduce conflict for type_any in state 380 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 380 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 380 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 380 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 380 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 380 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 380 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 380 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 380 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 380 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 380 resolved as shift
WARNING: shift/reduce conflict for type_str in state 380 resolved as shift
WARNING: shift/reduce conflict for type_list in state 380 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 380 resolved as shift
WARNING: shift/reduce conflict for type_array in state 380 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 380 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 380 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 380 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 380 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 380 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 380 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 380 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 380 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 380 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 380 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 380 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 380 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 380 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 380 resolved as shift
WARNING: shift/reduce conflict for type_set in state 380 resolved as shift
WARNING: shift/reduce conflict for type_map in state 380 resolved as shift
WARNING: shift/reduce conflict for type_range in state 380 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 380 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 380 resolved as shift
WARNING: shift/reduce conflict for lambda in state 380 resolved as shift
WARNING: shift/reduce conflict for operator_inner in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 381 resolved as shift
WARNING: shift/reduce conflict for VAR in state 381 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 381 resolved as shift
WARNING: shift/reduce conflict for NUM in state 381 resolved as shift
WARNING: shift/reduce conflict for NULL in state 381 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 381 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 381 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 381 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 381 resolved as shift
WARNING: shift/reduce conflict for true in state 381 resolved as shift
WARNING: shift/reduce conflict for false in state 381 resolved as shift
WARNING: shift/reduce conflict for type_type in state 381 resolved as shift
WARNING: shift/reduce conflict for type_num in state 381 resolved as shift
WARNING: shift/reduce conflict for type_any in state 381 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 381 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 381 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 381 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 381 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 381 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 381 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 381 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 381 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 381 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 381 resolved as shift
WARNING: shift/reduce conflict for type_str in state 381 resolved as shift
WARNING: shift/reduce conflict for type_list in state 381 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 381 resolved as shift
WARNING: shift/reduce conflict for type_array in state 381 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 381 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 381 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 381 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 381 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 381 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 381 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 381 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 381 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 381 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 381 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 381 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 381 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 381 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 381 resolved as shift
WARNING: shift/reduce conflict for type_set in state 381 resolved as shift
WARNING: shift/reduce conflict for type_map in state 381 resolved as shift
WARNING: shift/reduce conflict for type_range in state 381 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 381 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 381 resolved as shift
WARNING: shift/reduce conflict for lambda in state 381 resolved as shift
WARNING: shift/reduce conflict for operator_inner in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 382 resolved as shift
WARNING: shift/reduce conflict for VAR in state 382 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 382 resolved as shift
WARNING: shift/reduce conflict for NUM in state 382 resolved as shift
WARNING: shift/reduce conflict for NULL in state 382 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 382 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 382 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 382 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 382 resolved as shift
WARNING: shift/reduce conflict for true in state 382 resolved as shift
WARNING: shift/reduce conflict for false in state 382 resolved as shift
WARNING: shift/reduce conflict for type_type in state 382 resolved as shift
WARNING: shift/reduce conflict for type_num in state 382 resolved as shift
WARNING: shift/reduce conflict for type_any in state 382 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 382 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 382 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 382 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 382 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 382 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 382 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 382 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 382 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 382 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 382 resolved as shift
WARNING: shift/reduce conflict for type_str in state 382 resolved as shift
WARNING: shift/reduce conflict for type_list in state 382 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 382 resolved as shift
WARNING: shift/reduce conflict for type_array in state 382 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 382 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 382 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 382 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 382 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 382 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 382 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 382 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 382 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 382 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 382 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 382 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 382 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 382 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 382 resolved as shift
WARNING: shift/reduce conflict for type_set in state 382 resolved as shift
WARNING: shift/reduce conflict for type_map in state 382 resolved as shift
WARNING: shift/reduce conflict for type_range in state 382 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 382 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 382 resolved as shift
WARNING: shift/reduce conflict for lambda in state 382 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 425 resolved as shift
WARNING: shift/reduce conflict for VAR in state 425 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 425 resolved as shift
WARNING: shift/reduce conflict for NUM in state 425 resolved as shift
WARNING: shift/reduce conflict for NULL in state 425 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 425 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 425 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 425 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 425 resolved as shift
WARNING: shift/reduce conflict for true in state 425 resolved as shift
WARNING: shift/reduce conflict for false in state 425 resolved as shift
WARNING: shift/reduce conflict for type_type in state 425 resolved as shift
WARNING: shift/reduce conflict for type_num in state 425 resolved as shift
WARNING: shift/reduce conflict for type_any in state 425 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 425 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 425 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 425 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 425 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 425 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 425 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 425 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 425 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 425 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 425 resolved as shift
WARNING: shift/reduce conflict for type_str in state 425 resolved as shift
WARNING: shift/reduce conflict for type_list in state 425 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 425 resolved as shift
WARNING: shift/reduce conflict for type_array in state 425 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 425 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 425 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 425 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 425 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 425 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 425 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 425 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 425 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 425 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 425 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 425 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 425 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 425 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 425 resolved as shift
WARNING: shift/reduce conflict for type_set in state 425 resolved as shift
WARNING: shift/reduce conflict for type_map in state 425 resolved as shift
WARNING: shift/reduce conflict for type_range in state 425 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 425 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 425 resolved as shift
WARNING: shift/reduce conflict for lambda in state 425 resolved as shift
WARNING: shift/reduce conflict for operator_inner in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 426 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 426 resolved as shift
WARNING: shift/reduce conflict for VAR in state 426 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 426 resolved as shift
WARNING: shift/reduce conflict for NUM in state 426 resolved as shift
WARNING: shift/reduce conflict for NULL in state 426 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 426 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 426 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 426 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 426 resolved as shift
WARNING: shift/reduce conflict for true in state 426 resolved as shift
WARNING: shift/reduce conflict for false in state 426 resolved as shift
WARNING: shift/reduce conflict for type_type in state 426 resolved as shift
WARNING: shift/reduce conflict for type_num in state 426 resolved as shift
WARNING: shift/reduce conflict for type_any in state 426 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 426 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 426 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 426 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 426 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 426 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 426 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 426 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 426 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 426 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 426 resolved as shift
WARNING: shift/reduce conflict for type_str in state 426 resolved as shift
WARNING: shift/reduce conflict for type_list in state 426 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 426 resolved as shift
WARNING: shift/reduce conflict for type_array in state 426 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 426 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 426 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 426 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 426 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 426 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 426 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 426 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 426 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 426 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 426 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 426 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 426 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 426 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 426 resolved as shift
WARNING: shift/reduce conflict for type_set in state 426 resolved as shift
WARNING: shift/reduce conflict for type_map in state 426 resolved as shift
WARNING: shift/reduce conflict for type_range in state 426 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 426 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 426 resolved as shift
WARNING: shift/reduce conflict for lambda in state 426 resolved as shift
WARNING: shift/reduce conflict for , in state 427 resolved as shift


# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "FLOAT NUM STRING_3DQ STRING_3SQ STRING_DQ STRING_SQ VAR break continue del elif else false for func if lambda operator operator_add operator_and operator_apply operator_bitand operator_bitnot operator_bitor operator_bitshiftleft operator_bitshiftright operator_bitxor operator_compose operator_contains operator_decr operator_div operator_equals operator_goodname operator_goodname2 operator_greater_than operator_greater_than_equals operator_greatest operator_incr operator_inner operator_join operator_less_than operator_less_than_equals operator_map operator_mul operator_not operator_not_equals operator_or operator_outer operator_over operator_pow operator_reduc operator_reverse operator_rotate operator_s_combinator operator_scan operator_smallest operator_sorted_decr operator_sorted_incr operator_split operator_sub operator_trudiv operator_xor pass return struct true type_any type_array type_bad_struct type_binary_search_tree type_bitset type_deque type_dict type_doubly_linked_list type_f32 type_f64 type_fibonacci_heap type_generator type_heap type_i16 type_i32 type_i64 type_i8 type_linked_list type_list type_map type_num type_queue type_range type_set type_stack type_str type_tree type_trie type_tuple type_type type_u16 type_u32 type_u64 type_u8 type_vector while\n    expr : expr operator_add expr\n    \n    expr : expr operator_sub expr\n    \n    expr : expr operator_mul expr\n    \n    expr : expr operator_div expr\n    \n    expr : expr operator_trudiv expr\n    \n    expr : expr operator_pow expr\n    \n    expr : expr operator_join expr\n    \n    expr : expr operator_split expr\n    \n    expr : expr operator_scan expr\n    \n    expr : expr operator_reduc expr\n    \n    expr : expr operator_bitand expr\n    \n    expr : expr operator_bitor expr\n    \n    expr : expr operator_bitxor expr\n    \n    expr : expr operator_bitshiftleft expr\n    \n    expr : expr operator_bitshiftright expr\n    \n    expr : expr operator_and expr\n    \n    expr : expr operator_or expr\n    \n    expr : expr operator_xor expr\n    \n    expr : expr operator_contains expr\n    \n    expr : operator_bitnot expr\n    \n    expr : operator_not expr\n    \n    expr : expr operator_incr\n    \n    expr : expr operator_decr\n    \n    expr : expr operator_outer expr expr\n    \n    expr : expr expr operator_inner expr expr\n    \n    expr : operator_reverse expr\n    \n    expr : expr operator_rotate expr\n    \n    expr : expr operator_apply expr\n    \n    expr : expr operator_compose expr\n    \n    expr : expr operator_over expr\n    \n    expr : expr operator_map\n    \n    expr : operator_sorted_incr expr\n    \n    expr : operator_sorted_decr expr\n    \n    expr : expr operator_less_than expr\n    \n    expr : expr operator_less_than_equals expr\n    \n    expr : expr operator_greater_than expr\n    \n    expr : expr operator_greater_than_equals expr\n    \n    expr : expr operator_equals expr\n    \n    expr : expr operator_not_equals expr\n    \n    expr : expr operator_smallest expr\n    \n    expr : expr operator_greatest expr\n    \n    expr : expr operator_goodname expr\n    \n    expr : operator_s_combinator expr expr expr\n    \n    expr : operator_goodname2 expr\n    \n    expr : const_val \n         | VAR\n    \n    arguments : expr\n    \n    arguments : arguments ',' arguments\n    \n    const_val : NUM\n              | FLOAT\n              | STRING_3SQ\n              | STRING_3DQ\n              | STRING_SQ\n              | STRING_DQ\n    \n    return_val : type_type '(' arguments ')'\n               | type_num '(' arguments ')'\n               | type_any '(' arguments ')'\n               | type_u64 '(' arguments ')'\n               | type_u32 '(' arguments ')'\n               | type_u16 '(' arguments ')'\n               | type_u8 '(' arguments ')'\n               | type_i64 '(' arguments ')'\n               | type_i32 '(' arguments ')'\n               | type_i16 '(' arguments ')'\n               | type_i8 '(' arguments ')'\n               | type_f32 '(' arguments ')'\n               | type_f64 '(' arguments ')'\n               | type_str '(' arguments ')'\n               | type_list '(' arguments ')'\n               | type_tuple '(' arguments ')'\n               | type_array '(' arguments ')'\n               | type_vector '(' arguments ')'\n               | type_dict '(' arguments ')'\n               | type_generator '(' arguments ')'\n               | type_linked_list '(' arguments ')'\n               | type_doubly_linked_list '(' arguments ')'\n               | type_deque '(' arguments ')'\n               | type_heap '(' arguments ')'\n               | type_fibonacci_heap '(' arguments ')'\n               | type_tree '(' arguments ')'\n               | type_trie '(' arguments ')'\n               | type_stack '(' arguments ')'\n               | type_queue '(' arguments ')'\n               | type_binary_search_tree '(' arguments ')'\n               | type_bitset '(' arguments ')'\n               | type_set '(' arguments ')'\n               | type_map '(' arguments ')'\n               | type_range '(' arguments ')'\n    "
    
_lr_action_items = {'operator_bitnot':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[2,2,2,2,2,2,2,2,2,-45,-46,-49,-50,-51,-52,-53,-54,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,-22,-23,2,2,2,2,2,-31,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'operator_not':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[3,3,3,3,3,3,3,3,3,-45,-46,-49,-50,-51,-52,-53,-54,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,-22,-23,3,3,3,3,3,-31,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'operator_reverse':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[4,4,4,4,4,4,4,4,4,-45,-46,-49,-50,-51,-52,-53,-54,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,-22,-23,4,4,4,4,4,-31,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'operator_sorted_incr':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[5,5,5,5,5,5,5,5,5,-45,-46,-49,-50,-51,-52,-53,-54,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,-22,-23,5,5,5,5,5,-31,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'operator_sorted_decr':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[6,6,6,6,6,6,6,6,6,-45,-46,-49,-50,-51,-52,-53,-54,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-22,-23,6,6,6,6,6,-31,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'operator_s_combinator':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[7,7,7,7,7,7,7,7,7,-45,-46,-49,-50,-51,-52,-53,-54,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-22,-23,7,7,7,7,7,-31,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'operator_goodname2':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[8,8,8,8,8,8,8,8,8,-45,-46,-49,-50,-51,-52,-53,-54,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-22,-23,8,8,8,8,8,-31,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'VAR':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[10,10,10,10,10,10,10,10,10,-45,-46,-49,-50,-51,-52,-53,-54,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-22,-23,10,10,10,10,10,-31,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'NUM':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[11,11,11,11,11,11,11,11,11,-45,-46,-49,-50,-51,-52,-53,-54,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-22,-23,11,11,11,11,11,-31,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'FLOAT':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[12,12,12,12,12,12,12,12,12,-45,-46,-49,-50,-51,-52,-53,-54,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-22,-23,12,12,12,12,12,-31,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'STRING_3SQ':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[13,13,13,13,13,13,13,13,13,-45,-46,-49,-50,-51,-52,-53,-54,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-22,-23,13,13,13,13,13,-31,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'STRING_3DQ':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[14,14,14,14,14,14,14,14,14,-45,-46,-49,-50,-51,-52,-53,-54,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-22,-23,14,14,14,14,14,-31,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'STRING_SQ':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[15,15,15,15,15,15,15,15,15,-45,-46,-49,-50,-51,-52,-53,-54,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-22,-23,15,15,15,15,15,-31,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'STRING_DQ':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[16,16,16,16,16,16,16,16,16,-45,-46,-49,-50,-51,-52,-53,-54,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-22,-23,16,16,16,16,16,-31,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'$end':([1,9,10,11,12,13,14,15,16,37,38,44,54,55,56,57,58,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,90,91,92,93,94,97,98,99,],[0,-45,-46,-49,-50,-51,-52,-53,-54,-22,-23,-31,-20,-21,-26,-32,-33,-44,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-27,-28,-29,-30,-34,-35,-36,-37,-38,-39,-40,-41,-42,-24,-43,-25,]),'operator_add':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[18,-45,-46,-49,-50,-51,-52,-53,-54,18,-22,-23,-31,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'operator_sub':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[19,-45,-46,-49,-50,-51,-52,-53,-54,19,-22,-23,-31,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'operator_mul':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[20,-45,-46,-49,-50,-51,-52,-53,-54,20,-22,-23,-31,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'operator_div':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[21,-45,-46,-49,-50,-51,-52,-53,-54,21,-22,-23,-31,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'operator_trudiv':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[22,-45,-46,-49,-50,-51,-52,-53,-54,22,-22,-23,-31,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'operator_pow':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[23,-45,-46,-49,-50,-51,-52,-53,-54,23,-22,-23,-31,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'operator_join':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[24,-45,-46,-49,-50,-51,-52,-53,-54,24,-22,-23,-31,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'operator_split':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[25,-45,-46,-49,-50,-51,-52,-53,-54,25,-22,-23,-31,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'operator_scan':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[26,-45,-46,-49,-50,-51,-52,-53,-54,26,-22,-23,-31,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'operator_reduc':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[27,-45,-46,-49,-50,-51,-52,-53,-54,27,-22,-23,-31,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'operator_bitand':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[28,-45,-46,-49,-50,-51,-52,-53,-54,28,-22,-23,-31,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'operator_bitor':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[29,-45,-46,-49,-50,-51,-52,-53,-54,29,-22,-23,-31,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'operator_bitxor':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[30,-45,-46,-49,-50,-51,-52,-53,-54,30,-22,-23,-31,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'operator_bitshiftleft':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[31,-45,-46,-49,-50,-51,-52,-53,-54,31,-22,-23,-31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'operator_bitshiftright':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[32,-45,-46,-49,-50,-51,-52,-53,-54,32,-22,-23,-31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'operator_and':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[33,-45,-46,-49,-50,-51,-52,-53,-54,33,-22,-23,-31,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'operator_or':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[34,-45,-46,-49,-50,-51,-52,-53,-54,34,-22,-23,-31,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'operator_xor':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[35,-45,-46,-49,-50,-51,-52,-53,-54,35,-22,-23,-31,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'operator_contains':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[36,-45,-46,-49,-50,-51,-52,-53,-54,36,-22,-23,-31,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'operator_incr':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[37,-45,-46,-49,-50,-51,-52,-53,-54,37,-22,-23,-31,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'operator_decr':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[38,-45,-46,-49,-50,-51,-52,-53,-54,38,-22,-23,-31,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'operator_outer':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[39,-45,-46,-49,-50,-51,-52,-53,-54,39,-22,-23,-31,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'operator_rotate':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[40,-45,-46,-49,-50,-51,-52,-53,-54,40,-22,-23,-31,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'operator_apply':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[41,-45,-46,-49,-50,-51,-52,-53,-54,41,-22,-23,-31,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'operator_compose':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[42,-45,-46,-49,-50,-51,-52,-53,-54,42,-22,-23,-31,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'operator_over':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[43,-45,-46,-49,-50,-51,-52,-53,-54,43,-22,-23,-31,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'operator_map':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[44,-45,-46,-49,-50,-51,-52,-53,-54,44,-22,-23,-31,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'operator_less_than':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[45,-45,-46,-49,-50,-51,-52,-53,-54,45,-22,-23,-31,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'operator_less_than_equals':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[46,-45,-46,-49,-50,-51,-52,-53,-54,46,-22,-23,-31,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'operator_greater_than':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[47,-45,-46,-49,-50,-51,-52,-53,-54,47,-22,-23,-31,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'operator_greater_than_equals':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[48,-45,-46,-49,-50,-51,-52,-53,-54,48,-22,-23,-31,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'operator_equals':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[49,-45,-46,-49,-50,-51,-52,-53,-54,49,-22,-23,-31,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'operator_not_equals':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[50,-45,-46,-49,-50,-51,-52,-53,-54,50,-22,-23,-31,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'operator_smallest':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[51,-45,-46,-49,-50,-51,-52,-53,-54,51,-22,-23,-31,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'operator_greatest':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[52,-45,-46,-49,-50,-51,-52,-53,-54,52,-22,-23,-31,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'operator_goodname':([1,9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[53,-45,-46,-49,-50,-51,-52,-53,-54,53,-22,-23,-31,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'operator_inner':([9,10,11,12,13,14,15,16,17,37,38,44,54,55,56,57,58,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,98,99,],[-45,-46,-49,-50,-51,-52,-53,-54,61,-22,-23,-31,-20,-21,-26,-32,-33,-44,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-27,-28,-29,-30,-34,-35,-36,-37,-38,-39,-40,-41,-42,61,61,61,61,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expr':([0,1,2,3,4,5,6,7,8,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[1,17,54,55,56,57,58,59,60,17,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,17,17,17,17,17,95,17,96,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,97,17,17,17,17,17,17,17,17,17,17,17,17,17,98,99,17,17,17,]),'const_val':([0,1,2,3,4,5,6,7,8,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expr","S'",1,None,None,None),
  ('expr -> expr operator_add expr','expr',3,'p_operator_add','compiler.py',165),
  ('expr -> expr operator_sub expr','expr',3,'p_operator_sub','compiler.py',172),
  ('expr -> expr operator_mul expr','expr',3,'p_operator_mul','compiler.py',179),
  ('expr -> expr operator_div expr','expr',3,'p_operator_div','compiler.py',186),
  ('expr -> expr operator_trudiv expr','expr',3,'p_operator_trudiv','compiler.py',193),
  ('expr -> expr operator_pow expr','expr',3,'p_operator_pow','compiler.py',200),
  ('expr -> expr operator_join expr','expr',3,'p_operator_join','compiler.py',207),
  ('expr -> expr operator_split expr','expr',3,'p_operator_split','compiler.py',214),
  ('expr -> expr operator_scan expr','expr',3,'p_operator_scan','compiler.py',221),
  ('expr -> expr operator_reduc expr','expr',3,'p_operator_reduc','compiler.py',228),
  ('expr -> expr operator_bitand expr','expr',3,'p_operator_bitand','compiler.py',235),
  ('expr -> expr operator_bitor expr','expr',3,'p_operator_bitor','compiler.py',242),
  ('expr -> expr operator_bitxor expr','expr',3,'p_operator_bitxor','compiler.py',249),
  ('expr -> expr operator_bitshiftleft expr','expr',3,'p_operator_bitshiftleft','compiler.py',256),
  ('expr -> expr operator_bitshiftright expr','expr',3,'p_operator_bitshiftright','compiler.py',263),
  ('expr -> expr operator_and expr','expr',3,'p_operator_and','compiler.py',270),
  ('expr -> expr operator_or expr','expr',3,'p_operator_or','compiler.py',277),
  ('expr -> expr operator_xor expr','expr',3,'p_operator_xor','compiler.py',284),
  ('expr -> expr operator_contains expr','expr',3,'p_operator_contains','compiler.py',291),
  ('expr -> operator_bitnot expr','expr',2,'p_operator_bitnot','compiler.py',298),
  ('expr -> operator_not expr','expr',2,'p_operator_not','compiler.py',305),
  ('expr -> expr operator_incr','expr',2,'p_operator_incr','compiler.py',312),
  ('expr -> expr operator_decr','expr',2,'p_operator_decr','compiler.py',319),
  ('expr -> expr operator_outer expr expr','expr',4,'p_operator_outer','compiler.py',326),
  ('expr -> expr expr operator_inner expr expr','expr',5,'p_operator_inner','compiler.py',333),
  ('expr -> operator_reverse expr','expr',2,'p_operator_reverse','compiler.py',340),
  ('expr -> expr operator_rotate expr','expr',3,'p_operator_rotate','compiler.py',347),
  ('expr -> expr operator_apply expr','expr',3,'p_operator_apply','compiler.py',354),
  ('expr -> expr operator_compose expr','expr',3,'p_operator_compose','compiler.py',361),
  ('expr -> expr operator_over expr','expr',3,'p_operator_over','compiler.py',368),
  ('expr -> expr operator_map','expr',2,'p_operator_map','compiler.py',375),
  ('expr -> operator_sorted_incr expr','expr',2,'p_operator_sorted_incr','compiler.py',382),
  ('expr -> operator_sorted_decr expr','expr',2,'p_operator_sorted_decr','compiler.py',389),
  ('expr -> expr operator_less_than expr','expr',3,'p_operator_less_than','compiler.py',396),
  ('expr -> expr operator_less_than_equals expr','expr',3,'p_operator_less_than_equals','compiler.py',403),
  ('expr -> expr operator_greater_than expr','expr',3,'p_operator_greater_than','compiler.py',410),
  ('expr -> expr operator_greater_than_equals expr','expr',3,'p_operator_greater_than_equals','compiler.py',417),
  ('expr -> expr operator_equals expr','expr',3,'p_operator_equals','compiler.py',424),
  ('expr -> expr operator_not_equals expr','expr',3,'p_operator_not_equals','compiler.py',431),
  ('expr -> expr operator_smallest expr','expr',3,'p_operator_smallest','compiler.py',438),
  ('expr -> expr operator_greatest expr','expr',3,'p_operator_greatest','compiler.py',445),
  ('expr -> expr operator_goodname expr','expr',3,'p_operator_goodname','compiler.py',452),
  ('expr -> operator_s_combinator expr expr expr','expr',4,'p_operator_s_combinator','compiler.py',459),
  ('expr -> operator_goodname2 expr','expr',2,'p_operator_goodname2','compiler.py',466),
  ('expr -> const_val','expr',1,'p_expr','compiler.py',474),
  ('expr -> VAR','expr',1,'p_expr','compiler.py',475),
  ('arguments -> expr','arguments',1,'p_single_argument','compiler.py',481),
  ('arguments -> arguments , arguments','arguments',3,'p_arguments','compiler.py',487),
  ('const_val -> NUM','const_val',1,'p_const_val','compiler.py',494),
  ('const_val -> FLOAT','const_val',1,'p_const_val','compiler.py',495),
  ('const_val -> STRING_3SQ','const_val',1,'p_const_val','compiler.py',496),
  ('const_val -> STRING_3DQ','const_val',1,'p_const_val','compiler.py',497),
  ('const_val -> STRING_SQ','const_val',1,'p_const_val','compiler.py',498),
  ('const_val -> STRING_DQ','const_val',1,'p_const_val','compiler.py',499),
  ('return_val -> type_type ( arguments )','return_val',4,'p_return_val','compiler.py',505),
  ('return_val -> type_num ( arguments )','return_val',4,'p_return_val','compiler.py',506),
  ('return_val -> type_any ( arguments )','return_val',4,'p_return_val','compiler.py',507),
  ('return_val -> type_u64 ( arguments )','return_val',4,'p_return_val','compiler.py',508),
  ('return_val -> type_u32 ( arguments )','return_val',4,'p_return_val','compiler.py',509),
  ('return_val -> type_u16 ( arguments )','return_val',4,'p_return_val','compiler.py',510),
  ('return_val -> type_u8 ( arguments )','return_val',4,'p_return_val','compiler.py',511),
  ('return_val -> type_i64 ( arguments )','return_val',4,'p_return_val','compiler.py',512),
  ('return_val -> type_i32 ( arguments )','return_val',4,'p_return_val','compiler.py',513),
  ('return_val -> type_i16 ( arguments )','return_val',4,'p_return_val','compiler.py',514),
  ('return_val -> type_i8 ( arguments )','return_val',4,'p_return_val','compiler.py',515),
  ('return_val -> type_f32 ( arguments )','return_val',4,'p_return_val','compiler.py',516),
  ('return_val -> type_f64 ( arguments )','return_val',4,'p_return_val','compiler.py',517),
  ('return_val -> type_str ( arguments )','return_val',4,'p_return_val','compiler.py',518),
  ('return_val -> type_list ( arguments )','return_val',4,'p_return_val','compiler.py',519),
  ('return_val -> type_tuple ( arguments )','return_val',4,'p_return_val','compiler.py',520),
  ('return_val -> type_array ( arguments )','return_val',4,'p_return_val','compiler.py',521),
  ('return_val -> type_vector ( arguments )','return_val',4,'p_return_val','compiler.py',522),
  ('return_val -> type_dict ( arguments )','return_val',4,'p_return_val','compiler.py',523),
  ('return_val -> type_generator ( arguments )','return_val',4,'p_return_val','compiler.py',524),
  ('return_val -> type_linked_list ( arguments )','return_val',4,'p_return_val','compiler.py',525),
  ('return_val -> type_doubly_linked_list ( arguments )','return_val',4,'p_return_val','compiler.py',526),
  ('return_val -> type_deque ( arguments )','return_val',4,'p_return_val','compiler.py',527),
  ('return_val -> type_heap ( arguments )','return_val',4,'p_return_val','compiler.py',528),
  ('return_val -> type_fibonacci_heap ( arguments )','return_val',4,'p_return_val','compiler.py',529),
  ('return_val -> type_tree ( arguments )','return_val',4,'p_return_val','compiler.py',530),
  ('return_val -> type_trie ( arguments )','return_val',4,'p_return_val','compiler.py',531),
  ('return_val -> type_stack ( arguments )','return_val',4,'p_return_val','compiler.py',532),
  ('return_val -> type_queue ( arguments )','return_val',4,'p_return_val','compiler.py',533),
  ('return_val -> type_binary_search_tree ( arguments )','return_val',4,'p_return_val','compiler.py',534),
  ('return_val -> type_bitset ( arguments )','return_val',4,'p_return_val','compiler.py',535),
  ('return_val -> type_set ( arguments )','return_val',4,'p_return_val','compiler.py',536),
  ('return_val -> type_map ( arguments )','return_val',4,'p_return_val','compiler.py',537),
  ('return_val -> type_range ( arguments )','return_val',4,'p_return_val','compiler.py',538),
]
